{"version":3,"file":"default-src_app_manage-group_manage-group_module_ts-es2017.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAwE;AACN;AACT;AACoN;AACzL;AACjC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACI;AAC5C;AACA;AACA;AACA,kCAAkC,oEAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yFAAyF;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kDAAY;AAC7B;AACA;AACA,+BAA+B,oDAAI,KAAK,sDAAM;AAC9C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yDAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,oCAAoC,+DAAwB,CAAC,2DAAuB,GAAG,+DAAwB;AAChL,uCAAuC,+DAAwB,GAAG,qEAAqE;AACvI;AACA,MAAM,MAAM,2DAAgB,EAAE;AAC9B,MAAM,gCAAgC,MAAM,iDAAM,sCAAsC,IAAI,MAAM,mDAAQ,EAAE;AAC5G;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,2DAAuB,EAAE,IAAI;AACnE,sBAAsB,iDAAM;AAC5B;AACA,aAAa;AACb,sBAAsB,mDAAQ;AAC9B,aAAa,GAAG,IAAI,UAAU;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,iCAAiC,+DAAwB,CAAC,sDAAkB;AACvI,oCAAoC,+DAAwB,GAAG,yEAAyE,wCAAwC;AAChL;AACA,MAAM,MAAM,sDAAW;AACvB;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,sDAAkB,EAAE,IAAI,UAAU;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yCAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iDAAe,GAAG,iCAAiC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sEAAY;AACxB;AACA;AACA,iBAAiB,kDAAY;AAC7B;AACA;AACA;AACA,yBAAyB,wCAAE;AAC3B;AACA;AACA,qDAAqD,yDAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,0BAA0B,+DAAwB,CAAC,0DAAsB,GAAG,+DAAwB,CAAC,4DAAwB;AAC1K,6BAA6B,+DAAwB,GAAG,+GAA+G;AACvK,QAAQ,4DAAqB;AAC7B,MAAM;AACN;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,OAAO,+CAA+C;AACtD,QAAQ,yDAAkB;AAC1B,MAAM;AACN;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,OAAO,wDAAwD,0EAA0E,gIAAgI;AACzQ,QAAQ,gEAAyB;AACjC,OAAO,qDAAqD;AAC5D;AACA,MAAM,MAAM,0DAAe,EAAE;AAC7B,MAAM,MAAM,4DAAiB;AAC7B;AACA;AACA,mBAAmB,MAAM,gDAAK,EAAE;AAChC,oBAAoB,MAAM,gDAAK,EAAE;AACjC,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,oBAAoB,MAAM,oDAAS,8BAA8B,cAAc,IAAI;AACnF,kBAAkB,MAAM,0DAAe;AACvC;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,iEAAsB;AACrD;AACA;AACA;AACA;AACA,iCAAiC,0EAA+B;AAChE,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,0DAAsB,EAAE,IAAI,MAAM,4DAAwB,EAAE,IAAI,IAAI;AAC1G,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,oDAAS;AAC3B,wCAAwC,cAAc;AACtD,SAAS;AACT,kBAAkB,0DAAe;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS,GAAG,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yCAAO;AACrC;AACA,gCAAgC,yCAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,UAAU;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,eAAe;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8BAA8B,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB;AACxJ,iCAAiC,+DAAwB,GAAG,6DAA6D,cAAc,6BAA6B;AACpK;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,MAAM,qDAAU,EAAE;AACxB,MAAM;AACN;AACA;AACA,aAAa,MAAM,gDAAK,EAAE;AAC1B;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,qDAAiB,EAAE,IAAI,eAAe,IAAI,IAAI;AACpF,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2EAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kDAAY;AAC7B,+BAA+B,yDAAS;AACxC;AACA;AACA,qCAAqC,yDAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,oCAAoC,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,WAAW,+DAAwB,CAAC,0DAAsB;AACpO,uCAAuC,+DAAwB,GAAG,+IAA+I;AACjN,QAAQ,4DAAqB;AAC7B,MAAM;AACN;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,OAAO,YAAY,0DAA0D,8CAA8C,gEAAyB;AACpJ,cAAc,sDAAsD;AACpE,cAAc;AACd,YAAY,wEAAiC,GAAG;AAChD;AACA,MAAM,MAAM,qDAAU,EAAE;AACxB,MAAM,eAAe;AACrB,MAAM,MAAM,0DAAe;AAC3B;AACA;AACA,mBAAmB,MAAM,0DAAe;AACxC;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,sBAAsB,sDAAsD;AAC5E,sBAAsB;AACtB;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,qDAAiB,EAAE,IAAI,eAAe,IAAI,MAAM,0DAAsB,EAAE,IAAI,IAAI;AACtH,kBAAkB,0DAAe;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yCAAO;AACrC;AACA;AACA;AACA;AACA;AACA,6BAA6B,yDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,uBAAuB;AACvB;AACA;AACA;AACA;AACA,mBAAmB;AACnB,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,qBAAqB,EAAE,iBAAiB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2EAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2EAAoB;AAC3C;AACA;AACA;AACA,mEAAmE,qCAAqC,+DAAwB,eAAe,+DAAwB,WAAW,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,CAAC,8DAAqB;AAC7Q,wCAAwC,+DAAwB,GAAG,iFAAiF,0FAA0F;AAC9O;AACA,MAAM,mBAAmB;AACzB,MAAM,eAAe;AACrB,MAAM,MAAM,qDAAU,EAAE;AACxB,MAAM,MAAM,8DAAc,iBAAiB,MAAM,mDAAQ,EAAE;AAC3D;AACA;AACA,cAAc,MAAM,gDAAK,iCAAiC;AAC1D,eAAe,MAAM,gDAAK,uCAAuC;AACjE;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,mBAAmB,IAAI,eAAe,IAAI,MAAM,qDAAiB,EAAE,IAAI,MAAM,8DAAqB;AAClI,sBAAsB,m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,mDAAQ;AACtB;AACA,0BAA0B,4DAAa,EAAE,mEAAe;AACxD,0BAA0B,mEAAe;AACzC;AACA,aAAa;AACb,KAAK,iBAAiB;AACtB,eAAe,mDAAmD,gEAAyB,kBAAkB,4BAA4B,6HAA6H,yBAAyB,QAAQ,4DAAa,EAAE,mEAAe,IAAI,yBAAyB,QAAQ,mEAAe,yHAAyH,IAAI;;AAEtf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oDAAI;AAC3C;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gEAAU;AAC9C;AACA;AACA;AACA;AACA,kCAAkC,iDAAe;AACjD,iCAAiC,iDAAe;AAChD,yBAAyB,iDAAe;AACxC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2CAAK,kGAAkG,mDAAG;AACzH;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gEAAU;AAChD;AACA;AACA,yBAAyB,iDAAe;AACxC;AACA;AACA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","sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/tree.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/tree.js","./src/app/manage-group/manage-group-routing.module.ts","./src/app/manage-group/manage-group.module.ts","./src/app/manage-group/manage-groups/manage-groups.component.ts","./src/app/manage-group/manage-groups/manage-groups.component.html","./src/app/manage-group/managers/manage-groups-manager.service.ts","./src/app/manage-group/store/manage-groups.effects.ts","./src/app/manage-group/sub-group-child/sub-group-child.component.ts","./src/app/manage-group/sub-group-child/sub-group-child.component.html"],"sourcesContent":["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /** A selection model with multi-selection to track expansion status. */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode) {\n        this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n    expand(dataNode) {\n        this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode) {\n        this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(this._trackByValue(dataNode)) ?\n            this.collapseDescendants(dataNode) :\n            this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    _trackByValue(value) {\n        return this.trackBy ? this.trackBy(value) : value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nclass FlatTreeControl extends BaseTreeControl {\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(getLevel, isExpandable, options) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode) {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nclass NestedTreeControl extends BaseTreeControl {\n    /** Construct with nested tree function getChildren. */\n    constructor(getChildren, options) {\n        super();\n        this.getChildren = getChildren;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode) {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter(Boolean))\n                .subscribe(children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass CdkTreeNodeDef {\n    /** @docs-private */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nclass CdkTree {\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /** Level of nodes */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n    get dataSource() { return this._dataSource; }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlMissingError();\n        }\n    }\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this.viewChange.complete();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex);\n                this._levels.delete(item.item);\n            }\n            else {\n                const view = viewContainer.get(adjustedPreviousIndex);\n                viewContainer.move(view, currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkTreeNodeOutlet], encapsulation: 2 });\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet, { static: true }]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nclass CdkTreeNode {\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Emits when the node's data has changed. */\n        this._dataChanges = new Subject();\n        CdkTreeNode.mostRecentTreeNode = this;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.classList.add('cdk-tree-node');\n        this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n    get role() { return 'treeitem'; }\n    set role(_role) {\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.setAttribute('role', _role);\n    }\n    /** The tree node's data. */\n    get data() { return this._data; }\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    _setExpanded(_expanded) {\n        this._isAriaExpanded = _expanded;\n        this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\n    }\n    get level() {\n        // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n        // aria-level off the parent node and use it as the level for this node (note aria-level is\n        // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n        return this._tree.treeControl.getLevel ?\n            this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n    }\n    ngOnInit() {\n        this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n        this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n    }\n    ngDoCheck() {\n        // aria-expanded is be set here because the expanded state is stored in the tree control and\n        // the node isn't aware when the state is changed.\n        // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n        // TODO: move to host after View Engine deprecation\n        if (this.isExpanded != this._isAriaExpanded) {\n            this._setExpanded(this.isExpanded);\n        }\n    }\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Focuses the menu item. Implements for FocusableOption. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    // TODO: role should eventually just be set in the component host\n    _setRoleFromData() {\n        if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        this.role = 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\nfunction getParentNodeAriaLevel(nodeElement) {\n    let parent = nodeElement.parentElement;\n    while (parent && !isNodeElement(parent)) {\n        parent = parent.parentElement;\n    }\n    if (!parent) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw Error('Incorrect tree structure containing detached node.');\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (parent.classList.contains('cdk-nested-tree-node')) {\n        return coerceNumberProperty(parent.getAttribute('aria-level'));\n    }\n    else {\n        // The ancestor element is the cdk-tree itself\n        return 0;\n    }\n}\nfunction isNodeElement(element) {\n    const classList = element.classList;\n    return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    constructor(elementRef, tree, _differs) {\n        super(elementRef, tree);\n        this._differs = _differs;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n    }\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(childrenNodes);\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n    updateChildrenNodes(children) {\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Clear the children dataNodes. */\n    _clear() {\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Gets the outlet for the current node. */\n    _getNodeOutlet() {\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nclass CdkTreeNodePadding {\n    constructor(_treeNode, _tree, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._element = _element;\n        this._dir = _dir;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** CSS units used for the indentation value. */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe(() => this._setPadding());\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() { return this._level; }\n    set level(value) { this._setLevelInput(value); }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     */\n    get indent() { return this._indent; }\n    set indent(indent) { this._setIndentInput(indent); }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent() {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    _setPadding(forceChange = false) {\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            const element = this._element.nativeElement;\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            element.style[paddingProp] = padding || '';\n            element.style[resetProp] = '';\n            this._currentPadding = padding;\n        }\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setLevelInput(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null);\n        this._setPadding();\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setIndentInput(indent) {\n        let value = indent;\n        let units = 'px';\n        if (typeof indent === 'string') {\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nclass CdkTreeNodeToggle {\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n    get recursive() { return this._recursive; }\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n    _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{ selector: '[cdkTreeNodeToggle]' }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); };\nCdkTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet], exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n\n","import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeBase {\n    constructor(elementRef, tree, tabIndex) {\n        super(elementRef, tree);\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('mat-tree-node');\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeDef_BaseFactory; return function MatTreeNodeDef_Factory(t) { return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef); }; }();\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    constructor(elementRef, tree, differs, tabIndex) {\n        super(elementRef, tree, differs);\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('mat-nested-tree-node');\n    }\n    /** Whether the node is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Tabindex for the node. */\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    disabled: [{ type: Input }],\n    tabIndex: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() { return this._level; }\n    set level(value) { this._setLevelInput(value); }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() { return this._indent; }\n    set indent(indent) { this._setIndentInput(indent); }\n}\nMatTreeNodePadding.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodePadding_BaseFactory; return function MatTreeNodePadding_Factory(t) { return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding); }; }();\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet\n            }])] });\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = /*@__PURE__*/ function () { let ɵMatTree_BaseFactory; return function MatTree_Factory(t) { return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree); }; }();\nMatTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], encapsulation: 2 });\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    // The 'cdk-tree' class needs to be included here because classes set in the host in the\n                    // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n                    // to be set in the host because:\n                    // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n                    // class from it.\n                    // the ElementRef is not available in the constructor so the class can't be applied directly\n                    // without a breaking constructor change.\n                    'class': 'mat-tree cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CdkTree, useExisting: MatTree }],\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n            }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n// tslint:disable-next-line: coercion-types\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    get recursive() { return this._recursive; }\n    set recursive(value) {\n        // TODO: when we remove support for ViewEngine, change this setter to an input\n        // alias in the decorator metadata.\n        this._recursive = coerceBooleanProperty(value);\n    }\n}\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeToggle_BaseFactory; return function MatTreeNodeToggle_Factory(t) { return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle); }; }();\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); };\nMatTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CdkTreeModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, MatCommonModule],\n                exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, MatCommonModule]; }, exports: function () { return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    get data() { return this._data.value; }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() { return this._data.value; }\n    set data(value) { this._data.next(value); }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n\n","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { AuthGuard } from \"../guards/auth.guard\";\nimport { ManageGroupsComponent } from \"./manage-groups/manage-groups.component\";\nimport { UserRoles } from \"../enum/roles.enum\";\nimport { RootComponent } from \"../shared/root/root.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    canActivate: [AuthGuard],\n    component: RootComponent,\n    children: [\n      {\n        path: \"\",\n        component: ManageGroupsComponent,\n        canActivate: [AuthGuard],\n        data: {\n          roles: [\n            UserRoles.CLINICAL_FACILITY_ADMIN,\n            UserRoles.CLINICAL_FACILITY_ADMIN_CLONE,\n            UserRoles.GENERAL_CLINICIAN,\n            UserRoles.SUPERVISORY_CLINICIAN,\n            UserRoles.PHYSICIAN,\n          ],\n        },\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageGroupRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { ManageGroupsComponent } from \"./manage-groups/manage-groups.component\";\nimport { ManageGroupRoutingModule } from \"./manage-group-routing.module\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatTreeModule } from \"@angular/material/tree\";\nimport { StoreModule } from \"@ngrx/store\";\nimport * as fromManageGroups from \"./store/manage-groups.reducer\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { ManageGroupsEffects } from \"./store/manage-groups.effects\";\nimport { I18nModule } from \"../i18n/i18n.module\";\nimport { LifeSignalsModule } from \"../life-signals/life-signals.module\";\nimport { FormsModule } from \"@angular/forms\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { SubGroupChildComponent } from './sub-group-child/sub-group-child.component';\n\n@NgModule({\n  declarations: [ManageGroupsComponent, SubGroupChildComponent],\n  imports: [\n    CommonModule,\n    ManageGroupRoutingModule,\n    FormsModule,\n    SharedModule,\n    MatCardModule,\n    MatTreeModule,\n    MatInputModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatIconModule,\n    I18nModule,\n    StoreModule.forFeature(\n      fromManageGroups.manageGroupFeatureKey,\n      fromManageGroups.GroupsReducer\n    ),\n    EffectsModule.forFeature([ManageGroupsEffects]),\n    LifeSignalsModule,\n    MatProgressSpinnerModule,\n  ],\n  providers: [],\n})\nexport class ManageGroupModule {}\n","import {Component, OnDestroy, OnInit} from \"@angular/core\";\r\nimport {Router} from \"@angular/router\";\r\nimport {AuthenticationService} from \"@services/authentication.service\";\r\nimport {Observable, Subscription} from \"rxjs\";\r\nimport {map} from \"rxjs/operators\";\r\nimport {ManageGroupsManagerService} from \"../managers/manage-groups-manager.service\";\r\nimport {Group, groupNamePattern, restrictedGroupNames} from \"../models/manage-groups.model\";\r\nimport {ManageGroupState} from \"../store/manage-groups.reducer\";\r\nimport {SnackbarService} from \"@services/snackbar.service\";\r\nimport {ConfirmDialogComponent} from \"../../shared/confirm-dialog/confirm-dialog.component\";\r\nimport {MatDialog} from \"@angular/material/dialog\";\r\n\r\n\r\n@Component({\r\n  selector: \"app-manage-groups\",\r\n  templateUrl: \"./manage-groups.component.html\",\r\n  styleUrls: [\"./manage-groups.component.scss\"],\r\n})\r\nexport class ManageGroupsComponent implements OnInit, OnDestroy {\r\n  isCreationAllowed: boolean = false;\r\n  loading: boolean = true;\r\n  keepOpen: string;\r\n  tempName = null;\r\n\r\n  manageGroups$: Observable<ManageGroupState>;\r\n  manageGroupSubscription: Subscription;\r\n  loaderSubscription: Subscription;\r\n  cGroups: Group[] = [];\r\n  pGroups: Group[] = [];\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private manager: ManageGroupsManagerService,\r\n    private authSevice: AuthenticationService,\r\n    private snackbar: SnackbarService,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n  isAuthorisedUser() {\r\n    if (this.authSevice.getRoles().indexOf('CFA') > -1\r\n        || this.authSevice.getRoles().indexOf('CFAC') > -1 ) {\r\n      this.isCreationAllowed = true;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.isAuthorisedUser();\r\n    this.getGroups();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.manageGroupSubscription?.unsubscribe();\r\n    this.loaderSubscription?.unsubscribe();\r\n  }\r\n\r\n  toggleAddPgroup(parentId: string) {\r\n    if (!this.pGroups.some(g => (!g.groupId && (g.parent === parentId)))) {\r\n      if (parentId !== 'ROOT') {\r\n        this.pGroups.find(g => g.groupId === parentId).expanded = true;\r\n        this.pGroups.find(g => g.groupId === parentId).hasChildren = true;\r\n      }\r\n      this.pGroups = [\r\n        {\r\n          name: \"\",\r\n          parent: parentId,\r\n          type: \"physical\",\r\n          isShow: true\r\n        },\r\n        ...this.pGroups\r\n      ]\r\n    }\r\n  }\r\n\r\n  onUpdateGroups(groups) {\r\n    this.pGroups = [...groups];\r\n  }\r\n\r\n  toggleAddCgroup(parentId: string) {\r\n    this.cGroups = [\r\n      {\r\n        name: \"\",\r\n        parent: parentId,\r\n        type: \"clinical\",\r\n        isShow: true\r\n      },\r\n      ...this.cGroups\r\n    ]\r\n  }\r\n\r\n  savePGroup(obj, parent) {\r\n    obj.parent = parent;\r\n    const ob: Group = {\r\n      name: this.capitalizeText(obj.name),\r\n      parent: obj.parent,\r\n      type: \"physical\",\r\n      facility_id: \"test\"\r\n      // facilityId: this.pGroups[this.pGroups.length - 1].facilityId\r\n    }\r\n    if (obj.groupId) {\r\n      ob.groupId = obj.groupId;\r\n      this.manager.updateGroup(ob).subscribe((r) => {\r\n        if (r.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      this.manager.saveGroup(ob).subscribe((r) => {\r\n        if (r.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  saveCGroup(obj, parent) {\r\n    obj.parent = parent;\r\n    const ob: Group = {\r\n      name: this.capitalizeText(obj.name),\r\n      parent: \"root\",\r\n      type: \"clinical\",\r\n      facility_id: \"test\"\r\n    }\r\n    if (obj.groupId) {\r\n      ob.groupId = obj.groupId;\r\n      this.manager.updateGroup(ob);\r\n    } else {\r\n      this.manager.saveGroup(ob).subscribe((r) => {\r\n        if (r.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  cancelAdd(groupItem: Group) {\r\n    groupItem.isShow = false;\r\n    if (groupItem.type === \"PHYSICAL\") {\r\n      if (groupItem.parent !== 'ROOT') {\r\n        if (!this.pGroups.find(g => g.parent === groupItem.parent)) {\r\n          this.pGroups.find(g => g.groupId === groupItem.parent).hasChildren = false;\r\n          this.pGroups.find(g => g.groupId === groupItem.parent).expanded = false;\r\n        }\r\n      }\r\n      this.pGroups = this.pGroups.filter(g => g.groupId);\r\n    } else if (groupItem.type === \"clinical\") {\r\n      this.cGroups = this.cGroups.filter(g => g.groupId);\r\n    }\r\n  }\r\n\r\n  saveSubPGroup(obj, parentId) {\r\n    delete obj.isShow;\r\n    obj.parent = parentId;\r\n    if (!obj.groupId) {\r\n      const ob: Group = {\r\n        name: this.capitalizeText(obj.name),\r\n        parent: parentId,\r\n        type: obj.type,\r\n        groupId: null\r\n      }\r\n      this.manager.saveGroup(ob).subscribe((r) => {\r\n        if (r.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      const ob: Group = {\r\n        name: this.capitalizeText(obj.name),\r\n        parent: parentId,\r\n        type: obj.type,\r\n        groupId: obj.groupId\r\n      }\r\n      this.manager.updateGroup(ob).subscribe((r) => {\r\n        if (r.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  editGroup(groupItem: Group) {\r\n    this.tempName = groupItem.name;\r\n    groupItem.tempName = groupItem.name;\r\n    groupItem.isShow = true;\r\n  }\r\n  cancelEdit(groupItem: Group) {\r\n    groupItem.name = groupItem.tempName;\r\n    groupItem.isShow = false;\r\n  }\r\n\r\n  editSubGroup(groupItem: Group, parentId) {\r\n    this.tempName = groupItem.name;\r\n    groupItem.tempName = groupItem.name;\r\n    groupItem.isShow = true;\r\n    groupItem.parent = parentId;\r\n  }\r\n\r\n  onGetGroups() {\r\n    console.log('reload');\r\n    this.getGroups();\r\n  }\r\n\r\n  deletePGroupItem(groupId) {\r\n    if (groupId) {\r\n      this.manager.removeGroup(groupId).subscribe((r) => {\r\n        if (r.error) {\r\n          this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n        } else {\r\n          // this.pGroups = [...this.pGroups.filter(g => g.groupId !== groupId)];\r\n        }\r\n      });\r\n    } else {\r\n      this.pGroups = this.pGroups.filter(g => g.groupId);\r\n    }\r\n    setTimeout(() => {\r\n      this.getGroups();\r\n    }, 200);\r\n  }\r\n\r\n  deleteCGroupItem(groupId) {\r\n    if (groupId) {\r\n      this.manager.removeGroup(groupId).subscribe((r) => {\r\n        if (r.error) {\r\n          this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n        } else {\r\n          //this.cGroups = this.cGroups.filter(g => g.groupId !== groupId);\r\n        }\r\n      });\r\n    } else {\r\n      this.cGroups = this.cGroups.filter(g => g.groupId);\r\n    }\r\n    setTimeout(() => {\r\n      this.getGroups();\r\n    }, 200);\r\n  }\r\n  confirmDelete(groupId, type) {\r\n    const confirm = this.dialog.open(ConfirmDialogComponent, {\r\n      maxWidth: \"85vw\",\r\n      height: \"auto\",\r\n      maxHeight: \"90vh\",\r\n      data: {\r\n        body: {\r\n          title: \"manage-group-module.delete_group\",\r\n          text: \"manage-group-module.confirm_delete_group\",\r\n        },\r\n      },\r\n      disableClose: true,\r\n    });\r\n    confirm.afterClosed().subscribe((data) => {\r\n      if (data) {\r\n        if(type === 'physical') {\r\n         this.deletePGroupItem(groupId);\r\n        } else {\r\n          this.deleteCGroupItem(groupId)\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  goBackToSummary() {\r\n    this.router.navigate([\"summary\"]);\r\n  }\r\n\r\n  getGroups() {\r\n    this.manageGroups$ = this.manager.fetchGroups();\r\n    this.manageGroupSubscription = this.manageGroups$.pipe(map(x => {\r\n        const cGroups = (x?.CLINICAL_GROUPS || []).map(y => {\r\n          return {\r\n            ...y,\r\n            isShow: false\r\n          }\r\n        });\r\n        this.cGroups = cGroups.map(g => {\r\n          return {\r\n            ...g\r\n          }\r\n        });\r\n\r\n        const pGroups = (x?.PHYSICAL_GROUPS || []).map(y => {\r\n          return {\r\n            ...y,\r\n            isShow: false\r\n          }\r\n        });\r\n        this.pGroups = [...pGroups.filter(p => !p.deleted)\r\n            .map(g => {\r\n              return {\r\n                ...g,\r\n                expanded: this.pGroups.find(group => group.groupId === g.groupId)?.expanded || false,\r\n                hasChildren: !!pGroups?.find(group => group.parent === g.groupId)\r\n                \r\n              }\r\n            })];\r\n            \r\n        console.log(this.pGroups);\r\n    })).subscribe();\r\n    this.loaderSubscription = this.manager.getLoadedStatus()\r\n      .subscribe((loaded) => {\r\n        this.loading = !loaded;\r\n      });\r\n  }\r\n\r\n  getSubPGroups(parentId) {\r\n    let groups = (this.pGroups || []).filter(g => g.parent === parentId);\r\n    if (parentId === 'ROOT') {\r\n      this.pGroups.forEach(group => {\r\n        if (group.parent !== 'ROOT' && !(this.pGroups.find(grp => grp.groupId === group.parent))) {\r\n          groups.push(group);\r\n        }\r\n      });\r\n    }\r\n    return groups;\r\n  }\r\n\r\n  getSubCGroups(parentId) {\r\n    return (this.cGroups || []).filter(g => g.parent === parentId);\r\n  }\r\n\r\n  alphaNumericsOnly(event: KeyboardEvent) {\r\n    let charsOnlyPattern = /^[a-zA-Z0-9-_ ]+$/;\r\n    let key = event.key;\r\n    if (charsOnlyPattern.test(key)) {\r\n      return true;\r\n    } else {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  }\r\n  validateName(groupName) {\r\n    return (groupNamePattern.test(groupName) && restrictedGroupNames.indexOf(groupName) === -1);\r\n  }\r\n\r\n  alphaNumericsOnPaste(event) {\r\n    let regex = /^[a-zA-Z0-9-_ ]+$/;\r\n    let pasteData = event.clipboardData.getData('text');\r\n    if (!regex.test(pasteData)) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  }\r\n  capitalizeText(name) {\r\n    //let transform = name.toLowerCase();\r\n    return name.replace(/\\w\\S*/g, (w) => (w.replace(/^\\w/, (c) => c.toUpperCase())))\r\n  }\r\n}\r\n","<ls-page-header type=\"manage_groups\"></ls-page-header>\r\n\r\n<div class=\"container-fuild\">\r\n    <div class=\"mat-tree-grpup\">\r\n        <div class=\"manage-group\">\r\n            <div class=\"display-flex d-flex flex-column justify-content-start align-items-start\">\r\n                <div class=\"mt-0 mb-2 label-group\">\r\n                    <label>{{ \"manage-group-module.label.location\" | translate }}</label>\r\n                </div>\r\n                <div class=\"add-items my-2\" *ngIf=\"isCreationAllowed\">\r\n                    <button mat-stroked-button class=\"small-button\" (click)=\"toggleAddPgroup('ROOT')\">\r\n                        {{ \"manage-group-module.button.add_level\" | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <mat-progress-spinner class=\"mt-3 d-flex align-self-center justify-self-center small-spinner\" color=\"accent\"\r\n                mode=\"indeterminate\" strokeWidth=\"2\" diameter=\"40\" *ngIf=\"loading\">\r\n            </mat-progress-spinner>\r\n            <div *ngIf=\"!pGroups?.length && !loading\" class=\"my-2\">\r\n                {{\"manage-group-module.no_location_groups\" | translate}}\r\n            </div>\r\n            <div class=\"group-listing\">\r\n                <ng-container *ngFor=\"let pGroupItem of getSubPGroups('ROOT'); let i = index\">\r\n                    <mat-card class=\"my-1 manage-card\">\r\n                        <span class=\"delete-icon\" (click)=\"cancelAdd(pGroupItem)\"\r\n                            *ngIf=\"isCreationAllowed && !pGroupItem?.groupId\">\r\n                            <mat-icon>close</mat-icon>\r\n                        </span>\r\n                        <span class=\"delete-icon\" (click)=\"confirmDelete(pGroupItem?.groupId, 'PHYSICAL')\"\r\n                            *ngIf=\"isCreationAllowed  && !pGroupItem?.hasChildren && pGroupItem?.groupId\">\r\n                            <mat-icon>delete_outline</mat-icon>\r\n                        </span>\r\n                        <h2 *ngIf=\"!pGroupItem?.isShow\">\r\n                            {{ pGroupItem.name }}\r\n                        </h2>\r\n                        <div class=\"nested-group d-flex align-items-center\" *ngIf=\"pGroupItem?.isShow\">\r\n                            <div class=\"ms-3 input-group\">\r\n                                <input type=\"text\" class=\"px-2 form-control edit-form-control me-2\"\r\n                                    [(ngModel)]=\"pGroupItem.name\" placeholder=\"Group Name\" [maxLength]=\"32\"\r\n                                    (keypress)=\"alphaNumericsOnly($event)\" (paste)=\"alphaNumericsOnPaste($event)\"\r\n                                    autocomplete=\"off\" />\r\n                            </div>\r\n                            <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\r\n                                (click)=\"savePGroup(pGroupItem, 'root')\"\r\n                                *ngIf=\"pGroupItem?.name?.trim().length && pGroupItem?.name !== pGroupItem?.tempName && validateName(pGroupItem?.name?.toUpperCase())\">\r\n                                <mat-icon>check</mat-icon>\r\n                            </button>\r\n                            <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\r\n                                (click)=\"cancelEdit(pGroupItem)\" *ngIf=\"pGroupItem?.groupId\">\r\n                                <mat-icon>close</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                        <span class=\"edit-icon\" *ngIf=\"isCreationAllowed && !pGroupItem?.isShow\"\r\n                            (click)=\"editSubGroup(pGroupItem, 'ROOT')\">\r\n                            <mat-icon>edit</mat-icon>\r\n                        </span>\r\n                        <button mat-mini-fab style=\"position: absolute; right: 1rem\" class=\"btn-sml-boxed\"\r\n                            color=\"primary\" (click)=\"toggleAddPgroup(pGroupItem.groupId)\"\r\n                            *ngIf=\"isCreationAllowed && pGroupItem.groupId && (!pGroupItem?.hasChildren || !getSubPGroups(pGroupItem?.groupId)?.length)\">\r\n                            <mat-icon>add</mat-icon>\r\n                        </button>\r\n                        <button mat-mini-fab class=\"btn-sml-boxed expand-boxed-btn\" color=\"primary\"\r\n                            *ngIf=\"pGroupItem?.hasChildren && getSubPGroups(pGroupItem?.groupId)?.length\"\r\n                            (click)=\"!pGroupItem.expanded ? keepOpen = pGroupItem.groupId : keepOpen = null; pGroupItem.expanded = !pGroupItem.expanded;\">\r\n                            <mat-icon *ngIf=\"!pGroupItem.expanded\">expand_more</mat-icon>\r\n                            <mat-icon *ngIf=\"pGroupItem.expanded\">expand_less</mat-icon>\r\n                        </button>\r\n                    </mat-card>\r\n\r\n                    <div class=\"manage-nested d-flex flex-column\" *ngIf=\"!!pGroupItem?.expanded\">\r\n                        <app-sub-group-child (updateGroups)=\"onUpdateGroups($event)\" class=\"w-100\" [level]=\"1\"\r\n                            [pGroups]=\"pGroups\" [isCreationAllowed]=\"isCreationAllowed\" [pGroupItem]=\"pGroupItem\"\r\n                            (getGroups)=\"onGetGroups()\"></app-sub-group-child>\r\n                    </div>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <!-- <div class=\"manage-group\">\r\n            <div class=\"display-flex d-flex flex-column justify-content-start align-items-start\">\r\n                <div class=\"d-flex align-items-center mt-4  mb-2\">\r\n                    <div class=\"label-group\">\r\n                        <label>{{\r\n                            \"manage-group-module.label.medical_condition\" | translate\r\n                            }}</label>\r\n                    </div>\r\n                    <mat-icon class=\"ms-3 opacity-50 d-flex align-items-center\">arrow_downward</mat-icon>\r\n                </div>\r\n                <div class=\"add-items my-2\" *ngIf=\"isCreationAllowed\">\r\n                    <button mat-stroked-button class=\"small-button\" (click)=\"toggleAddCgroup('ROOT')\">\r\n                        {{ \"manage-group-module.button.add_level\" | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <mat-progress-spinner class=\"mt-3 d-flex align-self-center justify-self-center small-spinner\" color=\"accent\"\r\n                mode=\"indeterminate\" strokeWidth=\"2\" diameter=\"40\" *ngIf=\"loading\">\r\n            </mat-progress-spinner>\r\n            <div *ngIf=\"!cGroups?.length && !loading\" class=\"my-2\">\r\n                {{\"manage-group-module.no_clinical_groups\" | translate}}\r\n            </div>\r\n            <div class=\"group-listing\">\r\n                <mat-card *ngFor=\"let cGroupItem of cGroups; let i = index\" class=\"my-1 manage-card\">\r\n                    <span class=\"delete-icon\" (click)=\"cancelAdd(cGroupItem)\"\r\n                        *ngIf=\"isCreationAllowed && !cGroupItem?.groupId\">\r\n                        <mat-icon>close</mat-icon>\r\n                    </span>\r\n                    <span class=\"delete-icon\" (click)=\"confirmDelete(cGroupItem?.groupId, 'CLINICAL')\"\r\n                        *ngIf=\"isCreationAllowed  && !cGroupItem?.hasChildren && cGroupItem?.groupId\">\r\n                        <mat-icon>delete_outline</mat-icon>\r\n                    </span>\r\n                    <h2 *ngIf=\"!cGroupItem?.isShow\">\r\n                        {{ cGroupItem.name }}\r\n                    </h2>\r\n                    <div class=\"nested-group d-flex align-items-center\" *ngIf=\"cGroupItem?.isShow\">\r\n                        <div class=\"ms-3 input-group\">\r\n                            <input type=\"text\" class=\"px-2 edit-form-control form-control me-2\"\r\n                                [(ngModel)]=\"cGroupItem.name\" placeholder=\"Group Name\" [maxLength]=\"32\" required=\"true\"\r\n                                (keypress)=\"alphaNumericsOnly($event)\" (paste)=\"alphaNumericsOnPaste($event)\"\r\n                                autocomplete=\"off\" />\r\n                        </div>\r\n                        <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\r\n                            (click)=\"saveCGroup(cGroupItem, 'ROOT')\"\r\n                            *ngIf=\"cGroupItem?.name?.trim().length && cGroupItem?.name !== cGroupItem?.tempName && validateName(cGroupItem?.name?.toUpperCase())\">\r\n                            <mat-icon>check</mat-icon>\r\n                        </button>\r\n                        <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\r\n                            (click)=\"cancelEdit(cGroupItem)\" *ngIf=\"cGroupItem?.groupId\">\r\n                            <mat-icon>close</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                    <span class=\"edit-icon\" *ngIf=\"isCreationAllowed && !cGroupItem?.isShow\"\r\n                        (click)=\"editGroup(cGroupItem)\">\r\n                        <mat-icon>edit</mat-icon>\r\n                    </span>\r\n                </mat-card>\r\n            </div>\r\n        </div> -->\r\n    </div>\r\n</div>","import { Injectable } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\n\nimport {\n  ManageGroupsStoreActions,\n  ManageGroupsStoreSelectors,\n  ManageGroupsStoreState,\n} from \"./../store\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ManageGroupsManagerService {\n  constructor(private store$: Store<ManageGroupsStoreState.ManageGroupState>) {}\n\n  saveGroup(groupData) {\n    this.store$.dispatch(\n      new ManageGroupsStoreActions.SaveGroupRequestAction(groupData)\n    );\n    return this.store$.select(\n      ManageGroupsStoreSelectors.saveGroup\n    )\n  }\n\n  updateGroup(groupData) {\n    this.store$.dispatch(\n      new ManageGroupsStoreActions.UpdateGroupRequestAction(groupData)\n    );\n    return this.store$.select(\n        ManageGroupsStoreSelectors.saveGroup\n    )\n  }\n\n  removeGroup(groupId) {\n    this.store$.dispatch(\n      new ManageGroupsStoreActions.RemoveGroupRequestAction(groupId)\n    );\n    return this.store$.select(\n      ManageGroupsStoreSelectors.removeGroup\n    )\n  }\n\n  fetchGroups() {\n    this.store$.dispatch(\n      new ManageGroupsStoreActions.LoadGroupsRequestAction()\n    );\n    return this.store$.select(\n      ManageGroupsStoreSelectors.selectGroupsList\n    );\n  }\n  getLoadedStatus() {\n    return this.store$.select(\n        ManageGroupsStoreSelectors.groupsLoaded\n    );\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { Action } from \"@ngrx/store\";\nimport { Observable, of } from \"rxjs\";\nimport { exhaustMap, map, catchError } from \"rxjs/operators\";\nimport { ManageGroupsService } from \"../services/manage-groups.service\";\nimport * as featureActions from \"./manage-groups.actions\";\n\n@Injectable()\nexport class ManageGroupsEffects {\n  constructor(\n    private manageGroupService: ManageGroupsService,\n    private actions$: Actions\n  ) { }\n\n  loadGroups$: Observable<Action> = createEffect(() => {\n    console.log(\"calling\");\n    return this.actions$.pipe(\n      ofType<featureActions.LoadGroupsRequestAction>(\n        featureActions.ActionTypes.LOAD_GROUPS_REQUEST\n      ),\n      exhaustMap(() => {\n        return this.manageGroupService.fetch().pipe(\n          map(\n            (groups) => new featureActions.LoadGroupsSuccessAction({ groups: groups.data })\n          ),\n          catchError((error) =>\n            of(new featureActions.LoadGroupsFailureAction(error))\n          )\n        );\n      })\n    );\n  });\n\n  saveGroup$: Observable<Action> = createEffect(() => {\n    return this.actions$.pipe(\n      ofType<featureActions.SaveGroupRequestAction>(\n        featureActions.ActionTypes.SAVE_GROUP_REQUEST\n      ),\n      exhaustMap((data) => {\n        return this.manageGroupService.save(data.payload).pipe(\n          map((group) => {\n            return new featureActions.SaveGroupSuccessAction({ group })\n          }),\n          catchError((error) =>\n            of(new featureActions.SaveGroupFailureAction(error))\n          )\n        );\n      })\n    );\n  });\n\n  updateGroup$: Observable<Action> = createEffect(() => {\n    return this.actions$.pipe(\n      ofType<featureActions.UpdateGroupRequestAction>(\n        featureActions.ActionTypes.UPDATE_GROUP_REQUEST\n      ),\n      exhaustMap((data) => {\n        return this.manageGroupService.update(data.payload).pipe(\n          map((group) => {\n            return new featureActions.UpdateGroupSuccessAction({ group })\n          }),\n          catchError((error) =>\n            of(new featureActions.UpdateGroupFailureAction(error))\n          )\n        );\n      })\n    );\n  });\n\n  removeGroup$: Observable<Action> = createEffect(() => {\n    return this.actions$.pipe(\n      ofType<featureActions.RemoveGroupRequestAction>(\n        featureActions.ActionTypes.REMOVE_GROUP_REQUEST\n      ),\n      exhaustMap((data) => {\n        return this.manageGroupService.remove(data.payload).pipe(\n          map((group) => {\n            return new featureActions.RemoveGroupSuccessAction({ group })\n          }),\n          catchError((error) =>\n            of(new featureActions.RemoveGroupFailureAction(error))\n          )\n        );\n      })\n    );\n  });\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\r\nimport { SnackbarService } from '@services/snackbar.service';\r\nimport { ManageGroupsManagerService } from '../managers/manage-groups-manager.service';\r\nimport {Group, groupNamePattern, restrictedGroupNames} from '../models/manage-groups.model';\r\nimport {ManageGroupsService} from \"../services/manage-groups.service\";\r\nimport {error} from \"protractor\";\r\nimport {ConfirmDialogComponent} from \"../../shared/confirm-dialog/confirm-dialog.component\";\r\nimport {MatDialog} from \"@angular/material/dialog\";\r\n\r\n@Component({\r\n  selector: 'app-sub-group-child',\r\n  templateUrl: './sub-group-child.component.html',\r\n  styleUrls: ['./sub-group-child.component.scss']\r\n})\r\nexport class SubGroupChildComponent implements OnInit {\r\n  @Input() pGroups = [];\r\n  @Input() isCreationAllowed: boolean;\r\n  @Input() pGroupItem;\r\n  @Input() level: number;\r\n  keepOpen = false;\r\n  @Output() getGroups: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() updateGroups: EventEmitter<any> = new EventEmitter<any>();\r\n  tempName;\r\n  constructor(\r\n    private manager: ManageGroupsManagerService,\r\n    private snackbar: SnackbarService,\r\n    private service: ManageGroupsService,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  getSubPGroups(parentId) {\r\n    let groups = (this.pGroups || []).filter(g => g.parent === parentId);\r\n    if (parentId === 'ROOT') {\r\n      this.pGroups.forEach(group => {\r\n        if (group.parent !== 'ROOT' && !(this.pGroups.find(grp => grp.groupId === group.parent))) {\r\n          if (!group.deleted)\r\n            groups.push(group);\r\n        }\r\n      });\r\n    }\r\n    return groups;\r\n  }\r\n\r\n  onUpdateGroups(event) {\r\n    this.getGroups.emit(event);\r\n  }\r\n\r\n  getEmptyGroup() {\r\n    return this.pGroups.filter(a => !a.groupId);\r\n  }\r\n  validateName(groupName) {\r\n    return (groupNamePattern.test(groupName) && restrictedGroupNames.indexOf(groupName) === -1);\r\n  }\r\n\r\n  toggleAddPgroup(parentId: string) {\r\n    console.log(parentId);\r\n    console.log(this.pGroups);\r\n      if (parentId !== 'ROOT') {\r\n        const group = this.pGroups.find(g => g.groupId === parentId);\r\n        group.expanded = true;\r\n        group.hasChildren = true;\r\n      }\r\n    if (!this.pGroups.some(g => (!g?.groupId && g.parent === parentId))) {\r\n      this.pGroups = [\r\n        {\r\n          name: \"\",\r\n          parent: parentId,\r\n          type: \"physical\",\r\n          isShow: true\r\n        },\r\n        ...this.pGroups\r\n      ];\r\n      this.updateGroups.emit(this.pGroups);\r\n    } else {\r\n      this.pGroups.find(g => (!g?.groupId && g.parent === parentId)).isShow = true;\r\n    }\r\n  }\r\n\r\n  cancelAdd(groupItem: Group) {\r\n    groupItem.isShow = false;\r\n    this.pGroups = [...this.pGroups.filter(g => (g?.groupId || g.parent !==  groupItem.parent))];\r\n    if (groupItem.parent !== 'ROOT') {\r\n      if (!this.pGroups.find(g => g.parent === groupItem.parent)) {\r\n        this.pGroups.find(g => g.groupId === groupItem.parent).hasChildren = false;\r\n        this.pGroups.find(g => g.groupId === groupItem.parent).expanded = false;\r\n      }\r\n    }\r\n    this.updateGroups.emit(this.pGroups);\r\n  }\r\n\r\n  deletePGroupItem(groupItem) {\r\n    const groupId = groupItem.groupId;\r\n    if (groupId) {\r\n      this.service.remove(groupId)\r\n          .subscribe((res: any) => {\r\n            console.log(res);\r\n            if(res.status === 'OK') {\r\n              this.manager.fetchGroups();\r\n            } else {\r\n              this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n            }\r\n          }, error => {\r\n            if(error) {\r\n              this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n            }\r\n          })\r\n    } else {\r\n      this.pGroups = [...this.pGroups.filter(g => g.groupId)];\r\n      this.updateGroups.emit(this.pGroups);\r\n    }\r\n  }\r\n\r\n  alphaNumericsOnly(event: KeyboardEvent) {\r\n    let charsOnlyPattern = /^[a-zA-Z0-9-_ ]+$/;\r\n    let key = event.key;\r\n    if (charsOnlyPattern.test(key)) {\r\n      return true;\r\n    } else {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  alphaNumericsOnPaste(event) {\r\n    let regex = /^[a-zA-Z0-9-_ ]+$/;\r\n    let pasteData = event.clipboardData.getData('text');\r\n    if (!regex.test(pasteData)) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  capitalizeText(name) {\r\n    //let transform = name.toLowerCase();\r\n    return name.replace(/\\w\\S*/g, (w) => (w.replace(/^\\w/, (c) => c.toUpperCase())))\r\n  }\r\n\r\n  editSubGroup(groupItem: Group, parentId) {\r\n    this.tempName = groupItem.name;\r\n    groupItem.tempName = groupItem.name;\r\n    groupItem.isShow = true;\r\n    groupItem.parent = parentId;\r\n  }\r\n  confirmDelete(groupItem) {\r\n    const confirm = this.dialog.open(ConfirmDialogComponent, {\r\n      maxWidth: \"85vw\",\r\n      height: \"auto\",\r\n      maxHeight: \"90vh\",\r\n      data: {\r\n        body: {\r\n          title: \"manage-group-module.delete_group\",\r\n          text: \"manage-group-module.confirm_delete_group\",\r\n        },\r\n      },\r\n      disableClose: true,\r\n    });\r\n    confirm.afterClosed().subscribe((data) => {\r\n      if (data) {\r\n        this.deletePGroupItem(groupItem);\r\n      }\r\n    });\r\n  }\r\n\r\n  saveSubPGroup(obj, parentId) {\r\n    delete obj.isShow;\r\n    obj.parent = parentId;\r\n    if (!obj.groupId) {\r\n      const ob: Group = {\r\n        name: this.capitalizeText(obj.name),\r\n        parent: parentId,\r\n        type: obj.type,\r\n        facility_id: \"test\"\r\n      }\r\n      this.manager.saveGroup(ob).subscribe((r) => {\r\n        if (r?.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      const ob: Group = {\r\n        name: this.capitalizeText(obj.name),\r\n        parent: parentId,\r\n        type: obj.type,\r\n        groupId: obj.groupId,\r\n        facility_id: \"test\"\r\n      }\r\n      this.manager.updateGroup(ob).subscribe((r) => {\r\n        if (r?.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  cancelEdit(groupItem: Group) {\r\n    groupItem.name = groupItem.tempName;\r\n    groupItem.isShow = false;\r\n  }\r\n}\r\n","<!-- <div *ngIf=\"level === 1\">{{getSubPGroups(pGroupItem?.groupId) | json}}</div> -->\n<mat-card class=\"d-flex align-items-center flex-column p-0 w-100 sub-card\"\n    *ngFor=\"let subItem of getSubPGroups(pGroupItem?.groupId); let i = index;\">\n    <ng-container *ngIf=\"!subItem?.deleted\">\n        <div class=\"d-flex w-100 align-items-center\">\n\n            <div [class]=\"'level' + level\"\n                [style]=\"'margin-left: ' + level*7 + 'rem; width: calc(100% - ' + level*7 + 'rem);'\"\n                class=\"w-100 nested-group d-flex align-items-center  position-relative\">\n                <button mat-stroked-button [class]=\"'level' + level\" class=\"mx-2 add-small-button\"\n                    *ngIf=\"isCreationAllowed && i === 0 && subItem?.groupId\"\n                    (click)=\"toggleAddPgroup(pGroupItem?.groupId)\">Add\n                    Level</button>\n\n                <div class=\"p-2 m-0 my-1 w-100 manage-card input-group\">\n                    <span class=\"delete-icon\" (click)=\"cancelAdd(subItem)\"\n                        *ngIf=\"isCreationAllowed && !subItem?.groupId\">\n                        <mat-icon>close</mat-icon>\n                    </span>\n                    <span class=\"delete-icon\" (click)=\"confirmDelete(subItem)\"\n                        *ngIf=\"isCreationAllowed && subItem?.groupId && !subItem?.hasChildren\">\n                        <mat-icon>delete_outline</mat-icon>\n                    </span>\n                    <button mat-mini-fab style=\"position: absolute; right: 1rem\" class=\"btn-sml-boxed\" color=\"primary\"\n                        (click)=\"toggleAddPgroup(subItem?.groupId)\"\n                        *ngIf=\"isCreationAllowed && subItem?.groupId && (!subItem?.hasChildren || !getSubPGroups(subItem?.groupId)?.length) && level<6\">\n                        <mat-icon>add</mat-icon>\n                    </button>\n                    <h2 style=\"white-space: nowrap\" *ngIf=\"!subItem?.isShow\">\n                        {{ subItem?.name }} {{subItem?.deleted}}\n                    </h2>\n                    <div class=\"ms-3 d-flex justify-content-start align-items-center input-group\">\n                        <input *ngIf=\"subItem?.isShow\" type=\"text\" class=\"px-2 form-control edit-form-control  me-2\"\n                            [(ngModel)]=\"subItem.name\" [maxLength]=\"32\" placeholder=\"Group Name\" required=\"true\"\n                            (keypress)=\"alphaNumericsOnly($event)\" (paste)=\"alphaNumericsOnPaste($event)\"\n                            autocomplete=\"off\" />\n                        <span class=\"edit-icon\" *ngIf=\"isCreationAllowed && !subItem?.isShow\"\n                            (click)=\"editSubGroup(subItem, pGroupItem?.groupId)\">\n                            <mat-icon>edit</mat-icon>\n                        </span>\n                        <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\n                            (click)=\"cancelEdit(subItem)\" *ngIf=\"subItem?.groupId && subItem?.isShow\">\n                            <mat-icon>close</mat-icon>\n                        </button>\n                        <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\n                            (click)=\"saveSubPGroup(subItem, pGroupItem?.groupId)\"\n                            *ngIf=\"subItem?.name?.trim().length && subItem?.tempName !== subItem?.name && subItem?.isShow && validateName(subItem?.name?.toUpperCase())\">\n                            <mat-icon>check</mat-icon>\n                        </button>\n                    </div>\n                    <!--<div class=\"w-100\"></div>-->\n                    <button mat-mini-fab class=\"btn-sml-boxed expand-boxed-btn\" color=\"primary\"\n                        *ngIf=\"subItem?.hasChildren && getSubPGroups(subItem?.groupId)?.length\"\n                        (click)=\"!subItem.expanded ? keepOpen = subItem.groupId : keepOpen = null; subItem.expanded = !subItem.expanded;\">\n                        <mat-icon *ngIf=\"!subItem.expanded\">expand_more</mat-icon>\n                        <mat-icon *ngIf=\"subItem.expanded\">expand_less</mat-icon>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"d-flex w-100 align-items-center\" *ngIf=\"!!subItem?.expanded\">\n            <app-sub-group-child (updateGroups)=\"updateGroups\" class=\"w-100\" [pGroups]=\"pGroups\"\n                [isCreationAllowed]=\"isCreationAllowed\" [level]=\"level+1\" [pGroupItem]=\"subItem\"\n                (getGroups)=\"getGroups\"></app-sub-group-child>\n        </div>\n    </ng-container>\n</mat-card>\n"],"names":[],"sourceRoot":"webpack:///"}