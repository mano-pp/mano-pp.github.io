{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;UAGAA;AACA;AAAA;;AACA;AACA,oCAAkCC,oEAAlC,CAAgD,IAAhD;AACA;AACA;;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA,2EACA,kCADA,GAEA,gCAFA;AAGA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AAAA;AAAA;;AACA;AACAC;;AACA;AAAA;AAAA;AACA;AACA;;;;iBACA;AAAA;AAAA;;AACA;AACAA;;AACA;AAAA;AAAA;AACA;;;iBACA;AACA;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;UACAC;;;;;AACA;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AAPA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;AACA,6BAFA,CAGA;AACA;AACA;AACA;AACA;AACA;;AACA,yCAAqCC,uFAArC,EAA8HA,GAA9H,EAA8H;AAC9HC;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;;;QAvCAL;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;UACAM;;;;;AACA;AACA;AAAA;;AAAA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AANA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AACA;;;;iBACA;AACA;;AACA,wDAFA,CAGA;;;AACA;AACA;AACA;;;;iBACA;AAAA;;AACAC;AACA;;AACA;AACAC;AAAA;AAAA;AACA,aAFA,MAGA,IAAiB,oDAAYA,aAAZ,CAAjB,EAA6B;AAC7B;AACA;AACAA,iCAA+B,sDAAI,CAAJ,CAA/B,EAAwC,wDAAMC,OAAN,CAAxC,EACAC,SADA,CACA;AAAA,2DACAC,QADA;AAAA;;AAAA;AACA;AAAA;;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAIa,eALb;AAMA;AACA;;;;QA7CAX;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,2CAAsCY,yDAAtC,CAAoD,2BAApD;AACA;AACA;AACA;AACA;;;UACAC,+CACA;AAAA;;AACA;AACA;AACA;;AAEAA;AAAiE,6CAAoCD,gEAAyBA,2DAAzB,CAApC,EAAuFA,gEAAwBE,0BAAxB,EAAwB,CAAxB,CAAvF;AAA+G,OAAhL;;AACAD,6CAAuCD,gEAAwB;AAAGG,gCAAH;AAAGC;AAAH,OAAxB,CAAvC;;AACAH;AAAA,gBACA;AAAME,gBAAMH;AAAZ,SADA,EAEA;AAAMG,yBAAN;AAAME;AAAgCF,kBAAMH,iDAAtC;AAA4CM;AAA5C,aAAkF;AAAIH,kBAAMH;AAAV,WAAlF;AAAN,SAFA;AAAA;;AAIA;AAAe,2DAAmDA,gEAAwBC,kBAAxB,EAAwB;AAC1FE,gBAAcH,oDAD4E;AAE1FM;AACAC;AADA;AAF0F,UAAxB,EAK7D;AAAiB;AAAUJ,kBAAMH;AAAhB,aAAyC;AAAIG,2BAAJ;AAAIE;AACnEF,oBAAsBH,iDAD6C;AAEnEM;AAFmE,eAGtD;AACbH,oBAAsBH;AADT,aAHsD;AAAJ,WAAzC;AAKF,SAV8C,EAU9C,IAV8C,CAAnD;AAUe,OAV9B;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;UACAQ,sDACA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AACA;;;UACAC;AACA;AACA;AAAA;;AACA;AACA;;AAEAA;AAA2D,0CAAiCT,gEAAyBA,sDAAzB,CAAjC;AAA4E,OAAvI;;AACAS,0CAAoCT,gEAAwB;AAAGG,6BAAH;AAAGC,+CAAH;AAAGM;AAAyEC;AAAzE;AAAH,OAAxB,CAApC;;AACAF;AAAA,gBACA;AAAMN,gBAAMH;AAAZ,SADA;AAAA;;AAGA;AAAe,2DAAmDA,gEAAwBS,eAAxB,EAAwB;AAC1FN,gBAAcH,oDAD4E;AAE1FM;AACAC,wCADA;AAEAG,qBACA,0BADA;AAFA;AAF0F,UAAxB,EAQ7D;AAAiB;AAAUP,kBAAMH;AAAhB;AAAwC,SARI,EAQJ,IARI,CAAnD;AAQyD,OARxE;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;UACAY;AACA;AAAA;;AACA;AACA;AACA;;AACA,gCAA8BC,yCAA9B;AACA;;AACA,mCANA,CAOA;AACA;;AACA;AACA;AACA;AACA;;AACA,gCAA8BC,iDAA9B,CAA6C;AAAGC,oBAAH;AAAGC;AAAH,WAA7C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;eACA;AAAuB;AAAA;eACvB;AACA;AACA;AACA;AACA;;;iBACA;AACA;;AACA;AACA;AACA;AACA;;;iBACA;AACA;;AACA;;AACA;;AACA;;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;;;iBACA;AACA;AAAA;AAAA;;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA,YACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA,aAPA,CAQA;;;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;;AACA,gBAAY,wEAAY,gBAAZ,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CA;AACA;;AACA;;AACA;AACA;AACA;;;eACA;AACA;AACA;;;iBACA;AACA;;AACA,mFAAwEqB,SAAxE;AACA;;;eACA;AACA;AACA;AACA;AACA,qDACA,2CADA,GACA,yBADA;AAEA;;;iBACA;AACA;;AACA,gFAAqE,cAArE;AACA;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;iBACA;AACA;AACA;AACA;AACArB;AACA;;AACA;;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA,YACA;;;;iBACA;AACA,gGACA,6CADA,GACA;AACA;AACA;;AACA;AACA;;;;;;AAEAA;AAAqD,uCAA8BtB,gEAAyBA,qDAAzB,CAA9B,EAA2EA,gEAAwBY,QAAxB,CAA3E;AAAmG,OAAxJ;;AACAU,uCAAiCtB,gEAAwB;AAAGG,0BAAH;AAAGC,sCAAH;AAAGM;AAA6DkC;AAA7D,SAAH;AAA8EZ;AAA9E,OAAxB,CAAjC;AACA;AACA;AACA;AACA;;AACAV;;AACAA;AAAA,gBACA;AAAMnB,gBAAMH;AAAZ,SADA,EAEA;AAAMG;AAAN,SAFA;AAAA;;AAIAmB;AACAsB;AAAazC,gBAAMH;AAAnB;AADA;;AAGA;AAAe,2DAAmDA,gEAAwBsB,YAAxB,EAAwB;AAC1FnB,gBAAcH,oDAD4E;AAE1FM;AACAC,qCADA;AAEAyB;AAFA;AAF0F,UAAxB,EAM7D;AAAiB;AAAU7B,kBAAMH;AAAhB,aAAmC;AAAIG;AAAJ,WAAnC;AAA0D,SANd,EAMc;AAAIyC;AACpFzC,kBAAkBH;AADkE;AAAJ,SANd,CAAnD;AAQC,OARhB;;AASA;AACA;;AACA;AACA6C;AACA;;AACA;AACA;AACA;AACA,WAFA,MAGA;AACA;AACA;AACA,SAPA,MAQA;AACA,iBAAe,6EAAoBA,iCAApB,CAAf;AACA,SAFA,MAGA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAC;;;;;AACA;AAAA;;AAAA;;AACA;AACA,sCAFA,CA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","names":["BaseTreeControl","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__","toBeProcessed","FlatTreeControl","i","results","NestedTreeControl","descendants","childrenNodes","Boolean","subscribe","children","_angular_core__WEBPACK_IMPORTED_MODULE_4__","CdkTreeNodeOutlet","CDK_TREE_NODE_OUTLET_NODE","type","selectors","decorators","args","selector","CdkTreeNodeOutletContext","CdkTreeNodeDef","inputs","when","CdkTree","rxjs__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","start","end","dataStream","changes","viewContainer","context","container","CdkTreeNode","contentQueries","dirIndex","_t","ctx","viewQuery","hostAttrs","dataSource","treeControl","trackBy","exportAs","decls","vars","consts","template","directives","encapsulation","_nodeOutlet","_nodeDefs","host","changeDetection","_expanded","role","parent","CdkNestedTreeNode","elementRef","outlet","disabled","tabIndex","features","provide","useExisting","nodeOutlet","providers","CdkTreeNodePadding","_dir","_treeNode","level","element","value","units","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__","indent","CdkTreeNodeToggle","event","hostBindings","recursive","_toggle","CdkTreeModule","exports","declarations","_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_1__","MatTreeNode","_MatTreeNodeBase","_angular_core__WEBPACK_IMPORTED_MODULE_2__","MatTreeNodeDef","t","data","MatNestedTreeNode","node","MatTreeNodePadding","MatTreeNodeOutlet","MatTree","styles","MatTreeNodeToggle","MatTreeModule","imports","_angular_material_core__WEBPACK_IMPORTED_MODULE_0__","MAT_TREE_DIRECTIVES","MatTreeFlattener","resultNodes","childParentMap","structuredData","currentExpand","nodes","expand","MatTreeFlatDataSource","collectionViewer","pipe","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__","MatTreeNestedDataSource","routes","path","canActivate","_guards_auth_guard__WEBPACK_IMPORTED_MODULE_0__","component","_shared_root_root_component__WEBPACK_IMPORTED_MODULE_3__","_manage_groups_manage_groups_component__WEBPACK_IMPORTED_MODULE_1__","roles","_enum_roles_enum__WEBPACK_IMPORTED_MODULE_2__","ManageGroupRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_5__","ManageGroupModule","_angular_common__WEBPACK_IMPORTED_MODULE_9__","_manage_group_routing_module__WEBPACK_IMPORTED_MODULE_2__","_angular_forms__WEBPACK_IMPORTED_MODULE_10__","_shared_shared_module__WEBPACK_IMPORTED_MODULE_0__","_angular_material_card__WEBPACK_IMPORTED_MODULE_11__","_angular_material_tree__WEBPACK_IMPORTED_MODULE_12__","_angular_material_input__WEBPACK_IMPORTED_MODULE_13__","_angular_material_select__WEBPACK_IMPORTED_MODULE_14__","_angular_material_button__WEBPACK_IMPORTED_MODULE_15__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_16__","_i18n_i18n_module__WEBPACK_IMPORTED_MODULE_5__","_ngrx_store__WEBPACK_IMPORTED_MODULE_17__","_store_manage_groups_reducer__WEBPACK_IMPORTED_MODULE_3__","_ngrx_effects__WEBPACK_IMPORTED_MODULE_18__","_store_manage_groups_effects__WEBPACK_IMPORTED_MODULE_4__","_life_signals_life_signals_module__WEBPACK_IMPORTED_MODULE_6__","_angular_material_progress_spinner__WEBPACK_IMPORTED_MODULE_19__","_sub_group_child_sub_group_child_component__WEBPACK_IMPORTED_MODULE_7__","_angular_core__WEBPACK_IMPORTED_MODULE_7__","ctx_r15","pGroupItem_r6","ManageGroupsComponent","router","manager","authSevice","snackbar","dialog","getRoles","indexOf","isCreationAllowed","isAuthorisedUser","getGroups","manageGroupSubscription","_a","unsubscribe","loaderSubscription","_b","parentId","pGroups","some","g","groupId","find","expanded","hasChildren","name","isShow","groups","cGroups","obj","ob","capitalizeText","facility_id","updateGroup","r","error","openCustomSnackBar","saveGroup","groupItem","filter","tempName","console","log","removeGroup","setTimeout","confirm","open","_shared_confirm_dialog_confirm_dialog_component__WEBPACK_IMPORTED_MODULE_1__","maxWidth","height","maxHeight","body","title","text","disableClose","afterClosed","deletePGroupItem","deleteCGroupItem","navigate","manageGroups$","fetchGroups","CLINICAL_GROUPS","map","y","PHYSICAL_GROUPS","p","deleted","group","getLoadedStatus","loaded","loading","forEach","grp","push","charsOnlyPattern","key","test","preventDefault","groupName","_models_manage_groups_model__WEBPACK_IMPORTED_MODULE_0__","regex","pasteData","clipboardData","getData","replace","w","c","toUpperCase","ManageGroupsManagerService","store$","groupData","dispatch","_store__WEBPACK_IMPORTED_MODULE_0__","select","_angular_core__WEBPACK_IMPORTED_MODULE_1__","factory","providedIn","ManageGroupsEffects","manageGroupService","actions$","_manage_groups_actions__WEBPACK_IMPORTED_MODULE_0__","fetch","save","payload","update","remove","_angular_core__WEBPACK_IMPORTED_MODULE_5__","ctx_r14","subItem_r1","SubGroupChildComponent","service","emit","a","updateGroups","res","status","pGroupItem","outputs"],"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/tree.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/tree.js","webpack:///src/app/manage-group/manage-group-routing.module.ts","webpack:///src/app/manage-group/manage-group.module.ts","webpack:///src/app/manage-group/manage-groups/manage-groups.component.html","webpack:///src/app/manage-group/manage-groups/manage-groups.component.ts","webpack:///src/app/manage-group/managers/manage-groups-manager.service.ts","webpack:///src/app/manage-group/store/manage-groups.effects.ts","webpack:///src/app/manage-group/sub-group-child/sub-group-child.component.html","webpack:///src/app/manage-group/sub-group-child/sub-group-child.component.ts"],"sourcesContent":["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /** A selection model with multi-selection to track expansion status. */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode) {\n        this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n    expand(dataNode) {\n        this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode) {\n        this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(this._trackByValue(dataNode)) ?\n            this.collapseDescendants(dataNode) :\n            this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    _trackByValue(value) {\n        return this.trackBy ? this.trackBy(value) : value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nclass FlatTreeControl extends BaseTreeControl {\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(getLevel, isExpandable, options) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode) {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nclass NestedTreeControl extends BaseTreeControl {\n    /** Construct with nested tree function getChildren. */\n    constructor(getChildren, options) {\n        super();\n        this.getChildren = getChildren;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode) {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter(Boolean))\n                .subscribe(children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass CdkTreeNodeDef {\n    /** @docs-private */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nclass CdkTree {\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /** Level of nodes */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n    get dataSource() { return this._dataSource; }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlMissingError();\n        }\n    }\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this.viewChange.complete();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex);\n                this._levels.delete(item.item);\n            }\n            else {\n                const view = viewContainer.get(adjustedPreviousIndex);\n                viewContainer.move(view, currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkTreeNodeOutlet], encapsulation: 2 });\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet, { static: true }]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nclass CdkTreeNode {\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Emits when the node's data has changed. */\n        this._dataChanges = new Subject();\n        CdkTreeNode.mostRecentTreeNode = this;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.classList.add('cdk-tree-node');\n        this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n    get role() { return 'treeitem'; }\n    set role(_role) {\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.setAttribute('role', _role);\n    }\n    /** The tree node's data. */\n    get data() { return this._data; }\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    _setExpanded(_expanded) {\n        this._isAriaExpanded = _expanded;\n        this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\n    }\n    get level() {\n        // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n        // aria-level off the parent node and use it as the level for this node (note aria-level is\n        // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n        return this._tree.treeControl.getLevel ?\n            this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n    }\n    ngOnInit() {\n        this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n        this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n    }\n    ngDoCheck() {\n        // aria-expanded is be set here because the expanded state is stored in the tree control and\n        // the node isn't aware when the state is changed.\n        // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n        // TODO: move to host after View Engine deprecation\n        if (this.isExpanded != this._isAriaExpanded) {\n            this._setExpanded(this.isExpanded);\n        }\n    }\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Focuses the menu item. Implements for FocusableOption. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    // TODO: role should eventually just be set in the component host\n    _setRoleFromData() {\n        if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        this.role = 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\nfunction getParentNodeAriaLevel(nodeElement) {\n    let parent = nodeElement.parentElement;\n    while (parent && !isNodeElement(parent)) {\n        parent = parent.parentElement;\n    }\n    if (!parent) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw Error('Incorrect tree structure containing detached node.');\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (parent.classList.contains('cdk-nested-tree-node')) {\n        return coerceNumberProperty(parent.getAttribute('aria-level'));\n    }\n    else {\n        // The ancestor element is the cdk-tree itself\n        return 0;\n    }\n}\nfunction isNodeElement(element) {\n    const classList = element.classList;\n    return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    constructor(elementRef, tree, _differs) {\n        super(elementRef, tree);\n        this._differs = _differs;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n    }\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(childrenNodes);\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n    updateChildrenNodes(children) {\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Clear the children dataNodes. */\n    _clear() {\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Gets the outlet for the current node. */\n    _getNodeOutlet() {\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nclass CdkTreeNodePadding {\n    constructor(_treeNode, _tree, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._element = _element;\n        this._dir = _dir;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** CSS units used for the indentation value. */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe(() => this._setPadding());\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() { return this._level; }\n    set level(value) { this._setLevelInput(value); }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     */\n    get indent() { return this._indent; }\n    set indent(indent) { this._setIndentInput(indent); }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent() {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    _setPadding(forceChange = false) {\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            const element = this._element.nativeElement;\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            element.style[paddingProp] = padding || '';\n            element.style[resetProp] = '';\n            this._currentPadding = padding;\n        }\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setLevelInput(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null);\n        this._setPadding();\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setIndentInput(indent) {\n        let value = indent;\n        let units = 'px';\n        if (typeof indent === 'string') {\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nclass CdkTreeNodeToggle {\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n    get recursive() { return this._recursive; }\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n    _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{ selector: '[cdkTreeNodeToggle]' }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); };\nCdkTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet], exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n\n","import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeBase {\n    constructor(elementRef, tree, tabIndex) {\n        super(elementRef, tree);\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('mat-tree-node');\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeDef_BaseFactory; return function MatTreeNodeDef_Factory(t) { return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef); }; }();\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    constructor(elementRef, tree, differs, tabIndex) {\n        super(elementRef, tree, differs);\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('mat-nested-tree-node');\n    }\n    /** Whether the node is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Tabindex for the node. */\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    disabled: [{ type: Input }],\n    tabIndex: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() { return this._level; }\n    set level(value) { this._setLevelInput(value); }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() { return this._indent; }\n    set indent(indent) { this._setIndentInput(indent); }\n}\nMatTreeNodePadding.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodePadding_BaseFactory; return function MatTreeNodePadding_Factory(t) { return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding); }; }();\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet\n            }])] });\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = /*@__PURE__*/ function () { let ɵMatTree_BaseFactory; return function MatTree_Factory(t) { return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree); }; }();\nMatTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], encapsulation: 2 });\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    // The 'cdk-tree' class needs to be included here because classes set in the host in the\n                    // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n                    // to be set in the host because:\n                    // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n                    // class from it.\n                    // the ElementRef is not available in the constructor so the class can't be applied directly\n                    // without a breaking constructor change.\n                    'class': 'mat-tree cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CdkTree, useExisting: MatTree }],\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n            }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n// tslint:disable-next-line: coercion-types\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    get recursive() { return this._recursive; }\n    set recursive(value) {\n        // TODO: when we remove support for ViewEngine, change this setter to an input\n        // alias in the decorator metadata.\n        this._recursive = coerceBooleanProperty(value);\n    }\n}\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeToggle_BaseFactory; return function MatTreeNodeToggle_Factory(t) { return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle); }; }();\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); };\nMatTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CdkTreeModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, MatCommonModule],\n                exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, MatCommonModule]; }, exports: function () { return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    get data() { return this._data.value; }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() { return this._data.value; }\n    set data(value) { this._data.next(value); }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n\n","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { AuthGuard } from \"../guards/auth.guard\";\nimport { ManageGroupsComponent } from \"./manage-groups/manage-groups.component\";\nimport { UserRoles } from \"../enum/roles.enum\";\nimport { RootComponent } from \"../shared/root/root.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    canActivate: [AuthGuard],\n    component: RootComponent,\n    children: [\n      {\n        path: \"\",\n        component: ManageGroupsComponent,\n        canActivate: [AuthGuard],\n        data: {\n          roles: [\n            UserRoles.CLINICAL_FACILITY_ADMIN,\n            UserRoles.CLINICAL_FACILITY_ADMIN_CLONE,\n            UserRoles.GENERAL_CLINICIAN,\n            UserRoles.SUPERVISORY_CLINICIAN,\n            UserRoles.PHYSICIAN,\n          ],\n        },\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageGroupRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { ManageGroupsComponent } from \"./manage-groups/manage-groups.component\";\nimport { ManageGroupRoutingModule } from \"./manage-group-routing.module\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatTreeModule } from \"@angular/material/tree\";\nimport { StoreModule } from \"@ngrx/store\";\nimport * as fromManageGroups from \"./store/manage-groups.reducer\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { ManageGroupsEffects } from \"./store/manage-groups.effects\";\nimport { I18nModule } from \"../i18n/i18n.module\";\nimport { LifeSignalsModule } from \"../life-signals/life-signals.module\";\nimport { FormsModule } from \"@angular/forms\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { SubGroupChildComponent } from './sub-group-child/sub-group-child.component';\n\n@NgModule({\n  declarations: [ManageGroupsComponent, SubGroupChildComponent],\n  imports: [\n    CommonModule,\n    ManageGroupRoutingModule,\n    FormsModule,\n    SharedModule,\n    MatCardModule,\n    MatTreeModule,\n    MatInputModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatIconModule,\n    I18nModule,\n    StoreModule.forFeature(\n      fromManageGroups.manageGroupFeatureKey,\n      fromManageGroups.GroupsReducer\n    ),\n    EffectsModule.forFeature([ManageGroupsEffects]),\n    LifeSignalsModule,\n    MatProgressSpinnerModule,\n  ],\n  providers: [],\n})\nexport class ManageGroupModule {}\n","<ls-page-header type=\"manage_groups\"></ls-page-header>\r\n\r\n<div class=\"container-fuild\">\r\n    <div class=\"mat-tree-grpup\">\r\n        <div class=\"manage-group\">\r\n            <div class=\"display-flex d-flex flex-column justify-content-start align-items-start\">\r\n                <div class=\"mt-0 mb-2 label-group\">\r\n                    <label>{{ \"manage-group-module.label.location\" | translate }}</label>\r\n                </div>\r\n                <div class=\"add-items my-2\" *ngIf=\"isCreationAllowed\">\r\n                    <button mat-stroked-button class=\"small-button\" (click)=\"toggleAddPgroup('ROOT')\">\r\n                        {{ \"manage-group-module.button.add_level\" | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <mat-progress-spinner class=\"mt-3 d-flex align-self-center justify-self-center small-spinner\" color=\"accent\"\r\n                mode=\"indeterminate\" strokeWidth=\"2\" diameter=\"40\" *ngIf=\"loading\">\r\n            </mat-progress-spinner>\r\n            <div *ngIf=\"!pGroups?.length && !loading\" class=\"my-2\">\r\n                {{\"manage-group-module.no_location_groups\" | translate}}\r\n            </div>\r\n            <div class=\"group-listing\">\r\n                <ng-container *ngFor=\"let pGroupItem of getSubPGroups('ROOT'); let i = index\">\r\n                    <mat-card class=\"my-1 manage-card\">\r\n                        <span class=\"delete-icon\" (click)=\"cancelAdd(pGroupItem)\"\r\n                            *ngIf=\"isCreationAllowed && !pGroupItem?.groupId\">\r\n                            <mat-icon>close</mat-icon>\r\n                        </span>\r\n                        <span class=\"delete-icon\" (click)=\"confirmDelete(pGroupItem?.groupId, 'PHYSICAL')\"\r\n                            *ngIf=\"isCreationAllowed  && !pGroupItem?.hasChildren && pGroupItem?.groupId\">\r\n                            <mat-icon>delete_outline</mat-icon>\r\n                        </span>\r\n                        <h2 *ngIf=\"!pGroupItem?.isShow\">\r\n                            {{ pGroupItem.name }}\r\n                        </h2>\r\n                        <div class=\"nested-group d-flex align-items-center\" *ngIf=\"pGroupItem?.isShow\">\r\n                            <div class=\"ms-3 input-group\">\r\n                                <input type=\"text\" class=\"px-2 form-control edit-form-control me-2\"\r\n                                    [(ngModel)]=\"pGroupItem.name\" placeholder=\"Group Name\" [maxLength]=\"32\"\r\n                                    (keypress)=\"alphaNumericsOnly($event)\" (paste)=\"alphaNumericsOnPaste($event)\"\r\n                                    autocomplete=\"off\" />\r\n                            </div>\r\n                            <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\r\n                                (click)=\"savePGroup(pGroupItem, 'root')\"\r\n                                *ngIf=\"pGroupItem?.name?.trim().length && pGroupItem?.name !== pGroupItem?.tempName && validateName(pGroupItem?.name?.toUpperCase())\">\r\n                                <mat-icon>check</mat-icon>\r\n                            </button>\r\n                            <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\r\n                                (click)=\"cancelEdit(pGroupItem)\" *ngIf=\"pGroupItem?.groupId\">\r\n                                <mat-icon>close</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                        <span class=\"edit-icon\" *ngIf=\"isCreationAllowed && !pGroupItem?.isShow\"\r\n                            (click)=\"editSubGroup(pGroupItem, 'ROOT')\">\r\n                            <mat-icon>edit</mat-icon>\r\n                        </span>\r\n                        <button mat-mini-fab style=\"position: absolute; right: 1rem\" class=\"btn-sml-boxed\"\r\n                            color=\"primary\" (click)=\"toggleAddPgroup(pGroupItem.groupId)\"\r\n                            *ngIf=\"isCreationAllowed && pGroupItem.groupId && (!pGroupItem?.hasChildren || !getSubPGroups(pGroupItem?.groupId)?.length)\">\r\n                            <mat-icon>add</mat-icon>\r\n                        </button>\r\n                        <button mat-mini-fab class=\"btn-sml-boxed expand-boxed-btn\" color=\"primary\"\r\n                            *ngIf=\"pGroupItem?.hasChildren && getSubPGroups(pGroupItem?.groupId)?.length\"\r\n                            (click)=\"!pGroupItem.expanded ? keepOpen = pGroupItem.groupId : keepOpen = null; pGroupItem.expanded = !pGroupItem.expanded;\">\r\n                            <mat-icon *ngIf=\"!pGroupItem.expanded\">expand_more</mat-icon>\r\n                            <mat-icon *ngIf=\"pGroupItem.expanded\">expand_less</mat-icon>\r\n                        </button>\r\n                    </mat-card>\r\n\r\n                    <div class=\"manage-nested d-flex flex-column\" *ngIf=\"!!pGroupItem?.expanded\">\r\n                        <app-sub-group-child (updateGroups)=\"onUpdateGroups($event)\" class=\"w-100\" [level]=\"1\"\r\n                            [pGroups]=\"pGroups\" [isCreationAllowed]=\"isCreationAllowed\" [pGroupItem]=\"pGroupItem\"\r\n                            (getGroups)=\"onGetGroups()\"></app-sub-group-child>\r\n                    </div>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <!-- <div class=\"manage-group\">\r\n            <div class=\"display-flex d-flex flex-column justify-content-start align-items-start\">\r\n                <div class=\"d-flex align-items-center mt-4  mb-2\">\r\n                    <div class=\"label-group\">\r\n                        <label>{{\r\n                            \"manage-group-module.label.medical_condition\" | translate\r\n                            }}</label>\r\n                    </div>\r\n                    <mat-icon class=\"ms-3 opacity-50 d-flex align-items-center\">arrow_downward</mat-icon>\r\n                </div>\r\n                <div class=\"add-items my-2\" *ngIf=\"isCreationAllowed\">\r\n                    <button mat-stroked-button class=\"small-button\" (click)=\"toggleAddCgroup('ROOT')\">\r\n                        {{ \"manage-group-module.button.add_level\" | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <mat-progress-spinner class=\"mt-3 d-flex align-self-center justify-self-center small-spinner\" color=\"accent\"\r\n                mode=\"indeterminate\" strokeWidth=\"2\" diameter=\"40\" *ngIf=\"loading\">\r\n            </mat-progress-spinner>\r\n            <div *ngIf=\"!cGroups?.length && !loading\" class=\"my-2\">\r\n                {{\"manage-group-module.no_clinical_groups\" | translate}}\r\n            </div>\r\n            <div class=\"group-listing\">\r\n                <mat-card *ngFor=\"let cGroupItem of cGroups; let i = index\" class=\"my-1 manage-card\">\r\n                    <span class=\"delete-icon\" (click)=\"cancelAdd(cGroupItem)\"\r\n                        *ngIf=\"isCreationAllowed && !cGroupItem?.groupId\">\r\n                        <mat-icon>close</mat-icon>\r\n                    </span>\r\n                    <span class=\"delete-icon\" (click)=\"confirmDelete(cGroupItem?.groupId, 'CLINICAL')\"\r\n                        *ngIf=\"isCreationAllowed  && !cGroupItem?.hasChildren && cGroupItem?.groupId\">\r\n                        <mat-icon>delete_outline</mat-icon>\r\n                    </span>\r\n                    <h2 *ngIf=\"!cGroupItem?.isShow\">\r\n                        {{ cGroupItem.name }}\r\n                    </h2>\r\n                    <div class=\"nested-group d-flex align-items-center\" *ngIf=\"cGroupItem?.isShow\">\r\n                        <div class=\"ms-3 input-group\">\r\n                            <input type=\"text\" class=\"px-2 edit-form-control form-control me-2\"\r\n                                [(ngModel)]=\"cGroupItem.name\" placeholder=\"Group Name\" [maxLength]=\"32\" required=\"true\"\r\n                                (keypress)=\"alphaNumericsOnly($event)\" (paste)=\"alphaNumericsOnPaste($event)\"\r\n                                autocomplete=\"off\" />\r\n                        </div>\r\n                        <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\r\n                            (click)=\"saveCGroup(cGroupItem, 'ROOT')\"\r\n                            *ngIf=\"cGroupItem?.name?.trim().length && cGroupItem?.name !== cGroupItem?.tempName && validateName(cGroupItem?.name?.toUpperCase())\">\r\n                            <mat-icon>check</mat-icon>\r\n                        </button>\r\n                        <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\r\n                            (click)=\"cancelEdit(cGroupItem)\" *ngIf=\"cGroupItem?.groupId\">\r\n                            <mat-icon>close</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                    <span class=\"edit-icon\" *ngIf=\"isCreationAllowed && !cGroupItem?.isShow\"\r\n                        (click)=\"editGroup(cGroupItem)\">\r\n                        <mat-icon>edit</mat-icon>\r\n                    </span>\r\n                </mat-card>\r\n            </div>\r\n        </div> -->\r\n    </div>\r\n</div>","import {Component, OnDestroy, OnInit} from \"@angular/core\";\r\nimport {Router} from \"@angular/router\";\r\nimport {AuthenticationService} from \"@services/authentication.service\";\r\nimport {Observable, Subscription} from \"rxjs\";\r\nimport {map} from \"rxjs/operators\";\r\nimport {ManageGroupsManagerService} from \"../managers/manage-groups-manager.service\";\r\nimport {Group, groupNamePattern, restrictedGroupNames} from \"../models/manage-groups.model\";\r\nimport {ManageGroupState} from \"../store/manage-groups.reducer\";\r\nimport {SnackbarService} from \"@services/snackbar.service\";\r\nimport {ConfirmDialogComponent} from \"../../shared/confirm-dialog/confirm-dialog.component\";\r\nimport {MatDialog} from \"@angular/material/dialog\";\r\n\r\n\r\n@Component({\r\n  selector: \"app-manage-groups\",\r\n  templateUrl: \"./manage-groups.component.html\",\r\n  styleUrls: [\"./manage-groups.component.scss\"],\r\n})\r\nexport class ManageGroupsComponent implements OnInit, OnDestroy {\r\n  isCreationAllowed: boolean = false;\r\n  loading: boolean = true;\r\n  keepOpen: string;\r\n  tempName = null;\r\n\r\n  manageGroups$: Observable<ManageGroupState>;\r\n  manageGroupSubscription: Subscription;\r\n  loaderSubscription: Subscription;\r\n  cGroups: Group[] = [];\r\n  pGroups: Group[] = [];\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private manager: ManageGroupsManagerService,\r\n    private authSevice: AuthenticationService,\r\n    private snackbar: SnackbarService,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n  isAuthorisedUser() {\r\n    if (this.authSevice.getRoles().indexOf('CFA') > -1\r\n        || this.authSevice.getRoles().indexOf('CFAC') > -1 ) {\r\n      this.isCreationAllowed = true;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.isAuthorisedUser();\r\n    this.getGroups();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.manageGroupSubscription?.unsubscribe();\r\n    this.loaderSubscription?.unsubscribe();\r\n  }\r\n\r\n  toggleAddPgroup(parentId: string) {\r\n    if (!this.pGroups.some(g => (!g.groupId && (g.parent === parentId)))) {\r\n      if (parentId !== 'ROOT') {\r\n        this.pGroups.find(g => g.groupId === parentId).expanded = true;\r\n        this.pGroups.find(g => g.groupId === parentId).hasChildren = true;\r\n      }\r\n      this.pGroups = [\r\n        {\r\n          name: \"\",\r\n          parent: parentId,\r\n          type: \"physical\",\r\n          isShow: true\r\n        },\r\n        ...this.pGroups\r\n      ]\r\n    }\r\n  }\r\n\r\n  onUpdateGroups(groups) {\r\n    this.pGroups = [...groups];\r\n  }\r\n\r\n  toggleAddCgroup(parentId: string) {\r\n    this.cGroups = [\r\n      {\r\n        name: \"\",\r\n        parent: parentId,\r\n        type: \"clinical\",\r\n        isShow: true\r\n      },\r\n      ...this.cGroups\r\n    ]\r\n  }\r\n\r\n  savePGroup(obj, parent) {\r\n    obj.parent = parent;\r\n    const ob: Group = {\r\n      name: this.capitalizeText(obj.name),\r\n      parent: obj.parent,\r\n      type: \"physical\",\r\n      facility_id: \"test\"\r\n      // facilityId: this.pGroups[this.pGroups.length - 1].facilityId\r\n    }\r\n    if (obj.groupId) {\r\n      ob.groupId = obj.groupId;\r\n      this.manager.updateGroup(ob).subscribe((r) => {\r\n        if (r.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      this.manager.saveGroup(ob).subscribe((r) => {\r\n        if (r.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  saveCGroup(obj, parent) {\r\n    obj.parent = parent;\r\n    const ob: Group = {\r\n      name: this.capitalizeText(obj.name),\r\n      parent: \"root\",\r\n      type: \"clinical\",\r\n      facility_id: \"test\"\r\n    }\r\n    if (obj.groupId) {\r\n      ob.groupId = obj.groupId;\r\n      this.manager.updateGroup(ob);\r\n    } else {\r\n      this.manager.saveGroup(ob).subscribe((r) => {\r\n        if (r.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  cancelAdd(groupItem: Group) {\r\n    groupItem.isShow = false;\r\n    if (groupItem.type === \"PHYSICAL\") {\r\n      if (groupItem.parent !== 'ROOT') {\r\n        if (!this.pGroups.find(g => g.parent === groupItem.parent)) {\r\n          this.pGroups.find(g => g.groupId === groupItem.parent).hasChildren = false;\r\n          this.pGroups.find(g => g.groupId === groupItem.parent).expanded = false;\r\n        }\r\n      }\r\n      this.pGroups = this.pGroups.filter(g => g.groupId);\r\n    } else if (groupItem.type === \"clinical\") {\r\n      this.cGroups = this.cGroups.filter(g => g.groupId);\r\n    }\r\n  }\r\n\r\n  saveSubPGroup(obj, parentId) {\r\n    delete obj.isShow;\r\n    obj.parent = parentId;\r\n    if (!obj.groupId) {\r\n      const ob: Group = {\r\n        name: this.capitalizeText(obj.name),\r\n        parent: parentId,\r\n        type: obj.type,\r\n        groupId: null\r\n      }\r\n      this.manager.saveGroup(ob).subscribe((r) => {\r\n        if (r.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      const ob: Group = {\r\n        name: this.capitalizeText(obj.name),\r\n        parent: parentId,\r\n        type: obj.type,\r\n        groupId: obj.groupId\r\n      }\r\n      this.manager.updateGroup(ob).subscribe((r) => {\r\n        if (r.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  editGroup(groupItem: Group) {\r\n    this.tempName = groupItem.name;\r\n    groupItem.tempName = groupItem.name;\r\n    groupItem.isShow = true;\r\n  }\r\n  cancelEdit(groupItem: Group) {\r\n    groupItem.name = groupItem.tempName;\r\n    groupItem.isShow = false;\r\n  }\r\n\r\n  editSubGroup(groupItem: Group, parentId) {\r\n    this.tempName = groupItem.name;\r\n    groupItem.tempName = groupItem.name;\r\n    groupItem.isShow = true;\r\n    groupItem.parent = parentId;\r\n  }\r\n\r\n  onGetGroups() {\r\n    console.log('reload');\r\n    this.getGroups();\r\n  }\r\n\r\n  deletePGroupItem(groupId) {\r\n    if (groupId) {\r\n      this.manager.removeGroup(groupId).subscribe((r) => {\r\n        if (r.error) {\r\n          this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n        } else {\r\n          // this.pGroups = [...this.pGroups.filter(g => g.groupId !== groupId)];\r\n        }\r\n      });\r\n    } else {\r\n      this.pGroups = this.pGroups.filter(g => g.groupId);\r\n    }\r\n    setTimeout(() => {\r\n      this.getGroups();\r\n    }, 200);\r\n  }\r\n\r\n  deleteCGroupItem(groupId) {\r\n    if (groupId) {\r\n      this.manager.removeGroup(groupId).subscribe((r) => {\r\n        if (r.error) {\r\n          this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n        } else {\r\n          //this.cGroups = this.cGroups.filter(g => g.groupId !== groupId);\r\n        }\r\n      });\r\n    } else {\r\n      this.cGroups = this.cGroups.filter(g => g.groupId);\r\n    }\r\n    setTimeout(() => {\r\n      this.getGroups();\r\n    }, 200);\r\n  }\r\n  confirmDelete(groupId, type) {\r\n    const confirm = this.dialog.open(ConfirmDialogComponent, {\r\n      maxWidth: \"85vw\",\r\n      height: \"auto\",\r\n      maxHeight: \"90vh\",\r\n      data: {\r\n        body: {\r\n          title: \"manage-group-module.delete_group\",\r\n          text: \"manage-group-module.confirm_delete_group\",\r\n        },\r\n      },\r\n      disableClose: true,\r\n    });\r\n    confirm.afterClosed().subscribe((data) => {\r\n      if (data) {\r\n        if(type === 'physical') {\r\n         this.deletePGroupItem(groupId);\r\n        } else {\r\n          this.deleteCGroupItem(groupId)\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  goBackToSummary() {\r\n    this.router.navigate([\"summary\"]);\r\n  }\r\n\r\n  getGroups() {\r\n    this.manageGroups$ = this.manager.fetchGroups();\r\n    this.manageGroupSubscription = this.manageGroups$.pipe(map(x => {\r\n        const cGroups = (x?.CLINICAL_GROUPS || []).map(y => {\r\n          return {\r\n            ...y,\r\n            isShow: false\r\n          }\r\n        });\r\n        this.cGroups = cGroups.map(g => {\r\n          return {\r\n            ...g\r\n          }\r\n        });\r\n\r\n        const pGroups = (x?.PHYSICAL_GROUPS || []).map(y => {\r\n          return {\r\n            ...y,\r\n            isShow: false\r\n          }\r\n        });\r\n        this.pGroups = [...pGroups.filter(p => !p.deleted)\r\n            .map(g => {\r\n              return {\r\n                ...g,\r\n                expanded: this.pGroups.find(group => group.groupId === g.groupId)?.expanded || false,\r\n                hasChildren: !!pGroups?.find(group => group.parent === g.groupId)\r\n                \r\n              }\r\n            })];\r\n            \r\n        console.log(this.pGroups);\r\n    })).subscribe();\r\n    this.loaderSubscription = this.manager.getLoadedStatus()\r\n      .subscribe((loaded) => {\r\n        this.loading = !loaded;\r\n      });\r\n  }\r\n\r\n  getSubPGroups(parentId) {\r\n    let groups = (this.pGroups || []).filter(g => g.parent === parentId);\r\n    if (parentId === 'ROOT') {\r\n      this.pGroups.forEach(group => {\r\n        if (group.parent !== 'ROOT' && !(this.pGroups.find(grp => grp.groupId === group.parent))) {\r\n          groups.push(group);\r\n        }\r\n      });\r\n    }\r\n    return groups;\r\n  }\r\n\r\n  getSubCGroups(parentId) {\r\n    return (this.cGroups || []).filter(g => g.parent === parentId);\r\n  }\r\n\r\n  alphaNumericsOnly(event: KeyboardEvent) {\r\n    let charsOnlyPattern = /^[a-zA-Z0-9-_ ]+$/;\r\n    let key = event.key;\r\n    if (charsOnlyPattern.test(key)) {\r\n      return true;\r\n    } else {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  }\r\n  validateName(groupName) {\r\n    return (groupNamePattern.test(groupName) && restrictedGroupNames.indexOf(groupName) === -1);\r\n  }\r\n\r\n  alphaNumericsOnPaste(event) {\r\n    let regex = /^[a-zA-Z0-9-_ ]+$/;\r\n    let pasteData = event.clipboardData.getData('text');\r\n    if (!regex.test(pasteData)) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  }\r\n  capitalizeText(name) {\r\n    //let transform = name.toLowerCase();\r\n    return name.replace(/\\w\\S*/g, (w) => (w.replace(/^\\w/, (c) => c.toUpperCase())))\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\n\nimport {\n  ManageGroupsStoreActions,\n  ManageGroupsStoreSelectors,\n  ManageGroupsStoreState,\n} from \"./../store\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ManageGroupsManagerService {\n  constructor(private store$: Store<ManageGroupsStoreState.ManageGroupState>) {}\n\n  saveGroup(groupData) {\n    this.store$.dispatch(\n      new ManageGroupsStoreActions.SaveGroupRequestAction(groupData)\n    );\n    return this.store$.select(\n      ManageGroupsStoreSelectors.saveGroup\n    )\n  }\n\n  updateGroup(groupData) {\n    this.store$.dispatch(\n      new ManageGroupsStoreActions.UpdateGroupRequestAction(groupData)\n    );\n    return this.store$.select(\n        ManageGroupsStoreSelectors.saveGroup\n    )\n  }\n\n  removeGroup(groupId) {\n    this.store$.dispatch(\n      new ManageGroupsStoreActions.RemoveGroupRequestAction(groupId)\n    );\n    return this.store$.select(\n      ManageGroupsStoreSelectors.removeGroup\n    )\n  }\n\n  fetchGroups() {\n    this.store$.dispatch(\n      new ManageGroupsStoreActions.LoadGroupsRequestAction()\n    );\n    return this.store$.select(\n      ManageGroupsStoreSelectors.selectGroupsList\n    );\n  }\n  getLoadedStatus() {\n    return this.store$.select(\n        ManageGroupsStoreSelectors.groupsLoaded\n    );\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { Action } from \"@ngrx/store\";\nimport { Observable, of } from \"rxjs\";\nimport { exhaustMap, map, catchError } from \"rxjs/operators\";\nimport { ManageGroupsService } from \"../services/manage-groups.service\";\nimport * as featureActions from \"./manage-groups.actions\";\n\n@Injectable()\nexport class ManageGroupsEffects {\n  constructor(\n    private manageGroupService: ManageGroupsService,\n    private actions$: Actions\n  ) { }\n\n  loadGroups$: Observable<Action> = createEffect(() => {\n    console.log(\"calling\");\n    return this.actions$.pipe(\n      ofType<featureActions.LoadGroupsRequestAction>(\n        featureActions.ActionTypes.LOAD_GROUPS_REQUEST\n      ),\n      exhaustMap(() => {\n        return this.manageGroupService.fetch().pipe(\n          map(\n            (groups) => new featureActions.LoadGroupsSuccessAction({ groups: groups.data })\n          ),\n          catchError((error) =>\n            of(new featureActions.LoadGroupsFailureAction(error))\n          )\n        );\n      })\n    );\n  });\n\n  saveGroup$: Observable<Action> = createEffect(() => {\n    return this.actions$.pipe(\n      ofType<featureActions.SaveGroupRequestAction>(\n        featureActions.ActionTypes.SAVE_GROUP_REQUEST\n      ),\n      exhaustMap((data) => {\n        return this.manageGroupService.save(data.payload).pipe(\n          map((group) => {\n            return new featureActions.SaveGroupSuccessAction({ group })\n          }),\n          catchError((error) =>\n            of(new featureActions.SaveGroupFailureAction(error))\n          )\n        );\n      })\n    );\n  });\n\n  updateGroup$: Observable<Action> = createEffect(() => {\n    return this.actions$.pipe(\n      ofType<featureActions.UpdateGroupRequestAction>(\n        featureActions.ActionTypes.UPDATE_GROUP_REQUEST\n      ),\n      exhaustMap((data) => {\n        return this.manageGroupService.update(data.payload).pipe(\n          map((group) => {\n            return new featureActions.UpdateGroupSuccessAction({ group })\n          }),\n          catchError((error) =>\n            of(new featureActions.UpdateGroupFailureAction(error))\n          )\n        );\n      })\n    );\n  });\n\n  removeGroup$: Observable<Action> = createEffect(() => {\n    return this.actions$.pipe(\n      ofType<featureActions.RemoveGroupRequestAction>(\n        featureActions.ActionTypes.REMOVE_GROUP_REQUEST\n      ),\n      exhaustMap((data) => {\n        return this.manageGroupService.remove(data.payload).pipe(\n          map((group) => {\n            return new featureActions.RemoveGroupSuccessAction({ group })\n          }),\n          catchError((error) =>\n            of(new featureActions.RemoveGroupFailureAction(error))\n          )\n        );\n      })\n    );\n  });\n}\n","<!-- <div *ngIf=\"level === 1\">{{getSubPGroups(pGroupItem?.groupId) | json}}</div> -->\n<mat-card class=\"d-flex align-items-center flex-column p-0 w-100 sub-card\"\n    *ngFor=\"let subItem of getSubPGroups(pGroupItem?.groupId); let i = index;\">\n    <ng-container *ngIf=\"!subItem?.deleted\">\n        <div class=\"d-flex w-100 align-items-center\">\n\n            <div [class]=\"'level' + level\"\n                [style]=\"'margin-left: ' + level*7 + 'rem; width: calc(100% - ' + level*7 + 'rem);'\"\n                class=\"w-100 nested-group d-flex align-items-center  position-relative\">\n                <button mat-stroked-button [class]=\"'level' + level\" class=\"mx-2 add-small-button\"\n                    *ngIf=\"isCreationAllowed && i === 0 && subItem?.groupId\"\n                    (click)=\"toggleAddPgroup(pGroupItem?.groupId)\">Add\n                    Level</button>\n\n                <div class=\"p-2 m-0 my-1 w-100 manage-card input-group\">\n                    <span class=\"delete-icon\" (click)=\"cancelAdd(subItem)\"\n                        *ngIf=\"isCreationAllowed && !subItem?.groupId\">\n                        <mat-icon>close</mat-icon>\n                    </span>\n                    <span class=\"delete-icon\" (click)=\"confirmDelete(subItem)\"\n                        *ngIf=\"isCreationAllowed && subItem?.groupId && !subItem?.hasChildren\">\n                        <mat-icon>delete_outline</mat-icon>\n                    </span>\n                    <button mat-mini-fab style=\"position: absolute; right: 1rem\" class=\"btn-sml-boxed\" color=\"primary\"\n                        (click)=\"toggleAddPgroup(subItem?.groupId)\"\n                        *ngIf=\"isCreationAllowed && subItem?.groupId && (!subItem?.hasChildren || !getSubPGroups(subItem?.groupId)?.length) && level<6\">\n                        <mat-icon>add</mat-icon>\n                    </button>\n                    <h2 style=\"white-space: nowrap\" *ngIf=\"!subItem?.isShow\">\n                        {{ subItem?.name }} {{subItem?.deleted}}\n                    </h2>\n                    <div class=\"ms-3 d-flex justify-content-start align-items-center input-group\">\n                        <input *ngIf=\"subItem?.isShow\" type=\"text\" class=\"px-2 form-control edit-form-control  me-2\"\n                            [(ngModel)]=\"subItem.name\" [maxLength]=\"32\" placeholder=\"Group Name\" required=\"true\"\n                            (keypress)=\"alphaNumericsOnly($event)\" (paste)=\"alphaNumericsOnPaste($event)\"\n                            autocomplete=\"off\" />\n                        <span class=\"edit-icon\" *ngIf=\"isCreationAllowed && !subItem?.isShow\"\n                            (click)=\"editSubGroup(subItem, pGroupItem?.groupId)\">\n                            <mat-icon>edit</mat-icon>\n                        </span>\n                        <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\n                            (click)=\"cancelEdit(subItem)\" *ngIf=\"subItem?.groupId && subItem?.isShow\">\n                            <mat-icon>close</mat-icon>\n                        </button>\n                        <button mat-mini-fab color=\"primary\" class=\"mx-2 btn-sml-boxed btn-no-shadow primary-button\"\n                            (click)=\"saveSubPGroup(subItem, pGroupItem?.groupId)\"\n                            *ngIf=\"subItem?.name?.trim().length && subItem?.tempName !== subItem?.name && subItem?.isShow && validateName(subItem?.name?.toUpperCase())\">\n                            <mat-icon>check</mat-icon>\n                        </button>\n                    </div>\n                    <!--<div class=\"w-100\"></div>-->\n                    <button mat-mini-fab class=\"btn-sml-boxed expand-boxed-btn\" color=\"primary\"\n                        *ngIf=\"subItem?.hasChildren && getSubPGroups(subItem?.groupId)?.length\"\n                        (click)=\"!subItem.expanded ? keepOpen = subItem.groupId : keepOpen = null; subItem.expanded = !subItem.expanded;\">\n                        <mat-icon *ngIf=\"!subItem.expanded\">expand_more</mat-icon>\n                        <mat-icon *ngIf=\"subItem.expanded\">expand_less</mat-icon>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"d-flex w-100 align-items-center\" *ngIf=\"!!subItem?.expanded\">\n            <app-sub-group-child (updateGroups)=\"updateGroups\" class=\"w-100\" [pGroups]=\"pGroups\"\n                [isCreationAllowed]=\"isCreationAllowed\" [level]=\"level+1\" [pGroupItem]=\"subItem\"\n                (getGroups)=\"getGroups\"></app-sub-group-child>\n        </div>\n    </ng-container>\n</mat-card>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\r\nimport { SnackbarService } from '@services/snackbar.service';\r\nimport { ManageGroupsManagerService } from '../managers/manage-groups-manager.service';\r\nimport {Group, groupNamePattern, restrictedGroupNames} from '../models/manage-groups.model';\r\nimport {ManageGroupsService} from \"../services/manage-groups.service\";\r\nimport {error} from \"protractor\";\r\nimport {ConfirmDialogComponent} from \"../../shared/confirm-dialog/confirm-dialog.component\";\r\nimport {MatDialog} from \"@angular/material/dialog\";\r\n\r\n@Component({\r\n  selector: 'app-sub-group-child',\r\n  templateUrl: './sub-group-child.component.html',\r\n  styleUrls: ['./sub-group-child.component.scss']\r\n})\r\nexport class SubGroupChildComponent implements OnInit {\r\n  @Input() pGroups = [];\r\n  @Input() isCreationAllowed: boolean;\r\n  @Input() pGroupItem;\r\n  @Input() level: number;\r\n  keepOpen = false;\r\n  @Output() getGroups: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() updateGroups: EventEmitter<any> = new EventEmitter<any>();\r\n  tempName;\r\n  constructor(\r\n    private manager: ManageGroupsManagerService,\r\n    private snackbar: SnackbarService,\r\n    private service: ManageGroupsService,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  getSubPGroups(parentId) {\r\n    let groups = (this.pGroups || []).filter(g => g.parent === parentId);\r\n    if (parentId === 'ROOT') {\r\n      this.pGroups.forEach(group => {\r\n        if (group.parent !== 'ROOT' && !(this.pGroups.find(grp => grp.groupId === group.parent))) {\r\n          if (!group.deleted)\r\n            groups.push(group);\r\n        }\r\n      });\r\n    }\r\n    return groups;\r\n  }\r\n\r\n  onUpdateGroups(event) {\r\n    this.getGroups.emit(event);\r\n  }\r\n\r\n  getEmptyGroup() {\r\n    return this.pGroups.filter(a => !a.groupId);\r\n  }\r\n  validateName(groupName) {\r\n    return (groupNamePattern.test(groupName) && restrictedGroupNames.indexOf(groupName) === -1);\r\n  }\r\n\r\n  toggleAddPgroup(parentId: string) {\r\n    console.log(parentId);\r\n    console.log(this.pGroups);\r\n      if (parentId !== 'ROOT') {\r\n        const group = this.pGroups.find(g => g.groupId === parentId);\r\n        group.expanded = true;\r\n        group.hasChildren = true;\r\n      }\r\n    if (!this.pGroups.some(g => (!g?.groupId && g.parent === parentId))) {\r\n      this.pGroups = [\r\n        {\r\n          name: \"\",\r\n          parent: parentId,\r\n          type: \"physical\",\r\n          isShow: true\r\n        },\r\n        ...this.pGroups\r\n      ];\r\n      this.updateGroups.emit(this.pGroups);\r\n    } else {\r\n      this.pGroups.find(g => (!g?.groupId && g.parent === parentId)).isShow = true;\r\n    }\r\n  }\r\n\r\n  cancelAdd(groupItem: Group) {\r\n    groupItem.isShow = false;\r\n    this.pGroups = [...this.pGroups.filter(g => (g?.groupId || g.parent !==  groupItem.parent))];\r\n    if (groupItem.parent !== 'ROOT') {\r\n      if (!this.pGroups.find(g => g.parent === groupItem.parent)) {\r\n        this.pGroups.find(g => g.groupId === groupItem.parent).hasChildren = false;\r\n        this.pGroups.find(g => g.groupId === groupItem.parent).expanded = false;\r\n      }\r\n    }\r\n    this.updateGroups.emit(this.pGroups);\r\n  }\r\n\r\n  deletePGroupItem(groupItem) {\r\n    const groupId = groupItem.groupId;\r\n    if (groupId) {\r\n      this.service.remove(groupId)\r\n          .subscribe((res: any) => {\r\n            console.log(res);\r\n            if(res.status === 'OK') {\r\n              this.manager.fetchGroups();\r\n            } else {\r\n              this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n            }\r\n          }, error => {\r\n            if(error) {\r\n              this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n            }\r\n          })\r\n    } else {\r\n      this.pGroups = [...this.pGroups.filter(g => g.groupId)];\r\n      this.updateGroups.emit(this.pGroups);\r\n    }\r\n  }\r\n\r\n  alphaNumericsOnly(event: KeyboardEvent) {\r\n    let charsOnlyPattern = /^[a-zA-Z0-9-_ ]+$/;\r\n    let key = event.key;\r\n    if (charsOnlyPattern.test(key)) {\r\n      return true;\r\n    } else {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  alphaNumericsOnPaste(event) {\r\n    let regex = /^[a-zA-Z0-9-_ ]+$/;\r\n    let pasteData = event.clipboardData.getData('text');\r\n    if (!regex.test(pasteData)) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  capitalizeText(name) {\r\n    //let transform = name.toLowerCase();\r\n    return name.replace(/\\w\\S*/g, (w) => (w.replace(/^\\w/, (c) => c.toUpperCase())))\r\n  }\r\n\r\n  editSubGroup(groupItem: Group, parentId) {\r\n    this.tempName = groupItem.name;\r\n    groupItem.tempName = groupItem.name;\r\n    groupItem.isShow = true;\r\n    groupItem.parent = parentId;\r\n  }\r\n  confirmDelete(groupItem) {\r\n    const confirm = this.dialog.open(ConfirmDialogComponent, {\r\n      maxWidth: \"85vw\",\r\n      height: \"auto\",\r\n      maxHeight: \"90vh\",\r\n      data: {\r\n        body: {\r\n          title: \"manage-group-module.delete_group\",\r\n          text: \"manage-group-module.confirm_delete_group\",\r\n        },\r\n      },\r\n      disableClose: true,\r\n    });\r\n    confirm.afterClosed().subscribe((data) => {\r\n      if (data) {\r\n        this.deletePGroupItem(groupItem);\r\n      }\r\n    });\r\n  }\r\n\r\n  saveSubPGroup(obj, parentId) {\r\n    delete obj.isShow;\r\n    obj.parent = parentId;\r\n    if (!obj.groupId) {\r\n      const ob: Group = {\r\n        name: this.capitalizeText(obj.name),\r\n        parent: parentId,\r\n        type: obj.type,\r\n        facility_id: \"test\"\r\n      }\r\n      this.manager.saveGroup(ob).subscribe((r) => {\r\n        if (r?.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      const ob: Group = {\r\n        name: this.capitalizeText(obj.name),\r\n        parent: parentId,\r\n        type: obj.type,\r\n        groupId: obj.groupId,\r\n        facility_id: \"test\"\r\n      }\r\n      this.manager.updateGroup(ob).subscribe((r) => {\r\n        if (r?.error) {\r\n          if (r.error === 'DUPLICATE_GROUP_NAME') {\r\n            this.snackbar.openCustomSnackBar('errors.DUPLICATE_GROUP_NAME', 'bottom', 'center', true);\r\n          } else {\r\n            this.snackbar.openCustomSnackBar('errors.err_generic_message', 'bottom', 'center', true);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  cancelEdit(groupItem: Group) {\r\n    groupItem.name = groupItem.tempName;\r\n    groupItem.isShow = false;\r\n  }\r\n}\r\n"]}