{"version":3,"file":"src_app_pending-interpretation_pending-interpretation_module_ts-es2017.js","mappings":"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","sources":["./src/app/pending-interpretation/manager/pending-interpretation-manager.service.ts","./src/app/pending-interpretation/models/pending-interpretation.model.ts","./src/app/pending-interpretation/pending-interpretation-routing.module.ts","./src/app/pending-interpretation/pending-interpretation.module.ts","./src/app/pending-interpretation/pending-interpretation/pending-interpretation.component.ts","./src/app/pending-interpretation/pending-interpretation/pending-interpretation.component.html","./src/app/pending-interpretation/services/pending-interpretation.service.ts","./src/app/pending-interpretation/store/index.ts","./src/app/pending-interpretation/store/pending-interpretation.actions.ts","./src/app/pending-interpretation/store/pending-interpretation.effects.ts","./src/app/pending-interpretation/store/pending-interpretation.reducer.ts","./src/app/pending-interpretation/store/pending-interpretation.selector.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Group } from \"src/app/manage-group/models/manage-groups.model\";\r\nimport { DOCTORS } from \"../models/pending-interpretation.model\";\r\nimport {\r\n  ActivePatientsStoreState,\r\n  ActivePatientsStoreActions,\r\n  ActivePatientsStoreSelectors,\r\n} from \"../store\";\r\nimport {\r\n  ManageGroupsStoreActions,\r\n  ManageGroupsStoreSelectors,\r\n  ManageGroupsStoreState,\r\n} from \"../../manage-group/store\";\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ActivePatientManagerService {\r\n  activePatients$: Observable<ActivePatientsStoreState.State>;\r\n  unAssignedPatients$: Observable<ActivePatientsStoreState.State>;\r\n  selectedPatientIds$: Observable<String[]>;\r\n  doctors$: Observable<DOCTORS[]>;\r\n  patientIds: Array<string> = new Array();\r\n  groups$: Observable<Group[]>;\r\n\r\n  constructor(\r\n    private activePatientstore$: Store<ActivePatientsStoreState.State>,\r\n    private manageServiceStore$: Store<ManageGroupsStoreState.ManageGroupState>\r\n  ) { }\r\n\r\n  getActivePatient(url: string) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.LoadActivePatientsRequestAction({ url })\r\n    );\r\n  }\r\n\r\n  selectActivePatient(): Observable<ActivePatientsStoreState.State> {\r\n    this.activePatients$ = this.activePatientstore$.select(\r\n      ActivePatientsStoreSelectors.selectActivePatientsList\r\n    );\r\n    return this.activePatients$;\r\n  }\r\n\r\n  updatePatient(patient) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.UpdatePatientRequestAction(patient)\r\n    );\r\n    return this.selectActivePatient();\r\n  }\r\n\r\n  createPatient(patient) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.CreateNewPatientRequestAction(patient)\r\n    );\r\n    return this.activePatientstore$.select(ActivePatientsStoreSelectors.createNewPatient);\r\n  }\r\n\r\n  dischargePatient(patientId) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.DischargePatientRequestAction(patientId)\r\n    );\r\n  }\r\n\r\n  getDoctorsList(): Observable<DOCTORS[]> {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.LoadDoctorsListRequestAction()\r\n    );\r\n    this.doctors$ = this.activePatientstore$.select(\r\n      ActivePatientsStoreSelectors.doctorsList\r\n    );\r\n    return this.doctors$;\r\n  }\r\n\r\n  stopMonitoring(patientId) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.StopMonitoringRequestAction(patientId)\r\n    );\r\n  }\r\n\r\n  fetchGroups() {\r\n    this.manageServiceStore$.dispatch(\r\n      new ManageGroupsStoreActions.LoadGroupsRequestAction()\r\n    );\r\n    return this.manageServiceStore$.select(\r\n      ManageGroupsStoreSelectors.selectGroupsList\r\n    );\r\n  }\r\n\r\n  assignGroup(groups) {\r\n    // this.manageServiceStore$.dispatch(\r\n    //   new ManageGroupsStoreActions.SaveGroupRequestAction(groups)\r\n    // );\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.AssignGroupRequestAction(groups)\r\n    )\r\n\r\n    // return this.manageServiceStore$.select(\r\n    //   ManageGroupsStoreSelectors.selectGroupsList\r\n    // );\r\n    return this.activePatientstore$.select(ActivePatientsStoreSelectors.assignGroupPatient);\r\n  }\r\n\r\n  // assignGroupToPatient(patient, groups) {\r\n  //   this.assignGroup(groups).subscribe(g => {\r\n  //     if(g?.CLINICAL_GROUPS && groups.cGroup) {\r\n  //       const obj = {\r\n  //         id: g?.CLINICAL_GROUPS[0]?.groupId,\r\n  //         name: g?.CLINICAL_GROUPS[0]?.name\r\n  //       }\r\n  //       patient.cGroup = obj;\r\n  //     }else{\r\n  //       patient.cGroup = null;\r\n  //     }\r\n  //     if(g?.PHYSICAL_GROUPS && groups.pGroup) {\r\n  //       const obj = {\r\n  //         id: g?.PHYSICAL_GROUPS[0]?.groupId,\r\n  //         name: g?.PHYSICAL_GROUPS[0]?.name\r\n  //       }\r\n  //       patient.pGroup = obj;\r\n  //     }else{\r\n  //       patient.pGroup = null;\r\n  //     }  \r\n  //   });\r\n  // }\r\n\r\n  fetchUnAssignedPatientsData(url) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.LoadUnassignedPatientsRequestAction({ url })\r\n    );\r\n  }\r\n\r\n  selectUnassignedPatients() {\r\n    this.unAssignedPatients$ = this.activePatientstore$.select(\r\n      ActivePatientsStoreSelectors.selectUnassignedPatientsList\r\n    );\r\n    return this.unAssignedPatients$;\r\n  }\r\n\r\n  setSelectedTab(tab:string) {\r\n    this.activePatientstore$.dispatch(new ActivePatientsStoreActions.SetSelectedTabRequestAction(tab));\r\n  }\r\n\r\n  getSelectedTab() {\r\n    return this.activePatientstore$.select(ActivePatientsStoreSelectors.selectedTab);\r\n  }\r\n}\r\n","import { Location } from '@angular/common';\r\nimport { Group } from \"src/app/manage-group/models/manage-groups.model\";\r\n\r\nexport interface UnassignedPatient {\r\n  gender: string;\r\n  patchId : Array<string>;\r\n  biosensorStatus: string;\r\n}\r\n\r\nexport interface ActivePatient {\r\n  activePatch: string;\r\n  age: number;\r\n  phoneNo: string;\r\n  email: string;\r\n  name: string;\r\n  biosensorStatus: string;\r\n  archivalStatus: string;\r\n  cgroupId: string;\r\n  cGroup: Group;\r\n  pGroup: Group;\r\n  clinicalInfo: null;\r\n  createdDateTime: string;\r\n  deviceIds: null;\r\n  dob: string;\r\n  doctorId: string;\r\n  fk_r_doctor?:string;\r\n  fk_prescriber:string;\r\n  firstName: string;\r\n  first_name?: string;\r\n  gender: string;\r\n  height: number;\r\n  heightUnit: string;\r\n  isDischarged: boolean;\r\n  isUnassigned: boolean;\r\n  lastName: string;\r\n  last_name?: string;\r\n  patchIds: Array<PatchId>;\r\n  patientId: string;\r\n  patient_id_mrn: string;\r\n  admissionId: string;\r\n  pgroupId: string;\r\n  procedureDuration: number;\r\n  startedOn: number;\r\n  weight: number;\r\n  weightUnit: string;\r\n  estimatedDischarge: number;\r\n  prescriber_user_name?: string;\r\n  doctor_user_name:string;\r\n  prescription_id:string;\r\n  location:string;\r\n  biosensor?:Array<Biosensor>;\r\n}\r\n\r\nexport interface DOCTORS {\r\n  createdDateTime: string;\r\n  email: string;\r\n  facilityId: string;\r\n  firstName: string;\r\n  first_name?:string;\r\n  id: string;\r\n  _id?:string;\r\n  isActive: boolean;\r\n  lastName: string;\r\n  last_name?:string;\r\n  phoneNo: string;\r\n  roles: Array<string>;\r\n  serviceProviderId: string;\r\n}\r\n\r\nexport interface NewPatient {\r\n  patient_id_mrn: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  country_code:string;\r\n  mobile: string;\r\n  dob: string;\r\n  age: number;\r\n  sex: string;\r\n  weight: number;\r\n  height: number;\r\n  country:string;\r\n  zip_code:number;\r\n  street_address_1:string;\r\n  street_address_2:string;\r\n  city: string;\r\n  state:string;\r\n  em_contact_name:string;\r\n  em_contact_country_code:string;\r\n  em_contact_number:string;\r\n  fk_prescriber:string;\r\n  fk_technician:string;\r\n  fk_r_doctor:string;\r\n  pri_approver_id:string;\r\n  final_approver_id:string;\r\n  primary_indication:string;\r\n  monitoring_duration:string;\r\n  order_id:string;\r\n  pacemaker:boolean;\r\n  icd:boolean\r\n  additional_info:string;\r\n  prescription_id:string;\r\n  billing_indication:string;\r\n  billing_method:string;\r\n  location:string;\r\n  biosensor:Array<Biosensor>;\r\n  status:string;\r\n  facility_id:string;\r\n  created_by:string;\r\n\r\n  admissionId: string;\r\n  primaryContact:string;\r\n  weightUnit: string;\r\n  heightUnit: string;\r\n  doctorId: string;\r\n  cGroup: string;\r\n  pGroup: string;\r\n  patchIds: Array<PatchId>;\r\n  deviceIds: Array<ThirdPartyIds>;\r\n  createdDateTime: Date;\r\n  startedOn: number;\r\n  procedureDuration: number;\r\n  estimatedDischarge: number;\r\n  prescribingPhysician:string;\r\n  technicianName:string;\r\n  referalPhysician:string;\r\n  interpPhysician:string,\r\n  prelimInterpPhysician:string;\r\n  locationGroup:string;\r\n}\r\n\r\nexport interface eNewPatient {\r\n  patientId: string;\r\n  admissionId: string;\r\n  dob: string;\r\n  age: number;\r\n  phoneNo: string;\r\n  primaryContact:string;\r\n  email: string;\r\n  gender: string;\r\n  weight: number;\r\n  height: number;\r\n  weightUnit: string;\r\n  heightUnit: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  doctorId: string;\r\n  cGroup: string;\r\n  pGroup: string;\r\n  patchIds: Array<PatchId>;\r\n  deviceIds: Array<ThirdPartyIds>;\r\n  createdDateTime: Date;\r\n  startedOn: number;\r\n  procedureDuration: number;\r\n  estimatedDischarge: number;\r\n  country:string;\r\n  zipCode:number;\r\n  street1:string;\r\n  street2:string;\r\n  city: string;\r\n  state:string;\r\n  emergencyContactName:string;\r\n  emergencyContactNumber:string;\r\n  prescribingPhysician:string;\r\n  technicianName:string;\r\n  referalPhysician:string;\r\n  interpPhysician:string,\r\n  prelimInterpPhysician:string;\r\n  locationGroup:string;\r\n  primaryIndication:string;\r\n  monitoringDuration:string;\r\n  orderId:string;\r\n  prescriptionId:string;\r\n  additionalInfo:string;\r\n  billingIndication:string;\r\n  billingMethod:string;\r\n}\r\n\r\nexport interface Biosensor {\r\n  biosensor_id:string;\r\n  monitoring_started_on:string;\r\n  monitoring_duration:number;\r\n}\r\n\r\nexport interface AssignGroup {\r\n  patientId: string;\r\n  cGroup: Group;\r\n  pGroup: Group;\r\n}\r\n\r\nexport interface ThirdPartyIds {\r\n  deviceId: string;\r\n  deviceType: string;\r\n}\r\n\r\nexport interface PatchId {\r\n  startTime?: Boolean;\r\n  deviceId: string;\r\n}\r\n\r\nexport enum ClinicalGroup {\r\n  ONCOLOGY = \"Oncology\",\r\n}\r\n\r\nexport enum PhysicalGroup {\r\n  REMOTE = \"Remote\",\r\n  INPATIENT = \"Inpatient\",\r\n}\r\n\r\nexport enum Gender {\r\n  MALE = \"Male\",\r\n  FEMALE = \"Female\",\r\n  OTHER = \"Other\"\r\n}\r\n\r\nexport enum FilterKeysForActivePatient {\r\n  PATIENTID = \"MRN\",\r\n  PATCHID = \"Biosensor ID\",\r\n  PATIENTFIRSTNAME = \"Patient First Name\"\r\n}\r\n\r\nexport enum FilterKeysForAssignPatient {\r\n  PATCHID = \"Biosensor ID\",\r\n  // PATIENTNAME = \"PATIENTNAME\"\r\n}\r\n\r\nexport enum MonitoringStatus {\r\n  ACTIVE = \"ACTIVE\",\r\n  STOP = \"STOP\",\r\n  INPROGRESS = \"INPROGRESS\",\r\n  STREAMING = \"Streaming\",\r\n  FINALIZE_IN_PROGRESS = \"finalizeInProgress\",\r\n  FINALIZED = \"finalized\"\r\n}\r\n\r\nexport enum ActivePatientsTabs {\r\n  ASSIGN_PATIENT = \"Assign Patient\",\r\n  ACTIVE_PATIENT = \"Active Patient\",\r\n}\r\n\r\nexport interface TabMetaData {\r\n  name: string;\r\n  pageNumber: number;\r\n  url: string;\r\n  searchString: string;\r\n  sortBy: string;\r\n  size: number;\r\n}\r\n\r\nexport enum TabMetaDataItems {\r\n  PAGE_NUMBER = 'PAGENUMBER',\r\n  SIZE = 'SIZE',\r\n  SORTBY = 'SORTBY',\r\n  SEARCH_OBJECT = 'SEARCH_OBJECT'\r\n}\r\n\r\nexport interface AddToDashboard {\r\n  createdBy: string;\r\n  createdById: string;\r\n  createdDateTime: string;\r\n  facilityId: string;\r\n  panelId: string;\r\n  panelType: string;\r\n  patientIds: Array<string>\r\n  patients: Array<{}>\r\n}\r\n\r\nexport interface PatientData {\r\n  activePatient: ActivePatient;\r\n  patchId: UnassignedPatient\r\n}\r\n\r\nexport interface Patch {\r\n  deviceId: string;\r\n  deviceType: string;\r\n  endTime: number;\r\n  startTime: number\r\n}\r\n\r\nexport enum WeightUnits {\r\n  KG = \"KG\",\r\n  POUND = \"POUND\"\r\n}\r\n\r\nexport enum HeightUnits {\r\n  CM = \"CM\",\r\n  INCH = \"INCH\"\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { AuthGuard } from \"../guards/auth.guard\";\r\nimport { UserRoles } from \"../enum/roles.enum\";\r\nimport { RootComponent } from \"../shared/root/root.component\";\r\nimport { PendingInterpretationComponent } from \"./pending-interpretation/pending-interpretation.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    canActivate: [AuthGuard],\r\n    component: RootComponent,\r\n    children: [\r\n      {\r\n        path: \"pending-interpretation\",\r\n        component: PendingInterpretationComponent,\r\n        canActivate: [AuthGuard],\r\n        data: {\r\n          roles: [\r\n            UserRoles.GENERAL_CLINICIAN,\r\n            UserRoles.SUPERVISORY_CLINICIAN,\r\n            UserRoles.PHYSICIAN,\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ActivePatientsRoutingModule {}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { ActivePatientsRoutingModule } from \"./pending-interpretation-routing.module\";\r\nimport { SharedModule } from \"../shared/shared.module\";\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatSortModule } from \"@angular/material/sort\";\r\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatListModule } from \"@angular/material/list\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\r\nimport { ActivePatientsService } from \"./services/pending-interpretation.service\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport * as fromActivePatients from \"./store/pending-interpretation.reducer\";\r\nimport { ActivePatientsEffects } from \"./store/pending-interpretation.effects\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\r\nimport { MatTabsModule } from \"@angular/material/tabs\";\r\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { KeycloakBearerInterceptor } from \"keycloak-angular\";\r\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\r\nimport { MatNativeDateModule } from \"@angular/material/core\";\r\nimport { ManageGroupModule } from \"../manage-group/manage-group.module\";\r\nimport { I18nModule } from \"../i18n/i18n.module\";\r\nimport { LifeSignalsModule } from \"../life-signals/life-signals.module\";\r\nimport { EpochToHumanDatePipe } from \"../pipe/epochToHumanDate/epoch-to-human-date.pipe\";\r\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\r\nimport { MatFormFieldModule, MAT_FORM_FIELD_DEFAULT_OPTIONS } from \"@angular/material/form-field\";\r\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\r\nimport {OwlDateTimeModule} from \"ng-pick-datetime\";\r\nimport { PendingInterpretationComponent } from \"./pending-interpretation/pending-interpretation.component\";\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    // EpochToHumanDatePipe,\r\n    PendingInterpretationComponent,\r\n  ],\r\n    imports: [\r\n        CommonModule,\r\n        SharedModule,\r\n        ActivePatientsRoutingModule,\r\n        I18nModule,\r\n        MatSelectModule,\r\n        MatDatepickerModule,\r\n        MatInputModule,\r\n        MatNativeDateModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        MatButtonModule,\r\n        MatSortModule,\r\n        MatCheckboxModule,\r\n        MatCardModule,\r\n        MatListModule,\r\n        MatDialogModule,\r\n        MatTooltipModule,\r\n        MatTabsModule,\r\n        MatPaginatorModule,\r\n        ManageGroupModule,\r\n        ReactiveFormsModule,\r\n        MatAutocompleteModule,\r\n        StoreModule.forFeature(\r\n            fromActivePatients.patientsFeatureKey,\r\n            fromActivePatients.ActivePatientsReducer\r\n        ),\r\n        EffectsModule.forFeature([ActivePatientsEffects]),\r\n        LifeSignalsModule,\r\n        FormsModule,\r\n        MatFormFieldModule,\r\n        MatProgressBarModule,\r\n        MatProgressSpinnerModule,\r\n        MatTooltipModule,\r\n        OwlDateTimeModule\r\n    ],\r\n  providers: [\r\n    {\r\n      provide: ActivePatientsService,\r\n      useClass: ActivePatientsService,\r\n    },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: KeycloakBearerInterceptor,\r\n      multi: true,\r\n    },\r\n    { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: 'fill', floatLabel: 'never' } },\r\n  ],\r\n})\r\nexport class ActivePatientsModule {}\r\n","import {\r\n  Component, OnDestroy,\r\n  OnInit,\r\n} from \"@angular/core\";\r\nimport {\r\n  ActivePatient,\r\n  FilterKeysForActivePatient,\r\n  MonitoringStatus,\r\n} from \"../models/pending-interpretation.model\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { ActivePatientManagerService } from \"../manager/pending-interpretation-manager.service\";\r\nimport {\r\n  LSColumn,\r\n  LSTableConfig,\r\n  TableState,\r\n} from \"src/app/life-signals/_models/ls-column.model\";\r\nimport { SelectionModel } from \"@angular/cdk/collections\";\r\nimport { ActivePatientsService } from \"../services/pending-interpretation.service\";\r\nimport { Subject, Subscription } from \"rxjs\";\r\nimport { debounceTime, distinctUntilChanged, map, switchMap } from \"rxjs/operators\";\r\nimport { PageEvent } from \"@angular/material/paginator\";\r\nimport { ActivePatientsStoreState } from \"../store\";\r\nimport { Sort } from \"@angular/material/sort\";\r\nimport { AuthenticationService } from \"@services/authentication.service\";\r\nimport { SnackbarService } from \"@services/snackbar.service\";\r\nimport { ActivatedRoute, ParamMap } from \"@angular/router\";\r\nimport {Group} from \"../../manage-group/models/manage-groups.model\";\r\nimport {ManageGroupsService} from \"../../manage-group/services/manage-groups.service\";\r\nimport {BehaviorSubject} from \"rxjs/internal/BehaviorSubject\";\r\nimport {Observable} from \"rxjs/internal/Observable\";\r\nimport { NotificationsComponent } from \"src/app/dialogs/notifications-component/notifications/notifications.component\";\r\nimport { AddEventComponent } from \"src/app/dialogs/notifications-component/add-event/add-event.component\";\r\n\r\n@Component({\r\n  selector: \"app-pending-interpretation\",\r\n  templateUrl: \"./pending-interpretation.component.html\",\r\n  styleUrls: [\"./pending-interpretation.component.scss\"],\r\n})\r\nexport class PendingInterpretationComponent implements OnInit, OnDestroy {\r\n  activePatients: ActivePatient[] = new Array();\r\n  error: any;\r\n  reloadInterval: NodeJS.Timeout;\r\n\r\n  // Selection Variables\r\n  selectedPatients: SelectionModel<ActivePatient> = new SelectionModel<ActivePatient>(true);\r\n  selectedIds: Set<string> = new Set();\r\n  isPhy = false;\r\n\r\n  activePatient_Columns: LSColumn[] = [\r\n    \r\n    {\r\n      id: \"patient_id\",\r\n      label: \"PATIENT DETAILS\",\r\n      headerClass: [\"text-start\"],\r\n      sortable: true,\r\n      labelClass: \"fw-bold\",\r\n      cellClass: [],\r\n    },\r\n    {\r\n      id: \"prescribing_physician\",\r\n      label: \"prescribing physician\",\r\n      sortable: true,\r\n      headerClass: [\"text-start\"],\r\n      cellClass: [\"d-flex\", \"justify-content-start\", \"align-items-center\"],\r\n    },\r\n    {\r\n      id: \"location\",\r\n      label: \"Location\",\r\n      headerClass: [\"text-start\"],\r\n      sortable: true,\r\n      cellClass: [],\r\n    },\r\n    {\r\n      id: \"report_time\",\r\n      label: \"report time\",\r\n      sortable: true,\r\n      headerClass: [\"text-start\"],\r\n      cellClass: [\"d-flex\", \"justify-content-start\"],\r\n    },\r\n    {\r\n      id: \"interpreter\",\r\n      label: \"interpreter\",\r\n      sortable: true,\r\n      headerClass: [\"text-start\"],\r\n      cellClass: [\"d-flex\", \"justify-content-start\"],\r\n    },\r\n    {\r\n      id: \"prelim_interpreter\",\r\n      label: \"preliminary interpreter\",\r\n      sortable: true,\r\n      cellClass: [\"d-flex\", \"justify-content-start\"],\r\n      headerClass: [\"text-start\"],\r\n    },\r\n    {\r\n      id: \"report_type\",\r\n      label: \"report type\",\r\n      sortable: true,\r\n      cellClass: [\"d-flex\", \"justify-content-start\"],\r\n      headerClass: [\"text-start\"],\r\n    },\r\n    {\r\n      id: \"view\",\r\n      label: \"view\",\r\n      sortable: true,\r\n      cellClass: [\"d-flex\", \"justify-content-start\"],\r\n      headerClass: [\"text-start\"],\r\n    },\r\n    \r\n  ];\r\n\r\n  config: LSTableConfig = {\r\n    id: \"active-patients-table\",\r\n    rowSelectEnabled: true,\r\n    actions: {\r\n      show: true,\r\n      headerLabel: \"\",\r\n      class: [\"d-flex\", \"align-items-center\", \"justify-content-end\"],\r\n      header: {\r\n        style: \"max-width: 180px; width: 180px;\",\r\n      },\r\n    },\r\n    page: {\r\n      pageSize: 20,\r\n      pageIndex: 0,\r\n      length: null\r\n    },\r\n    paginator: {\r\n      offline: false,\r\n      hide: false\r\n    },\r\n    sort: {\r\n      active: \"first_name\",\r\n      direction: \"asc\"\r\n    },\r\n    tableState: TableState.DEFAULT\r\n  };\r\n  searchObject: { keyword: string; string: string } = {\r\n    keyword: \"\",\r\n    string: \"\",\r\n  };\r\n  filterObject: { cGroupId: string; pGroupId: string } = {\r\n    cGroupId: null,\r\n    pGroupId: null,\r\n  };\r\n  filterStrings: Array<any> = new Array();\r\n  monitoringStatus = MonitoringStatus;\r\n  private groupsData$: BehaviorSubject<Group[]> = new BehaviorSubject<any[]>([]);\r\n  public groups$: Observable<Group[]>;\r\n  public locationGroups$: Observable<Group[]>;\r\n  public clinicalGroups$: Observable<Group[]>;\r\n \r\n  constructor(\r\n    private manager: ActivePatientManagerService,\r\n    private dialog: MatDialog,\r\n    private service: ActivePatientsService,\r\n    private authService: AuthenticationService,\r\n    private snackbar: SnackbarService,\r\n    private route: ActivatedRoute,\r\n    private manageGroupService: ManageGroupsService\r\n  ) {\r\n    this.groups$ = this.groupsData$.asObservable();\r\n    this.locationGroups$ = this.groups$.pipe(map((groups: Group[]) => {\r\n      return groups.filter(g => g.type === \"physical\")\r\n    }));\r\n    this.clinicalGroups$ = this.groups$.pipe(map((groups: Group[]) => {\r\n      return groups.filter(g => g.type === \"CLINICAL\")\r\n    }));\r\n  }\r\n\r\n  modelChanged: Subject<string> = new Subject<string>();\r\n  activePatientsSub: Subscription;\r\n\r\n  ngOnInit() {\r\n     this.getDoctors();\r\n    let roles = this.authService.getRoles() || [];;\r\n    if(roles?.indexOf(\"PHY\") > -1) this.isPhy =true;\r\n    this.getGroupDetails();\r\n    this.modelChanged.pipe(\r\n      debounceTime(500),\r\n      distinctUntilChanged(),\r\n      switchMap(() =>\r\n        this.serviceToCallWith()))\r\n      .subscribe();\r\n    this.initVariables();\r\n    this.fetchTableData();\r\n    const panelId = sessionStorage.getItem(\"panelId\");\r\n    if (panelId?.length) {\r\n      this.service.getPanelDetails(panelId)\r\n        .then((patients) => {\r\n          for (const patient of patients) {\r\n            if (patient.patchId) {\r\n              this.selectedIds.add(patient.patientId);\r\n            }\r\n          }\r\n          if (this.activePatients.length && this.selectedIds.size) {\r\n            this.selectedPatients.select(...this.activePatients.filter(pat => {\r\n              return this.selectedIds.has(pat.patientId);\r\n            }));\r\n          }\r\n        });\r\n    }\r\n\r\n    this.reloadInterval = setInterval(() => {\r\n      this.fetchTableData();\r\n    }, 30000);\r\n\r\n    this.activePatientsSub = this.manager.selectActivePatient()\r\n      .pipe(map((response: ActivePatientsStoreState.State) => {\r\n        if(response?.tableState) {\r\n          this.config = {\r\n            ...this.config,\r\n            tableState: <TableState>response?.tableState,\r\n            rowSelectEnabled: true,\r\n            page: {\r\n              ...this.config.page,\r\n              length: response?.total\r\n            }\r\n          };\r\n        }\r\n        this.error = response?.error;\r\n        if (response?.ACTIVE_PATIENTS_DATA) {\r\n          this.activePatients = response?.ACTIVE_PATIENTS_DATA.map((x) => {\r\n            const patient: ActivePatient = {\r\n              ...x,\r\n              name: `${x.first_name} ${x.last_name}`,\r\n            };\r\n            return patient;\r\n          });\r\n          if (this.activePatients.length && this.selectedIds.size) {\r\n            this.selectedPatients.select(...this.activePatients.filter(pat => {\r\n              return this.selectedIds.has(pat.patientId);\r\n            }));\r\n          }\r\n        }\r\n      }))\r\n      .subscribe();\r\n  }\r\n\r\n  doctorsList = [];\r\n  doctorsListSub: Subscription;\r\n\r\n  getDoctors() {\r\n    this.doctorsListSub = this.manager.getDoctorsList().subscribe((list) => {\r\n      let persons = (list as any).items; \r\n      this.doctorsList = persons?.map(doctor => {\r\n        return {\r\n          ...doctor,\r\n          displayName: `${doctor?.first_name} ${doctor?.last_name}`\r\n        }\r\n      });\r\n    });\r\n    }\r\n\r\n  serviceToCallWith() {\r\n    let ref;\r\n    this.manager.getActivePatient(this.service.actvePatientsUrl(this.config, this.searchObject, this.filterObject));\r\n    ref = this.manager.selectActivePatient();\r\n    return ref;\r\n  }\r\n  resetAndSearch() {\r\n    this.searchObject.string = '';\r\n    this.search();\r\n  }\r\n\r\n  search() {\r\n    this.searchObject.keyword = 'searchText';\r\n    if (this.searchObject?.string) {\r\n      this.config.page.pageIndex = 0;\r\n    }\r\n    //this.selectedPatients.clear();\r\n    this.modelChanged.next(JSON.stringify(this.searchObject));\r\n  }\r\n  searchByGroup(key, groupId) {\r\n    if(key === 'CLINICAL') {\r\n      this.filterObject.cGroupId = groupId;\r\n    } else if(key === 'physical'){\r\n      this.filterObject.pGroupId = groupId\r\n    }\r\n      this.config.page.pageIndex = 0;\r\n      this.activePatients = undefined;\r\n      this.modelChanged.next(JSON.stringify(this.filterObject));\r\n  }\r\n\r\n  clear() {\r\n    this.searchObject.string = '';\r\n    this.search();\r\n  }\r\n\r\n  checkCharacters(event : KeyboardEvent){\r\n    if(this.searchObject.keyword === \"PATCHID\" || this.searchObject.keyword === \"PATIENTID\"){\r\n      let pattern = /^[a-zA-z0-9]$/;\r\n      let key = event.key;\r\n      if (pattern.test(key)) {\r\n        return true;\r\n      } else {\r\n        event.preventDefault();\r\n        return false;\r\n      }\r\n    }else{\r\n      return true;\r\n    }\r\n  }\r\n\r\n  initVariables() {\r\n    for (let i in FilterKeysForActivePatient) {\r\n      this.filterStrings.push({ text: FilterKeysForActivePatient[i], value: i });\r\n    }\r\n  }\r\n\r\n  fetchTableData() {\r\n    this.getActivePatientData();\r\n  }\r\n  isSelected(row: ActivePatient, selection: SelectionModel<any>) {\r\n    return selection.selected.map(s => s.patientId).includes(row.patientId);\r\n  }\r\n\r\n  isClinicianCheck() {\r\n    let role = this.authService.getRoles();\r\n    return role.indexOf(\"GC\") > -1;\r\n  }\r\n\r\n  isGcorScCheck () {\r\n    let role = this.authService.getRoles();\r\n    return role.indexOf(\"GC\") > -1 || role.indexOf(\"SC\") > -1;\r\n  }\r\n\r\n  getActivePatientData() {\r\n    if (!this.config.sort.active || !this.config.sort.direction) {\r\n      this.config.sort.active = \"patientid\";\r\n      this.config.sort.direction = \"desc\";\r\n    }\r\n    this.manager.getActivePatient(this.service.actvePatientsUrl(this.config, this.searchObject, this.filterObject));\r\n  }\r\n\r\n  onPageChange(event: PageEvent) {\r\n    this.config = {\r\n      ...this.config,\r\n      page: {\r\n        ...this.config.page,\r\n        pageIndex: event.pageIndex,\r\n        pageSize: event.pageSize\r\n      }\r\n    }\r\n    this.fetchTableData();\r\n  }\r\n\r\n  onPatientsSelected(e: SelectionModel<ActivePatient>) {\r\n    this.selectedPatients = e;\r\n    const selected = new Set(e.selected.map((pat) => pat.patientId));\r\n    for (const { patientId } of this.activePatients) {\r\n      if (selected.has(patientId)) {\r\n        this.selectedIds.add(patientId);\r\n      } else if (this.selectedIds.has(patientId)) {\r\n        this.selectedIds.delete(patientId);\r\n      }\r\n    }\r\n  }\r\n\r\n  onSortChange(event: Sort) {\r\n    let activeKey = (event.active === 'patient_id') ? 'first_name' :\r\n                    (event.active === 'prescribing_physician') ? 'prescriber_user_name' : \r\n                    (event.active === 'location') ? 'location':\r\n                    (event.active === 'report_time') ? 'report_time':\r\n                    (event.active === 'interpreter') ? 'final_approver_id':\r\n                    (event.active === 'prelim_interpreter') ? 'pri_approver_id': \r\n                    (event.active === 'report_type') ? 'report_type': \"\";\r\n    this.config = {\r\n      ...this.config,\r\n      sort: {\r\n        active: activeKey,\r\n        direction: event.direction\r\n      }\r\n    }\r\n    this.selectedPatients.clear();\r\n    this.fetchTableData();\r\n  }\r\n\r\n  //This function is used to open add event dialog \r\n  addNewEvent(patient:any) {\r\n    console.log(patient?.patientId)\r\n    console.log(patient?.patchIds[0]?.startTime)\r\n    const addEvent = this.dialog.open(AddEventComponent, {\r\n      width: \"600px\",\r\n      maxWidth: \"96vw\",\r\n      height: \"100%\",\r\n      maxHeight:\"100vh\",\r\n      panelClass: \"add-event-container\",\r\n      //maxHeight: \"95vh\",\r\n      //height: \"530px\",\r\n       data: {patientId: patient?.patientId, patchStarted:patient?.patchIds[0]?.startTime },\r\n      disableClose: true,\r\n    });\r\n  }\r\n\r\n  alertSettings(selectedPatient:ActivePatient) {\r\n    const dailogRef = this.dialog.open(NotificationsComponent, {\r\n      //adding same width as history popup\r\n      width: \"1300px\",\r\n      maxWidth: \"98%\",\r\n      height: \"100%\",\r\n      maxHeight:\"100vh\",\r\n      panelClass:[\"alertcontainer-modal\", \"alertcontainer\" ],\r\n      //height: \"530px\",\r\n      //panelClass: \"alertcontainer\",\r\n      data: { patientData: { ...selectedPatient, addEvent: false }, selectedTab: 'parameterAlerts' },\r\n      disableClose: true,\r\n    });\r\n  }\r\n\r\n  //  /**This function is used to open Discharge Patient dialog */\r\n\r\n  getThirdPartyDevices(list) {\r\n    if (list?.length > 0) {\r\n      let deviceIds = \"\";\r\n      list.forEach((element) => {\r\n        if (element?.deviceId) {\r\n          deviceIds = deviceIds\r\n            ? deviceIds + \", \" + element.deviceId\r\n            : element.deviceId;\r\n        }\r\n      });\r\n      if (deviceIds !== \"\") {\r\n        return deviceIds;\r\n      } else {\r\n        return \"-\";\r\n      }\r\n    } else {\r\n      return \"-\";\r\n    }\r\n  }\r\n\r\n  // /**This function is used to open dialog */\r\n\r\n  getGroupDetails() {\r\n    this.manageGroupService.fetch().subscribe(groups => {\r\n      if (groups['data'].length > 0) {\r\n        this.groupsData$.next(groups['data']);\r\n\r\n      }\r\n    })\r\n  }\r\n  isScOrGc() {\r\n    let role = this.authService.getRoles();\r\n    return (role.indexOf(\"GC\") > -1 || role.indexOf(\"SC\") > -1)\r\n  }\r\n  ngOnDestroy() {\r\n    clearInterval(this.reloadInterval);\r\n    this.activePatientsSub?.unsubscribe();\r\n  }\r\n}\r\n","<ls-page-header type=\"pending-interp\">\r\n    <ng-container page-actions>\r\n        <div class=\"d-flex justify-content-end me-4\">\r\n            <div class=\"d-lg-flex d-md-none d-sm-none d-none my-2\">\r\n                <button mat-flat-button color=\"blue\" class=\"mx-1\"\r\n                    [disabled]=\"selectedPatients?.selected?.length !== 0\"\r\n                     *ngIf=\"isClinicianCheck()\">\r\n                    {{ \"pending-interp-module.button.assign_prelim_interp\" | translate }}\r\n                </button>\r\n            </div>\r\n            <div class=\"d-lg-flex d-md-none d-sm-none d-none my-2\">\r\n                <button mat-flat-button color=\"blue\" class=\"mx-1\"\r\n                    [disabled]=\"selectedPatients?.selected?.length !== 0\"\r\n                     *ngIf=\"isClinicianCheck()\">\r\n                    {{ \"pending-interp-module.button.assign_interp\" | translate }}\r\n                </button>\r\n            </div>\r\n            <div class=\"d-block d-lg-none my-2 \">\r\n                <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"border\">\r\n                    <mat-icon class=\"justify-content-enter\">more_vert</mat-icon>\r\n                </button>\r\n                <mat-menu #menu=\"matMenu\" class=\"mobile-menu overflow-hidden d-block d-lg-none\">\r\n                    <button mat-menu-item \r\n                        [disabled]=\"selectedPatients?.selected?.length !== 0\" *ngIf=\"isGcorScCheck()\">\r\n                        {{ \"active-patients-module.button.admit_patient\" | translate }}\r\n                    </button>\r\n                </mat-menu>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</ls-page-header>\r\n<div class=\"px-3\">\r\n    <div class=\"table-scroll without-tab-table comman-table-users head-border\">\r\n        <ls-table (sortChange)=\"onSortChange($event)\" [config]=\"config\" [selection]=\"selectedPatients\"\r\n            [data]=\"activePatients\" [columns]=\"activePatient_Columns\" (page)=\"onPageChange($event)\" [error]=\"error\"\r\n            [isSelected]=\"isSelected\" [Id]=\"'patientId'\" (selected)=\"onPatientsSelected($event)\"\r\n            [selectOnlyActive]=\"true\">\r\n            <!--            <ng-container table-header>-->\r\n            <!--                <div class=\"my-3 row\">-->\r\n            <!--                    <div class=\"col-6 col-sm-16 col-md-16 col-lg-6 col-xl-5 col-xxl-4\">-->\r\n            <!--                        <mat-form-field class=\"selectfilter no-label me-4\" appearance=\"fill\">-->\r\n            <!--                            <mat-label>{{ \"active-patients-module.select_filter\" | translate }}-->\r\n            <!--                            </mat-label>-->\r\n            <!--                            <mat-select [(ngModel)]=\"searchObject.keyword\" class=\"search-filter-select\" (selectionChange)=\"resetAndSearch()\">-->\r\n            <!--                                <mat-option [value]=\"null\">{{\"active-patients-module.select_filter\"|translate}}</mat-option>-->\r\n            <!--                                <mat-option [value]=\"filter?.value\" *ngFor=\"let filter of filterStrings\">{{ filter?.text }}-->\r\n            <!--                                </mat-option>-->\r\n            <!--                            </mat-select>-->\r\n            <!--                        </mat-form-field>-->\r\n            <!--                    </div>-->\r\n\r\n            <!--                    <div class=\"col-6 col-sm-16 col-md-16 col-lg-6 col-xl-5 col-xxl-4\">-->\r\n            <!--                        <mat-form-field class=\"search-form-field\" appearance=\"fill\">-->\r\n            <!--                            <mat-label>{{ \"active-patients-module.search\" | translate }}-->\r\n            <!--                            </mat-label>-->\r\n            <!--                            <input [class.disabled]=\"!searchObject.keyword\" [disabled]=\"!searchObject.keyword\" autocomplete=\"off\" [(ngModel)]=\"searchObject.string\" matInput type=\"text\" (ngModelChange)=\"search()\" id=\"searchString\" (keypress)=\"checkCharacters($event)\" />-->\r\n            <!--                            <mat-icon class=\"clear-icon\" *ngIf=\"searchObject.string\" (click)=\"clear()\">close-->\r\n            <!--                            </mat-icon>-->\r\n            <!--                            <mat-icon matSuffix class=\"default-cursor\">search</mat-icon>-->\r\n            <!--                        </mat-form-field>-->\r\n            <!--                    </div>-->\r\n            <!--                </div>-->\r\n            <!--            </ng-container>-->\r\n            <ng-container table-header>\r\n                <div class=\"my-3 row align-items-end position-relative ps-0 ps-lg-5\">\r\n                    <label class=\"mat-label filter-label d-lg-flex d-none  align-items-center\">{{\r\n                        \"pending-interp-module.filter\" | translate }}</label>\r\n                    <div class=\"col-sm-12 col-md-12 col-lg-9 col-xl-10 col-xxl-10 select-col discharge-select-dropdown\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.pGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.location' | translate\"\r\n                                    (selected)=\"searchByGroup('LOCATION', $event)\" [options]=\"locationGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <!-- <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.cGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.prescriber' | translate\"\r\n                                    (selected)=\"searchByGroup('CLINICAL', $event)\" [options]=\"clinicalGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown> -->\r\n                                <mat-label class=\"toplabel d-block pb-0 pb-md-1 ps-0 ps-lg-2 pt-2 pt-sm-0\">{{'active-patients-module.prescriber' | translate}}</mat-label>\r\n                                    <select class=\"w100 nested-select d-flex flex-row align-items-center justify-content-between\" (change)=\"searchByGroup('DOCTOR',$event)\">\r\n                                        <option value=\"\" class=\"select-value\">All</option>\r\n                                        <option *ngFor=\"let doc of doctorsList\" [value]=\"doc['id']\" class=\"select-value\" >{{doc['displayName']}}</option>\r\n                                    </select>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.cGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.approver' | translate\"\r\n                                    (selected)=\"searchByGroup('CLINICAL', $event)\" [options]=\"clinicalGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.cGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.prelim_interp' | translate\"\r\n                                    (selected)=\"searchByGroup('CLINICAL', $event)\" [options]=\"clinicalGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.cGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.report_gen_date' | translate\"\r\n                                    (selected)=\"searchByGroup('CLINICAL', $event)\" [options]=\"clinicalGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.cGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.status' | translate\"\r\n                                    (selected)=\"searchByGroup('CLINICAL', $event)\" [options]=\"clinicalGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-2 mt-lg-0\">\r\n                        <mat-form-field class=\"search-form-field\" appearance=\"fill\" floatLabel=\"never\">\r\n                            <mat-label>{{ \"pending-interp-module.search\" | translate }}\r\n                            </mat-label>\r\n                            <input [(ngModel)]=\"searchObject.string\" matInput type=\"search\" (keyup)=\"search()\"\r\n                                id=\"searchString\" autocomplete=\"off\" />\r\n                            <mat-icon class=\"clear-icon\" *ngIf=\"searchObject.string\" (click)=\"clear()\">close\r\n                            </mat-icon>\r\n                            <mat-icon matSuffix class=\"default-cursor\">search</mat-icon>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n\r\n            <ng-template lsWidgetName=\"patient_id\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div class=\"me-2\">{{row?.patient_id_mrn}}</div>                    \r\n                </div>\r\n                <div class=\"d-flex justify-content-start align-items-center bold-text\">\r\n                  <strong>  <div class=\"me-2\">{{ row?.name }}</div>   </strong>                 \r\n                </div>\r\n            </ng-template>  \r\n\r\n            <ng-template lsWidgetName=\"prescribing_physician\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div *ngFor=\"let doc of doctorsList\" class=\"me-2\">\r\n                        <div *ngIf=\"doc['_id']===row?.fk_prescriber\">\r\n                            {{ doc['displayName'] }}\r\n                        </div>\r\n                    </div>                 \r\n                </div>\r\n            </ng-template> \r\n\r\n            <ng-template lsWidgetName=\"location\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div class=\"me-2\">{{ row?.location }}</div>                   \r\n                </div>\r\n            </ng-template> \r\n\r\n            <ng-template lsWidgetName=\"report_time\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div class=\"me-2\">{{row?.report_time}}</div>                    \r\n                </div>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div class=\"me-2\">time</div>                    \r\n                </div>\r\n            </ng-template> \r\n\r\n            <ng-template lsWidgetName=\"interpreter\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div  class=\"me-2\">{{ row?.final_approver_id }}</div>                    \r\n                </div>\r\n          </ng-template> \r\n\r\n          <ng-template lsWidgetName=\"prelim_interpreter\" let-row>\r\n            <a type=\"button\">\r\n                <img src=\"assets/icons/plus.png\">\r\n            </a>\r\n        </ng-template>\r\n\r\n            <ng-template lsWidgetName=\"report_type\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div class=\"me-2\">{{ row?.name }}</div>                    \r\n                </div>\r\n            </ng-template>  \r\n\r\n            <ng-template lsWidgetName=\"view\" let-row>\r\n                <a type=\"button\">\r\n                    <img src=\"assets/icons/pdf.png\">\r\n                </a>\r\n            </ng-template>\r\n\r\n            <ng-template lsWidgetName=\"actions\" let-row>\r\n                <!-- Pause Notification -->\r\n                <!-- <button mat-mini-fab color=\"primary\" class=\"btn-boxed boxed-height btn-no-shadow  me-2\">  <img alt=\"Push Notification\" src=\"assets/icons/pause-notification.svg\"  /></button> -->\r\n                <!-- <button mat-mini-fab color=\"primary\" class=\"btn-boxed boxed-height btn-no-shadow  me-2\">  <img alt=\"Push Notification\" src=\"assets/icons/pause-notification-disable.svg\"  /></button> -->                          \r\n                <div>\r\n                    <a>\r\n                        {{ \"pending-interp-module.alerts.p\" | translate }}\r\n                    </a>\r\n                    <a class=\"move\"> \r\n                        <img src=\"assets/icons/review.png\">\r\n                    </a>\r\n                \r\n                    <button mat-flat-button color=\"primary\" class=\"btn-no-shadow mx-auto me-2\" *ngIf=\"isClinicianCheck() || isPhy\"   (click)=\"addNewEvent(row)\">\r\n                        {{ \"pending-interp-module.button.interpret\" | translate }}\r\n                    </button>\r\n                </div>\r\n                <button mat-icon-button [matMenuTriggerFor]=\"patientMenu\" class=\"shadow-none\">\r\n                    <mat-icon class=\"justify-content-center\">more_vert</mat-icon>\r\n                </button>\r\n                <mat-menu #patientMenu=\"matMenu\" class=\"setting-card-menu profile-card-menu\" xPosition=\"before\">\r\n                    <button mat-menu-item *ngIf=\"isClinicianCheck()\" >{{ \"active-patients-module.button.redo_prelim\" | translate}}</button>\r\n                    <button mat-menu-item *ngIf=\"isScOrGc()\" >{{ \"active-patients-module.button.redo_report\" | translate}}</button>\r\n                </mat-menu>\r\n            </ng-template>\r\n\r\n        </ls-table>\r\n    </div>\r\n</div>","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, of, throwError } from \"rxjs\";\r\nimport { catchError, map } from \"rxjs/operators\";\r\nimport { LSTableConfig } from \"src/app/life-signals/_models/ls-column.model\";\r\nimport { Group } from \"src/app/manage-group/models/manage-groups.model\";\r\nimport { ManageGroupsService } from \"src/app/manage-group/services/manage-groups.service\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport {\r\n  ActivePatient,\r\n  DOCTORS,\r\n  NewPatient,\r\n  UnassignedPatient,\r\n} from \"../models/pending-interpretation.model\";\r\nimport { BackendApiService } from \"@services/backendapi.service\";\r\nimport { Patient } from \"src/app/shared/shared.interface\";\r\nimport { env } from \"process\";\r\n\r\n@Injectable()\r\nexport class ActivePatientsService {\r\n  BASE_URL: string = environment.dataApiUrl;\r\n  URL:string=environment.dataApiUrl2;\r\n  http: HttpClient\r\n  constructor(\r\n    private manageGroupService: ManageGroupsService,\r\n    private backendApiService: BackendApiService) {\r\n    this.http = backendApiService.httpClient;\r\n  }\r\n  getAll(url) {\r\n    if (url) {\r\n      let base_url = (environment.integ) ? environment.dataApiUrl2 : environment.dataApiUrl;\r\n      //let iurl = (environment.integ) ? 'current_patient' : url; \r\n      let iurl = url;\r\n      let apiURL = `${base_url}${iurl}`;\r\n      return this.http\r\n        .get<ActivePatient[]>(apiURL)\r\n        .pipe(catchError(this.handleError));\r\n    } else {\r\n      return of(null);\r\n    }\r\n  }\r\n\r\n  savePatient(data) {\r\n    // let url = this.BASE_URL + \"patients/\";\r\n    let url = this.BASE_URL + \"patient_register/\";\r\n    return this.http\r\n      .post<NewPatient>(url, data.payload)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  updatePatient(obj) {\r\n    let url = this.BASE_URL + \"patients/\";\r\n    return this.http\r\n      .put<{ data: NewPatient }>(url, obj.payload)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n  getAutogeneratedPatientId() {\r\n    let url = this.BASE_URL + 'patients/generate-id';\r\n    return this.http.post(url, '').pipe(catchError(this.handleError));\r\n  }\r\n\r\n  stopProcedure(patientId) {\r\n    let url = this.BASE_URL + `patients/${patientId}/stop-procedure`;\r\n    return this.http\r\n      .post<NewPatient>(url, \"\")\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  dischargePatient(patientId) {\r\n    patientId = encodeURIComponent(patientId);\r\n    let url = this.BASE_URL + `patients/${patientId}/discharge`;\r\n    return this.http\r\n      .post<NewPatient>(url, \"\")\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getDoctorsList() {\r\n    // let url = this.BASE_URL + \"clinical-facilities/physicians?size=2000\";\r\n    let url = this.URL+`drop_down_user/CFPI8P?role=prescriber`;\r\n    return this.http.get<DOCTORS[]>(url).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getDoctorBy(id) {\r\n    let url = this.BASE_URL + \"clinical-facilities/physicians?Id=\" + id;\r\n    return this.http.get<any>(url).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  handleError(error: any) {\r\n    if (error.errorMessage) {\r\n      return throwError(error.errorMessage);\r\n    } else {\r\n      return throwError(`Error: ${error}`);\r\n    }\r\n  }\r\n\r\n  setSelectedPatientIds(ids: string[]) {\r\n    return of(ids);\r\n  }\r\n\r\n  setSelectedTab(tab: string) {\r\n    return of(tab);\r\n  }\r\n\r\n  getUnassignedPatients(url) {\r\n    if (url) {\r\n      let apiURL = `${this.BASE_URL}${url}`;\r\n      return this.http\r\n        .get<UnassignedPatient[]>(apiURL)\r\n        .pipe(catchError(this.handleError));\r\n    } else {\r\n      return of(undefined);\r\n    }\r\n  }\r\n\r\n  getPatientBy(id) {\r\n    id = encodeURIComponent(id);\r\n    let apiURL = `${this.BASE_URL}patients/${id}`;\r\n    return this.http\r\n      .get<{ data: ActivePatient }>(apiURL)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  private cGroup$: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\r\n  groups$: Observable<any[]> = this.cGroup$.asObservable();\r\n\r\n  getCGroups(): Observable<Group[]> {\r\n    if (this.cGroup$.getValue()) {\r\n      return this.cGroup$.asObservable();\r\n    } else {\r\n      return this.manageGroupService.fetch()\r\n        .pipe(map(groups => {\r\n          if (groups['data']?.length > 0) {\r\n            this.cGroup$.next(groups['data']);\r\n          }\r\n          return groups['data'] || [];\r\n        }));\r\n    }\r\n  }\r\n\r\n  unassignedPatientsUrl(config: LSTableConfig, searchObject) {\r\n    return `patches/unassigned?&page=${config.page.pageIndex + 1}&size=${config.page.pageSize}&${searchObject?.keyword?.toLowerCase()}=${searchObject?.string}`;\r\n  }\r\n\r\n  actvePatientsUrl(config: LSTableConfig, searchObject, filterObject) {\r\n    let searchString = encodeURIComponent(searchObject.string)\r\n    // let url = `patients/?sortBy=${config.sort.active}:${config.sort.direction}&isDischarged=false&page=${config.page.pageIndex + 1}&size=${config.page.pageSize}`;\r\n    // let url = `current_patient/?offset=${config.page.pageIndex+1}&limit=${config.page.pageSize}`;\r\n    // let url = `pending_interpretation?page=1&order=asc&limit=10`;\r\n    let url = `pending_interpretation/?page=${config.page.pageIndex + 1}&limit=${config.page.pageSize}&sort=${config.sort.active}&order=${config.sort.direction}`;\r\n    // let url = \"patient_details\"\r\n    if (searchObject?.keyword && searchString) {\r\n      url = url + `&${searchObject?.keyword?.toLowerCase()}=${searchString}`;\r\n    }\r\n    if (filterObject?.cGroupId) {\r\n      url = url + `&cGroupId=${filterObject?.cGroupId}`;\r\n    }\r\n    if (filterObject?.pGroupId) {\r\n      url = url + `&pGroupId=${filterObject?.pGroupId}`;\r\n    }\r\n    if(filterObject?.doctor)\r\n    {\r\n      url = url + `&fk_prescriber=647889e02bec4eb7b2120a2b`;\r\n    }\r\n    return url;\r\n  }\r\n \r\n  getClinicalGroups(location: string) {\r\n    return this.groups$.pipe(map((groups: any[]) => {\r\n      return groups.filter(g => g.type === location);\r\n    }));\r\n  }\r\n\r\n  assignGroup(ob) {\r\n    let url = this.BASE_URL + \"patients/assign-group\";\r\n    return this.http.post<Group>(url, ob.payload).pipe(catchError(this.handleError));\r\n  }\r\n  getPanelDetails(panelId: string): Promise<Array<Patient>> {\r\n    return new Promise((resolve, reject) => {\r\n      const apiUrl = this.BASE_URL + 'dashboard/panels/';\r\n      this.backendApiService.getMapping(apiUrl + panelId)\r\n        .then(response => {\r\n          const data = response?.data?.patients;\r\n          if (data) {\r\n            const patientsArr = data.map((patient) => ({\r\n              patchId: patient?.patchId,\r\n              patientId: patient?.patientId,\r\n              doctorId: patient?.doctorId,\r\n              firstName: patient?.firstName,\r\n              lastName: patient?.lastName,\r\n              age: patient?.age,\r\n              cGroup: patient?.cGroup,\r\n              pGroup: patient?.pGroup,\r\n              sex: patient?.gender,\r\n              created: new Date(patient?.stTime * 1000)\r\n            }));\r\n            resolve(patientsArr);\r\n          }\r\n        }).catch(reject);\r\n    });\r\n  }\r\n  generateAdmissionId() {\r\n    let url = this.BASE_URL + \"patients/admissions/generate-id\";\r\n    return this.http.post(url, \"\").pipe(catchError(this.handleError));\r\n  }\r\n  searchPatient(id) {\r\n    id = encodeURIComponent(id);\r\n    let apiURL = this.BASE_URL + `patients/details/search?page=1&size=5&sortBy=PatientID:desc&PatientID=${id}`;\r\n    return this.http\r\n      .get(apiURL)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n  stopMonitoringUnassigned(patchIds) {\r\n    let url = this.BASE_URL + `patches/stop-procedure/bulk`;\r\n    let body = {\r\n      \"patchIdList\": patchIds\r\n    }\r\n    return this.http\r\n      .post<NewPatient>(url, body)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n  deletePatch(patchId) {\r\n    let url = this.BASE_URL + `patches/unassigned/${patchId}`;\r\n    return this.http.delete<any>(url).pipe(catchError(this.handleError));\r\n  }\r\n  transferRelay(patchId) {\r\n    let url = this.BASE_URL + `patients/relay-transfer/${patchId}`;\r\n    return this.http\r\n      .post<NewPatient>(url, {})\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n}\r\n\r\n\r\n","import * as ActivePatientsStoreActions from \"./pending-interpretation.actions\";\r\nimport * as ActivePatientsStoreSelectors from \"./pending-interpretation.selector\";\r\nimport * as ActivePatientsStoreState from \"./pending-interpretation.reducer\";\r\n\r\nexport {\r\n  ActivePatientsStoreActions,\r\n  ActivePatientsStoreSelectors,\r\n  ActivePatientsStoreState,\r\n};\r\n","import { Action } from \"@ngrx/store\";\r\nimport {\r\n  ActivePatient,\r\n  AssignGroup,\r\n  DOCTORS,\r\n  NewPatient,\r\n  UnassignedPatient,\r\n} from \"../models/pending-interpretation.model\";\r\n\r\nexport enum ActionTypes {\r\n  LOAD_ACTIVE_PATIENTS_REQUEST = \"[ACTIVEPATIENTS] Load active patients request\",\r\n  LOAD_ACTIVE_PATIENTS_FAILURE = \"[ACTIVEPATIENTS] Load active patients Failure\",\r\n  LOAD_ACTIVE_PATIENTS_SUCCESS = \"[ACTIVEPATIENTS] Load active patients Success\",\r\n\r\n  LOAD_UNASSIGNED_PATIENTS_REQUEST = \"[UNASSIGNEDPATIENTS] Load unassigned patients request\",\r\n  LOAD_UNASSIGNED_PATIENTS_FAILURE = \"[UNASSIGNEDPATIENTS] Load unassigned patients Failure\",\r\n  LOAD_UNASSIGNED_PATIENTS_SUCCESS = \"[UNASSIGNEDPATIENTS] Load unassigned patients Success\",\r\n\r\n  LOAD_DOCTORS_LIST_REQUEST = \"[DOCTORS] Load doctors list request\",\r\n  LOAD_DOCTORS_LIST_FAILURE = \"[DOCTORS] Load doctors list Failure\",\r\n  LOAD_DOCTORS_LIST_SUCCESS = \"[DOCTORS] Load doctors list Success\",\r\n\r\n  CREATE_NEW_PATIENT_REQUEST = \"[ACTIVEPATIENTS] Create new patient request\",\r\n  CREATE_NEW_PATIENT_FAILURE = \"[ACTIVEPATIENTS] Create new patient Failure\",\r\n  CREATE_NEW_PATIENT_SUCCESS = \"[ACTIVEPATIENTS] Create new patient Success\",\r\n\r\n  UPDATE_PATIENT_REQUEST = \"[ACTIVEPATIENTS] Update patient request\",\r\n  UPDATE_PATIENT_FAILURE = \"[ACTIVEPATIENTS] Update patient Failure\",\r\n  UPDATE_PATIENT_SUCCESS = \"[ACTIVEPATIENTS] Update patient Success\",\r\n\r\n  ASSIGN_GROUP_REQUEST = \"[ASSIGNGROUP] assign group request\",\r\n  ASSIGN_GROUP_FAILURE = \"[ASSIGNGROUP] assign group Failure\",\r\n  ASSIGN_GROUP_SUCCESS = \"[ASSIGNGROUP] assign group Success\",\r\n\r\n  DISCHARGE_PATIENT_REQUEST = \"[ACTIVEPATIENTS] DISCHARGE patient request\",\r\n  DISCHARGE_PATIENT_FAILURE = \"[ACTIVEPATIENTS] DISCHARGE patient Failure\",\r\n  DISCHARGE_PATIENT_SUCCESS = \"[ACTIVEPATIENTS] DISCHARGE patient Success\",\r\n\r\n  STOP_MONITORING_REQUEST = \"[ACTIVEPATIENTS] Stop Monitoring patient request\",\r\n  STOP_MONITORING_FAILURE = \"[ACTIVEPATIENTS] Stop Monitoring patient Failure\",\r\n  STOP_MONITORING_SUCCESS = \"[ACTIVEPATIENTS] Stop Monitoring patient Success\",\r\n\r\n  SET_SELECTED_PATIENTS_IDs_REQUEST = \"[ACTIVEPATIENTS] Set selected patient ids request\",\r\n  SET_SELECTED_PATIENTS_IDs_FAILURE = \"[ACTIVEPATIENTS] Set selected patient ids Failure\",\r\n  SET_SELECTED_PATIENTS_IDs_SUCCESS = \"[ACTIVEPATIENTS] Set selected patient ids Success\",\r\n\r\n  SET_SELECTED_TAB_REQUEST = \"[TableTab] Set selected patient ids request\",\r\n  SET_SELECTED_TAB_FAILURE = \"[TableTab] Set selected patient ids Failure\",\r\n  SET_SELECTED_TAB_SUCCESS = \"[TableTab] Set selected patient ids Success\",\r\n}\r\n\r\nexport class LoadActivePatientsRequestAction implements Action {\r\n  readonly type = ActionTypes.LOAD_ACTIVE_PATIENTS_REQUEST;\r\n  constructor(public payload: { url: string }) {}\r\n}\r\n\r\nexport class LoadActivePatientsFailureAction implements Action {\r\n  readonly type = ActionTypes.LOAD_ACTIVE_PATIENTS_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class LoadActivePatientsSuccessAction implements Action {\r\n  readonly type = ActionTypes.LOAD_ACTIVE_PATIENTS_SUCCESS;\r\n  constructor(\r\n    public payload: { data: { patients: ActivePatient[]; total: number } }\r\n  ) {}\r\n}\r\n\r\nexport class LoadUnassignedPatientsRequestAction implements Action {\r\n  readonly type = ActionTypes.LOAD_UNASSIGNED_PATIENTS_REQUEST;\r\n  constructor(public payload: { url: string }) {}\r\n}\r\n\r\nexport class LoadUnassignedPatientsFailureAction implements Action {\r\n  readonly type = ActionTypes.LOAD_UNASSIGNED_PATIENTS_FAILURE;\r\n  constructor(public payload: { error: any }) {}\r\n}\r\n\r\nexport class LoadUnassignedPatientsSuccessAction implements Action {\r\n  readonly type = ActionTypes.LOAD_UNASSIGNED_PATIENTS_SUCCESS;\r\n  constructor(\r\n    public payload: { data:{ items : UnassignedPatient[]; total: number } }\r\n  ) {}\r\n}\r\n\r\nexport class LoadDoctorsListRequestAction implements Action {\r\n  readonly type = ActionTypes.LOAD_DOCTORS_LIST_REQUEST;\r\n}\r\n\r\nexport class LoadDoctorsListFailureAction implements Action {\r\n  readonly type = ActionTypes.LOAD_DOCTORS_LIST_FAILURE;\r\n  constructor(public payload: { error: any }) {}\r\n}\r\n\r\nexport class LoadDoctorsListSuccessAction implements Action {\r\n  readonly type = ActionTypes.LOAD_DOCTORS_LIST_SUCCESS;\r\n  constructor(public payload: { doctors: DOCTORS[] }) {}\r\n}\r\n\r\nexport class CreateNewPatientRequestAction implements Action {\r\n  readonly type = ActionTypes.CREATE_NEW_PATIENT_REQUEST;\r\n  constructor(public payload: NewPatient) {}\r\n}\r\n\r\nexport class CreateNewPatientFailureAction implements Action {\r\n  readonly type = ActionTypes.CREATE_NEW_PATIENT_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class CreateNewPatientSuccessAction implements Action {\r\n  readonly type = ActionTypes.CREATE_NEW_PATIENT_SUCCESS;\r\n  constructor(public payload: { newPatient: NewPatient }) {}\r\n}\r\n\r\nexport class UpdatePatientRequestAction implements Action {\r\n  readonly type = ActionTypes.UPDATE_PATIENT_REQUEST;\r\n  constructor(public payload: NewPatient) {}\r\n}\r\n\r\nexport class UpdatePatientFailureAction implements Action {\r\n  readonly type = ActionTypes.UPDATE_PATIENT_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class UpdatePatientSuccessAction implements Action {\r\n  readonly type = ActionTypes.UPDATE_PATIENT_SUCCESS;\r\n  constructor(public payload: { updatedData: NewPatient }) {}\r\n}\r\n\r\nexport class AssignGroupRequestAction implements Action {\r\n  readonly type = ActionTypes.ASSIGN_GROUP_REQUEST;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AssignGroupFailureAction implements Action {\r\n  readonly type = ActionTypes.ASSIGN_GROUP_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class AssignGroupSuccessAction implements Action {\r\n  readonly type = ActionTypes.ASSIGN_GROUP_SUCCESS;\r\n  constructor(public payload: { updatedData: any }) {}\r\n}\r\n\r\nexport class DischargePatientRequestAction implements Action {\r\n  readonly type = ActionTypes.DISCHARGE_PATIENT_REQUEST;\r\n  constructor(public payload: NewPatient) {}\r\n}\r\n\r\nexport class DischargePatientFailureAction implements Action {\r\n  readonly type = ActionTypes.DISCHARGE_PATIENT_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class DischargePatientSuccessAction implements Action {\r\n  readonly type = ActionTypes.DISCHARGE_PATIENT_SUCCESS;\r\n  constructor(public payload: { dischargedPatient: NewPatient }) {}\r\n}\r\n\r\nexport class StopMonitoringRequestAction implements Action {\r\n  readonly type = ActionTypes.STOP_MONITORING_REQUEST;\r\n  constructor(public payload: NewPatient) {}\r\n}\r\n\r\nexport class StopMonitoringFailureAction implements Action {\r\n  readonly type = ActionTypes.STOP_MONITORING_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class StopMonitoringSuccessAction implements Action {\r\n  readonly type = ActionTypes.STOP_MONITORING_SUCCESS;\r\n  constructor(public payload: { patient: NewPatient }) {}\r\n}\r\n\r\nexport class SetSelectedPatientIdsRequestAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_PATIENTS_IDs_REQUEST;\r\n  constructor(public payload: string[]) {}\r\n}\r\n\r\nexport class SetSelectedPatientIdsFailureAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_PATIENTS_IDs_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class SetSelectedPatientIdsSuccessAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_PATIENTS_IDs_SUCCESS;\r\n  constructor(public payload: { patientIds: string[] }) {}\r\n}\r\n\r\nexport class SetSelectedTabRequestAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_TAB_REQUEST;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class SetSelectedTabFailureAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_TAB_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class SetSelectedTabSuccessAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_TAB_SUCCESS;\r\n  constructor(public payload: { selectedTab: string }) {}\r\n}\r\n\r\nexport type ActivePatientsActions =\r\n  | LoadActivePatientsFailureAction\r\n  | LoadActivePatientsRequestAction\r\n  | LoadActivePatientsSuccessAction\r\n  | LoadDoctorsListFailureAction\r\n  | LoadDoctorsListRequestAction\r\n  | LoadDoctorsListSuccessAction\r\n  | CreateNewPatientFailureAction\r\n  | CreateNewPatientRequestAction\r\n  | CreateNewPatientSuccessAction\r\n  | UpdatePatientRequestAction\r\n  | UpdatePatientFailureAction\r\n  | UpdatePatientSuccessAction\r\n  | DischargePatientRequestAction\r\n  | DischargePatientFailureAction\r\n  | DischargePatientSuccessAction\r\n  | StopMonitoringFailureAction\r\n  | StopMonitoringRequestAction\r\n  | StopMonitoringSuccessAction\r\n  | SetSelectedPatientIdsFailureAction\r\n  | SetSelectedPatientIdsRequestAction\r\n  | SetSelectedPatientIdsSuccessAction\r\n  | LoadUnassignedPatientsRequestAction\r\n  | LoadUnassignedPatientsFailureAction\r\n  | LoadUnassignedPatientsSuccessAction\r\n  | SetSelectedTabRequestAction\r\n  | SetSelectedTabFailureAction\r\n  | SetSelectedTabSuccessAction\r\n  | AssignGroupFailureAction\r\n  | AssignGroupRequestAction\r\n  | AssignGroupSuccessAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Observable, of as observableOf, of } from \"rxjs\";\r\nimport { catchError, map, startWith, mergeMap, switchMap } from \"rxjs/operators\";\r\nimport { ActivePatientsService } from \"../services/pending-interpretation.service\";\r\nimport * as featureActions from \"./pending-interpretation.actions\";\r\n\r\n@Injectable()\r\nexport class ActivePatientsEffects {\r\n  constructor(\r\n    private activePatientsService: ActivePatientsService,\r\n    private actions$: Actions\r\n  ) { }\r\n\r\n  loadActivePatientsRequestEffect$: Observable<Action> = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.LoadActivePatientsRequestAction>(\r\n        featureActions.ActionTypes.LOAD_ACTIVE_PATIENTS_REQUEST\r\n      ),\r\n      mergeMap((action) =>\r\n        this.activePatientsService.getAll(action.payload.url).pipe(\r\n          map(\r\n            (response: any) =>\r\n              new featureActions.LoadActivePatientsSuccessAction({\r\n                data: {\r\n                  patients: response?.data?.items,\r\n                  total: response?.data?.total,\r\n                },\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.LoadActivePatientsFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadUnAssignedPatientsRequestEffect$: Observable<Action> = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.LoadUnassignedPatientsRequestAction>(\r\n        featureActions.ActionTypes.LOAD_UNASSIGNED_PATIENTS_REQUEST\r\n      ),\r\n      mergeMap((action) =>\r\n        this.activePatientsService.getUnassignedPatients(action.payload.url).pipe(\r\n          map(\r\n            (response: any) => new featureActions.LoadUnassignedPatientsSuccessAction({\r\n              data: {\r\n                items: response?.data?.items,\r\n                total: response?.data?.total,\r\n              },\r\n            })),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.LoadUnassignedPatientsFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadDoctorsRequestEffect$: Observable<Action> = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.LoadDoctorsListRequestAction>(\r\n        featureActions.ActionTypes.LOAD_DOCTORS_LIST_REQUEST\r\n      ),\r\n      startWith(new featureActions.LoadDoctorsListRequestAction()),\r\n      mergeMap((action) =>\r\n        this.activePatientsService.getDoctorsList().pipe(\r\n          map(\r\n            (doctors) =>\r\n              new featureActions.LoadDoctorsListSuccessAction({ doctors })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.LoadDoctorsListFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  createNewPatientEffects$: Observable<Action> = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.CreateNewPatientRequestAction>(\r\n        featureActions.ActionTypes.CREATE_NEW_PATIENT_REQUEST\r\n      ),\r\n      // startWith(new featureActions.createNewPatientRequestAction()),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.savePatient(data)\r\n          .pipe(\r\n            map(\r\n              (newPatient) =>\r\n                new featureActions.CreateNewPatientSuccessAction({ newPatient })\r\n            ),\r\n            catchError((error) =>\r\n              observableOf(\r\n                new featureActions.CreateNewPatientFailureAction({ error })\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  updatePatientEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.UpdatePatientRequestAction>(\r\n        featureActions.ActionTypes.UPDATE_PATIENT_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.updatePatient(data).pipe(\r\n          map(\r\n            (response) =>\r\n              new featureActions.UpdatePatientSuccessAction({ updatedData: response.data })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.UpdatePatientFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  updatePatientGroupEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.AssignGroupRequestAction>(\r\n        featureActions.ActionTypes.ASSIGN_GROUP_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.assignGroup(data).pipe(\r\n          map(\r\n            (response) =>\r\n              new featureActions.AssignGroupSuccessAction({ updatedData: response })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.AssignGroupFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  stopMonitoringEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.StopMonitoringRequestAction>(\r\n        featureActions.ActionTypes.STOP_MONITORING_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.stopProcedure(data.payload).pipe(\r\n          map(\r\n            (patient) =>\r\n              new featureActions.StopMonitoringSuccessAction({ patient })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.StopMonitoringFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  dischargePatientEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.DischargePatientRequestAction>(\r\n        featureActions.ActionTypes.DISCHARGE_PATIENT_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.dischargePatient(data.payload).pipe(\r\n          map(\r\n            (dischargedPatient) =>\r\n              new featureActions.DischargePatientSuccessAction({\r\n                dischargedPatient,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.DischargePatientFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  setSelectedPatientIdsEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.SetSelectedPatientIdsRequestAction>(\r\n        featureActions.ActionTypes.SET_SELECTED_PATIENTS_IDs_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.setSelectedPatientIds(data.payload).pipe(\r\n          map(\r\n            (patientIds) =>\r\n              new featureActions.SetSelectedPatientIdsSuccessAction({\r\n                patientIds,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.SetSelectedPatientIdsFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  setSelectedtabEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.SetSelectedTabRequestAction>(\r\n        featureActions.ActionTypes.SET_SELECTED_TAB_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.setSelectedTab(data.payload).pipe(\r\n          map(\r\n            (selectedTab) =>\r\n              new featureActions.SetSelectedTabSuccessAction({\r\n                selectedTab,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.SetSelectedTabFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n","import { TableState } from \"src/app/life-signals/_models/ls-column.model\";\r\nimport {\r\n  ActivePatient,\r\n  NewPatient,\r\n  DOCTORS,\r\n  UnassignedPatient,\r\n  ActivePatientsTabs,\r\n} from \"../models/pending-interpretation.model\";\r\nimport { ActivePatientsActions, ActionTypes } from \"./pending-interpretation.actions\";\r\n\r\nexport interface State {\r\n  ACTIVE_PATIENTS_DATA?: ActivePatient[];\r\n  UNASSIGNED_PATIENTS_DATA?: UnassignedPatient[];\r\n  PATIENT?: NewPatient;\r\n  DOCTORS?: DOCTORS[];\r\n  error?: any;\r\n  PATIENT_IDS?: string[];\r\n  SELECTED_TAB?: string;\r\n  tableState?: string;\r\n  addEditState?: string;\r\n  total?: number;\r\n  unassignedPatients_total ?: number;\r\n}\r\n\r\nconst initialActivePatientState: State = {\r\n  ACTIVE_PATIENTS_DATA: [],\r\n  UNASSIGNED_PATIENTS_DATA: [],\r\n  PATIENT: null,\r\n  DOCTORS: [],\r\n  error: \"\",\r\n  PATIENT_IDS: null,\r\n  SELECTED_TAB: ActivePatientsTabs.ACTIVE_PATIENT,\r\n  tableState: TableState.DEFAULT,\r\n  addEditState: TableState.DEFAULT,\r\n  total: 0,\r\n  unassignedPatients_total:0\r\n};\r\n\r\nexport const patientsFeatureKey = \"patient\";\r\n\r\nexport function ActivePatientsReducer(\r\n  state: State = initialActivePatientState,\r\n  action: ActivePatientsActions\r\n) {\r\n  switch (action.type) {\r\n    case ActionTypes.LOAD_ACTIVE_PATIENTS_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_ACTIVE_PATIENTS_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        //ACTIVE_PATIENTS_DATA: [],\r\n        tableState: TableState.FAILURE,\r\n        total: 0\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_ACTIVE_PATIENTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        ACTIVE_PATIENTS_DATA: action.payload[\"data\"].patients,\r\n        tableState: TableState.SUCCESS,\r\n        total: action.payload[\"data\"].total\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_UNASSIGNED_PATIENTS_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_UNASSIGNED_PATIENTS_FAILURE: {\r\n      return {\r\n        ...state,\r\n        tableState: TableState.FAILURE,\r\n        UNASSIGNED_PATIENTS_DATA: [],\r\n        error: action.payload.error,\r\n        unassignedPatients_total: 0\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_UNASSIGNED_PATIENTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        UNASSIGNED_PATIENTS_DATA: action.payload[\"data\"].items,\r\n        tableState: TableState.SUCCESS,\r\n        unassignedPatients_total: action.payload[\"data\"].total,\r\n        error: null\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_DOCTORS_LIST_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        //tableState: TableState.LOADING,\r\n        DOCTORS: []\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_DOCTORS_LIST_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_DOCTORS_LIST_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        DOCTORS: action.payload[\"doctors\"][\"data\"],\r\n      };\r\n    }\r\n\r\n    case ActionTypes.CREATE_NEW_PATIENT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        PATIENT : null,\r\n        error: null,\r\n        addEditState: TableState.DEFAULT,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.CREATE_NEW_PATIENT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        addEditState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.CREATE_NEW_PATIENT_SUCCESS: {\r\n      return {\r\n      ...state,\r\n      PATIENT: action.payload[\"newPatient\"][\"data\"],\r\n      ACTIVE_PATIENTS_DATA: [\r\n          ...state.ACTIVE_PATIENTS_DATA,\r\n          action.payload[\"newPatient\"][\"data\"]\r\n        ],\r\n        total: state?.total + 1,\r\n        addEditState: TableState.SUCCESS,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.UPDATE_PATIENT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        addEditState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.UPDATE_PATIENT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        addEditState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.UPDATE_PATIENT_SUCCESS: {\r\n      let resp: ActivePatient[] = [];\r\n      if (state.SELECTED_TAB === ActivePatientsTabs.ASSIGN_PATIENT && action.payload[\"updatedData\"][\"data\"]) {\r\n        resp = state.ACTIVE_PATIENTS_DATA;\r\n      } else if (state.SELECTED_TAB === ActivePatientsTabs.ACTIVE_PATIENT) {\r\n        resp = state.ACTIVE_PATIENTS_DATA?.map((x) => {\r\n          if (x?.patientId === ((action.payload[\"updatedData\"][\"data\"] !== undefined) ? action.payload[\"updatedData\"][\"data\"][\"patientId\"] : action.payload[\"updatedData\"][\"patientId\"])) {\r\n            x = (action.payload[\"updatedData\"][\"data\"] !== undefined) ? action.payload[\"updatedData\"][\"data\"] : action.payload[\"updatedData\"];\r\n            return x;\r\n          } else {\r\n            return x;\r\n          }\r\n        })\r\n      }\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        addEditState: TableState.SUCCESS,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.STOP_MONITORING_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.STOP_MONITORING_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.STOP_MONITORING_SUCCESS: {\r\n\r\n      return {\r\n        ...state,\r\n        ACTIVE_PATIENTS_DATA: state.ACTIVE_PATIENTS_DATA?.map((x) => {\r\n          if (x && x[\"patientId\"] === action.payload[\"patient\"][\"data\"]) {\r\n            x.biosensorStatus = \"STOPPED\";\r\n            return x;\r\n          } else {\r\n            return x;\r\n          }\r\n        }),\r\n        tableState: TableState.SUCCESS,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_PATIENTS_IDs_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_PATIENTS_IDs_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_PATIENTS_IDs_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        PATIENT_IDS: action.payload[\"patientIds\"],\r\n        tableState: TableState.SUCCESS,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_TAB_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_TAB_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_TAB_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        SELECTED_TAB: action.payload[\"selectedTab\"],\r\n        tableState: TableState.SUCCESS,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.ASSIGN_GROUP_REQUEST: {\r\n      console.log(state);\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.ASSIGN_GROUP_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.ASSIGN_GROUP_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.DISCHARGE_PATIENT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.DISCHARGE_PATIENT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.DISCHARGE_PATIENT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        ACTIVE_PATIENTS_DATA: state?.ACTIVE_PATIENTS_DATA?.filter(\r\n        (x) => {\r\n        if (x.patientId !== action.payload[\"dischargedPatient\"][\"data\"]) {\r\n        return x;\r\n        }\r\n        }\r\n        ),\r\n        total: state?.total - 1,\r\n        tableState: TableState.SUCCESS,\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\r\nimport { State, patientsFeatureKey } from \"./pending-interpretation.reducer\";\r\n\r\nconst getPatientState = createFeatureSelector<State>(patientsFeatureKey);\r\n\r\nexport const selectActivePatientsList = createSelector(\r\n  getPatientState,\r\n  (state) => {\r\n    return {\r\n      ...state,\r\n      error: state?.error,\r\n      tableState: state?.tableState\r\n    }\r\n  }\r\n);\r\n\r\nexport const selectUnassignedPatientsList = createSelector(\r\n  getPatientState,\r\n  (state) => {\r\n    return {\r\n      ...state,\r\n      error: state?.error,\r\n      tableState: state?.tableState\r\n    }\r\n  }\r\n);\r\n\r\nexport const selectActivePatientsError = createSelector(\r\n  getPatientState,\r\n  (state) => state?.error\r\n);\r\n\r\nexport const createNewPatient = createSelector(\r\n  getPatientState,\r\n  (state) => {\r\n    return{\r\n      PATIENT : state?.PATIENT,\r\n      error : state?.error,\r\n      addEditState: state?.addEditState\r\n    }\r\n  }\r\n);\r\n\r\nexport const updatePatient = createSelector(\r\n  getPatientState,\r\n  (state) => state.PATIENT\r\n);\r\n\r\nexport const assignGroupPatient = createSelector(\r\n  getPatientState,\r\n  (state) => state.PATIENT\r\n);\r\n\r\nexport const dischargePatient = createSelector(\r\n  getPatientState,\r\n  (state) => state.PATIENT\r\n);\r\n\r\nexport const stopMonitoring = createSelector(\r\n  getPatientState,\r\n  (state) => state.PATIENT\r\n);\r\n\r\nexport const doctorsList = createSelector(\r\n  getPatientState,\r\n  (state) => state?.DOCTORS\r\n);\r\n\r\nexport const getPatientIds = createSelector(\r\n  getPatientState,\r\n  (state) => state.PATIENT_IDS\r\n);\r\n\r\nexport const selectedTab = createSelector(\r\n  getPatientState,\r\n  (state) => state.SELECTED_TAB\r\n)\r\n"],"names":["FilterKeysForActivePatient","MonitoringStatus","TableState","SelectionModel","Subject","debounceTime","distinctUntilChanged","map","switchMap","BehaviorSubject","NotificationsComponent","AddEventComponent","i0","PendingInterpretationComponent","constructor","manager","dialog","service","authService","snackbar","route","manageGroupService","Array","Set","id","label","headerClass","sortable","labelClass","cellClass","rowSelectEnabled","actions","show","headerLabel","class","header","style","page","pageSize","pageIndex","length","paginator","offline","hide","sort","active","direction","tableState","DEFAULT","keyword","string","cGroupId","pGroupId","groups$","groupsData$","asObservable","locationGroups$","pipe","groups","filter","g","type","clinicalGroups$","ngOnInit","getDoctors","roles","getRoles","indexOf","isPhy","getGroupDetails","modelChanged","serviceToCallWith","subscribe","initVariables","fetchTableData","panelId","sessionStorage","getItem","getPanelDetails","then","patients","patient","patchId","selectedIds","add","patientId","activePatients","size","selectedPatients","select","pat","has","reloadInterval","setInterval","activePatientsSub","selectActivePatient","response","config","Object","total","error","ACTIVE_PATIENTS_DATA","x","name","first_name","last_name","doctorsListSub","getDoctorsList","list","persons","items","doctorsList","doctor","displayName","ref","getActivePatient","actvePatientsUrl","searchObject","filterObject","resetAndSearch","search","_a","next","JSON","stringify","searchByGroup","key","groupId","undefined","clear","checkCharacters","event","pattern","test","preventDefault","i","filterStrings","push","text","value","getActivePatientData","isSelected","row","selection","selected","s","includes","isClinicianCheck","role","isGcorScCheck","onPageChange","onPatientsSelected","e","delete","onSortChange","activeKey","addNewEvent","console","log","patchIds","startTime","addEvent","open","width","maxWidth","height","maxHeight","panelClass","data","patchStarted","_b","disableClose","alertSettings","selectedPatient","dailogRef","patientData","selectedTab","getThirdPartyDevices","deviceIds","forEach","element","deviceId","fetch","isScOrGc","ngOnDestroy","clearInterval","unsubscribe","selectors","decls","vars","consts","template","ctx","$event"],"sourceRoot":"webpack:///"}