{"version":3,"mappings":"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","names":["ActivePatientManagerService","activePatientstore$","manageServiceStore$","Array","url","dispatch","_store__WEBPACK_IMPORTED_MODULE_0__","activePatients$","select","patient","selectActivePatient","patientId","doctors$","_manage_group_store__WEBPACK_IMPORTED_MODULE_1__","groups","unAssignedPatients$","tab","_angular_core__WEBPACK_IMPORTED_MODULE_2__","factory","providedIn","ClinicalGroup","PhysicalGroup","Gender","FilterKeysForActivePatient","FilterKeysForAssignPatient","MonitoringStatus","ActivePatientsTabs","TabMetaDataItems","WeightUnits","HeightUnits","routes","path","canActivate","_guards_auth_guard__WEBPACK_IMPORTED_MODULE_0__","component","_shared_root_root_component__WEBPACK_IMPORTED_MODULE_2__","children","_pending_interpretation_pending_interpretation_component__WEBPACK_IMPORTED_MODULE_3__","data","roles","_enum_roles_enum__WEBPACK_IMPORTED_MODULE_1__","ActivePatientsRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_5__","imports","exports","ActivePatientsModule","provide","_services_pending_interpretation_service__WEBPACK_IMPORTED_MODULE_2__","useClass","_angular_common_http__WEBPACK_IMPORTED_MODULE_11__","keycloak_angular__WEBPACK_IMPORTED_MODULE_12__","multi","_angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__","useValue","appearance","floatLabel","_angular_common__WEBPACK_IMPORTED_MODULE_14__","_shared_shared_module__WEBPACK_IMPORTED_MODULE_1__","_pending_interpretation_routing_module__WEBPACK_IMPORTED_MODULE_0__","_i18n_i18n_module__WEBPACK_IMPORTED_MODULE_6__","_angular_material_select__WEBPACK_IMPORTED_MODULE_15__","_angular_material_datepicker__WEBPACK_IMPORTED_MODULE_16__","_angular_material_input__WEBPACK_IMPORTED_MODULE_17__","_angular_material_core__WEBPACK_IMPORTED_MODULE_18__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_19__","_angular_material_menu__WEBPACK_IMPORTED_MODULE_20__","_angular_material_button__WEBPACK_IMPORTED_MODULE_21__","_angular_material_sort__WEBPACK_IMPORTED_MODULE_22__","_angular_material_checkbox__WEBPACK_IMPORTED_MODULE_23__","_angular_material_card__WEBPACK_IMPORTED_MODULE_24__","_angular_material_list__WEBPACK_IMPORTED_MODULE_25__","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_26__","_angular_material_tooltip__WEBPACK_IMPORTED_MODULE_27__","_angular_material_tabs__WEBPACK_IMPORTED_MODULE_28__","_angular_material_paginator__WEBPACK_IMPORTED_MODULE_29__","_manage_group_manage_group_module__WEBPACK_IMPORTED_MODULE_5__","_angular_forms__WEBPACK_IMPORTED_MODULE_30__","_angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_31__","_ngrx_store__WEBPACK_IMPORTED_MODULE_32__","_store_pending_interpretation_reducer__WEBPACK_IMPORTED_MODULE_3__","_ngrx_effects__WEBPACK_IMPORTED_MODULE_33__","_store_pending_interpretation_effects__WEBPACK_IMPORTED_MODULE_4__","_life_signals_life_signals_module__WEBPACK_IMPORTED_MODULE_7__","_angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_34__","_angular_material_progress_spinner__WEBPACK_IMPORTED_MODULE_35__","ng_pick_datetime__WEBPACK_IMPORTED_MODULE_8__","declarations","_pending_interpretation_pending_interpretation_component__WEBPACK_IMPORTED_MODULE_9__","i0","PendingInterpretationComponent","constructor","manager","dialog","service","authService","snackbar","route","manageGroupService","SelectionModel","Set","id","label","headerClass","sortable","labelClass","cellClass","rowSelectEnabled","actions","show","headerLabel","class","header","style","page","pageSize","pageIndex","length","paginator","offline","hide","sort","active","direction","tableState","TableState","keyword","string","cGroupId","pGroupId","BehaviorSubject","Subject","groups$","groupsData$","asObservable","locationGroups$","pipe","map","filter","g","type","clinicalGroups$","ngOnInit","getDoctors","getRoles","indexOf","isPhy","getGroupDetails","modelChanged","debounceTime","distinctUntilChanged","switchMap","serviceToCallWith","subscribe","initVariables","fetchTableData","panelId","sessionStorage","getItem","getPanelDetails","then","patients","patchId","selectedIds","add","activePatients","size","selectedPatients","pat","has","reloadInterval","setInterval","activePatientsSub","response","config","Object","total","error","ACTIVE_PATIENTS_DATA","x","name","first_name","last_name","doctorsListSub","getDoctorsList","list","persons","items","doctorsList","doctor","displayName","ref","getActivePatient","actvePatientsUrl","searchObject","filterObject","resetAndSearch","search","_a","next","JSON","stringify","searchByGroup","key","groupId","undefined","clear","checkCharacters","event","pattern","test","preventDefault","i","filterStrings","push","text","value","getActivePatientData","isSelected","row","selection","selected","s","includes","isClinicianCheck","role","isGcorScCheck","onPageChange","onPatientsSelected","e","onSortChange","activeKey","addNewEvent","console","log","patchIds","startTime","addEvent","open","AddEventComponent","width","maxWidth","height","maxHeight","panelClass","patchStarted","_b","disableClose","alertSettings","selectedPatient","dailogRef","NotificationsComponent","patientData","selectedTab","getThirdPartyDevices","deviceIds","forEach","element","deviceId","fetch","isScOrGc","ngOnDestroy","clearInterval","unsubscribe","selectors","decls","vars","consts","template","ctx","$event","ActivePatientsService","backendApiService","src_environments_environment__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_3__","cGroup$","http","httpClient","base_url","iurl","apiURL","get","handleError","BASE_URL","post","payload","obj","put","encodeURIComponent","URL","errorMessage","ids","getValue","toLowerCase","searchString","location","ob","Promise","resolve","reject","apiUrl","getMapping","patientsArr","doctorId","firstName","lastName","age","cGroup","pGroup","sex","gender","created","Date","stTime","body","_angular_core__WEBPACK_IMPORTED_MODULE_8__","ActionTypes","LoadActivePatientsRequestAction","LOAD_ACTIVE_PATIENTS_REQUEST","LoadActivePatientsFailureAction","LOAD_ACTIVE_PATIENTS_FAILURE","LoadActivePatientsSuccessAction","LOAD_ACTIVE_PATIENTS_SUCCESS","LoadUnassignedPatientsRequestAction","LOAD_UNASSIGNED_PATIENTS_REQUEST","LoadUnassignedPatientsFailureAction","LOAD_UNASSIGNED_PATIENTS_FAILURE","LoadUnassignedPatientsSuccessAction","LOAD_UNASSIGNED_PATIENTS_SUCCESS","LoadDoctorsListRequestAction","LOAD_DOCTORS_LIST_REQUEST","LoadDoctorsListFailureAction","LOAD_DOCTORS_LIST_FAILURE","LoadDoctorsListSuccessAction","LOAD_DOCTORS_LIST_SUCCESS","CreateNewPatientRequestAction","CREATE_NEW_PATIENT_REQUEST","CreateNewPatientFailureAction","CREATE_NEW_PATIENT_FAILURE","CreateNewPatientSuccessAction","CREATE_NEW_PATIENT_SUCCESS","UpdatePatientRequestAction","UPDATE_PATIENT_REQUEST","UpdatePatientFailureAction","UPDATE_PATIENT_FAILURE","UpdatePatientSuccessAction","UPDATE_PATIENT_SUCCESS","AssignGroupRequestAction","ASSIGN_GROUP_REQUEST","AssignGroupFailureAction","ASSIGN_GROUP_FAILURE","AssignGroupSuccessAction","ASSIGN_GROUP_SUCCESS","DischargePatientRequestAction","DISCHARGE_PATIENT_REQUEST","DischargePatientFailureAction","DISCHARGE_PATIENT_FAILURE","DischargePatientSuccessAction","DISCHARGE_PATIENT_SUCCESS","StopMonitoringRequestAction","STOP_MONITORING_REQUEST","StopMonitoringFailureAction","STOP_MONITORING_FAILURE","StopMonitoringSuccessAction","STOP_MONITORING_SUCCESS","SetSelectedPatientIdsRequestAction","SET_SELECTED_PATIENTS_IDs_REQUEST","SetSelectedPatientIdsFailureAction","SET_SELECTED_PATIENTS_IDs_FAILURE","SetSelectedPatientIdsSuccessAction","SET_SELECTED_PATIENTS_IDs_SUCCESS","SetSelectedTabRequestAction","SET_SELECTED_TAB_REQUEST","SetSelectedTabFailureAction","SET_SELECTED_TAB_FAILURE","SetSelectedTabSuccessAction","SET_SELECTED_TAB_SUCCESS","ActivePatientsEffects","activePatientsService","actions$","_pending_interpretation_actions__WEBPACK_IMPORTED_MODULE_0__","action","getAll","getUnassignedPatients","doctors","savePatient","newPatient","updatePatient","updatedData","assignGroup","stopProcedure","dischargePatient","dischargedPatient","setSelectedPatientIds","patientIds","setSelectedTab","initialActivePatientState","UNASSIGNED_PATIENTS_DATA","PATIENT","DOCTORS","PATIENT_IDS","SELECTED_TAB","_models_pending_interpretation_model__WEBPACK_IMPORTED_MODULE_1__","src_app_life_signals_models_ls_column_model__WEBPACK_IMPORTED_MODULE_0__","addEditState","unassignedPatients_total","patientsFeatureKey","ActivePatientsReducer","state","_pending_interpretation_actions__WEBPACK_IMPORTED_MODULE_2__","resp","biosensorStatus","_c","getPatientState","_pending_interpretation_reducer__WEBPACK_IMPORTED_MODULE_0__","selectActivePatientsList","selectUnassignedPatientsList","selectActivePatientsError","createNewPatient","assignGroupPatient","stopMonitoring","getPatientIds"],"sources":["webpack:///src/app/pending-interpretation/manager/pending-interpretation-manager.service.ts","webpack:///src/app/pending-interpretation/models/pending-interpretation.model.ts","webpack:///src/app/pending-interpretation/pending-interpretation-routing.module.ts","webpack:///src/app/pending-interpretation/pending-interpretation.module.ts","webpack:///src/app/pending-interpretation/pending-interpretation/pending-interpretation.component.html","webpack:///src/app/pending-interpretation/pending-interpretation/pending-interpretation.component.ts","webpack:///src/app/pending-interpretation/services/pending-interpretation.service.ts","webpack:///src/app/pending-interpretation/store/pending-interpretation.actions.ts","webpack:///src/app/pending-interpretation/store/pending-interpretation.effects.ts","webpack:///src/app/pending-interpretation/store/pending-interpretation.reducer.ts","webpack:///src/app/pending-interpretation/store/pending-interpretation.selector.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Group } from \"src/app/manage-group/models/manage-groups.model\";\r\nimport { DOCTORS } from \"../models/pending-interpretation.model\";\r\nimport {\r\n  ActivePatientsStoreState,\r\n  ActivePatientsStoreActions,\r\n  ActivePatientsStoreSelectors,\r\n} from \"../store\";\r\nimport {\r\n  ManageGroupsStoreActions,\r\n  ManageGroupsStoreSelectors,\r\n  ManageGroupsStoreState,\r\n} from \"../../manage-group/store\";\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ActivePatientManagerService {\r\n  activePatients$: Observable<ActivePatientsStoreState.State>;\r\n  unAssignedPatients$: Observable<ActivePatientsStoreState.State>;\r\n  selectedPatientIds$: Observable<String[]>;\r\n  doctors$: Observable<DOCTORS[]>;\r\n  patientIds: Array<string> = new Array();\r\n  groups$: Observable<Group[]>;\r\n\r\n  constructor(\r\n    private activePatientstore$: Store<ActivePatientsStoreState.State>,\r\n    private manageServiceStore$: Store<ManageGroupsStoreState.ManageGroupState>\r\n  ) { }\r\n\r\n  getActivePatient(url: string) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.LoadActivePatientsRequestAction({ url })\r\n    );\r\n  }\r\n\r\n  selectActivePatient(): Observable<ActivePatientsStoreState.State> {\r\n    this.activePatients$ = this.activePatientstore$.select(\r\n      ActivePatientsStoreSelectors.selectActivePatientsList\r\n    );\r\n    return this.activePatients$;\r\n  }\r\n\r\n  updatePatient(patient) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.UpdatePatientRequestAction(patient)\r\n    );\r\n    return this.selectActivePatient();\r\n  }\r\n\r\n  createPatient(patient) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.CreateNewPatientRequestAction(patient)\r\n    );\r\n    return this.activePatientstore$.select(ActivePatientsStoreSelectors.createNewPatient);\r\n  }\r\n\r\n  dischargePatient(patientId) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.DischargePatientRequestAction(patientId)\r\n    );\r\n  }\r\n\r\n  getDoctorsList(): Observable<DOCTORS[]> {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.LoadDoctorsListRequestAction()\r\n    );\r\n    this.doctors$ = this.activePatientstore$.select(\r\n      ActivePatientsStoreSelectors.doctorsList\r\n    );\r\n    return this.doctors$;\r\n  }\r\n\r\n  stopMonitoring(patientId) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.StopMonitoringRequestAction(patientId)\r\n    );\r\n  }\r\n\r\n  fetchGroups() {\r\n    this.manageServiceStore$.dispatch(\r\n      new ManageGroupsStoreActions.LoadGroupsRequestAction()\r\n    );\r\n    return this.manageServiceStore$.select(\r\n      ManageGroupsStoreSelectors.selectGroupsList\r\n    );\r\n  }\r\n\r\n  assignGroup(groups) {\r\n    // this.manageServiceStore$.dispatch(\r\n    //   new ManageGroupsStoreActions.SaveGroupRequestAction(groups)\r\n    // );\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.AssignGroupRequestAction(groups)\r\n    )\r\n\r\n    // return this.manageServiceStore$.select(\r\n    //   ManageGroupsStoreSelectors.selectGroupsList\r\n    // );\r\n    return this.activePatientstore$.select(ActivePatientsStoreSelectors.assignGroupPatient);\r\n  }\r\n\r\n  // assignGroupToPatient(patient, groups) {\r\n  //   this.assignGroup(groups).subscribe(g => {\r\n  //     if(g?.CLINICAL_GROUPS && groups.cGroup) {\r\n  //       const obj = {\r\n  //         id: g?.CLINICAL_GROUPS[0]?.groupId,\r\n  //         name: g?.CLINICAL_GROUPS[0]?.name\r\n  //       }\r\n  //       patient.cGroup = obj;\r\n  //     }else{\r\n  //       patient.cGroup = null;\r\n  //     }\r\n  //     if(g?.PHYSICAL_GROUPS && groups.pGroup) {\r\n  //       const obj = {\r\n  //         id: g?.PHYSICAL_GROUPS[0]?.groupId,\r\n  //         name: g?.PHYSICAL_GROUPS[0]?.name\r\n  //       }\r\n  //       patient.pGroup = obj;\r\n  //     }else{\r\n  //       patient.pGroup = null;\r\n  //     }  \r\n  //   });\r\n  // }\r\n\r\n  fetchUnAssignedPatientsData(url) {\r\n    this.activePatientstore$.dispatch(\r\n      new ActivePatientsStoreActions.LoadUnassignedPatientsRequestAction({ url })\r\n    );\r\n  }\r\n\r\n  selectUnassignedPatients() {\r\n    this.unAssignedPatients$ = this.activePatientstore$.select(\r\n      ActivePatientsStoreSelectors.selectUnassignedPatientsList\r\n    );\r\n    return this.unAssignedPatients$;\r\n  }\r\n\r\n  setSelectedTab(tab:string) {\r\n    this.activePatientstore$.dispatch(new ActivePatientsStoreActions.SetSelectedTabRequestAction(tab));\r\n  }\r\n\r\n  getSelectedTab() {\r\n    return this.activePatientstore$.select(ActivePatientsStoreSelectors.selectedTab);\r\n  }\r\n}\r\n","import { Location } from '@angular/common';\r\nimport { Group } from \"src/app/manage-group/models/manage-groups.model\";\r\n\r\nexport interface UnassignedPatient {\r\n  gender: string;\r\n  patchId : Array<string>;\r\n  biosensorStatus: string;\r\n}\r\n\r\nexport interface ActivePatient {\r\n  activePatch: string;\r\n  age: number;\r\n  phoneNo: string;\r\n  email: string;\r\n  name: string;\r\n  biosensorStatus: string;\r\n  archivalStatus: string;\r\n  cgroupId: string;\r\n  cGroup: Group;\r\n  pGroup: Group;\r\n  clinicalInfo: null;\r\n  createdDateTime: string;\r\n  deviceIds: null;\r\n  dob: string;\r\n  doctorId: string;\r\n  fk_r_doctor?:string;\r\n  fk_prescriber:string;\r\n  firstName: string;\r\n  first_name?: string;\r\n  gender: string;\r\n  height: number;\r\n  heightUnit: string;\r\n  isDischarged: boolean;\r\n  isUnassigned: boolean;\r\n  lastName: string;\r\n  last_name?: string;\r\n  patchIds: Array<PatchId>;\r\n  patientId: string;\r\n  patient_id_mrn: string;\r\n  admissionId: string;\r\n  pgroupId: string;\r\n  procedureDuration: number;\r\n  startedOn: number;\r\n  weight: number;\r\n  weightUnit: string;\r\n  estimatedDischarge: number;\r\n  prescriber_user_name?: string;\r\n  doctor_user_name:string;\r\n  prescription_id:string;\r\n  location:string;\r\n  biosensor?:Array<Biosensor>;\r\n}\r\n\r\nexport interface DOCTORS {\r\n  createdDateTime: string;\r\n  email: string;\r\n  facilityId: string;\r\n  firstName: string;\r\n  first_name?:string;\r\n  id: string;\r\n  _id?:string;\r\n  isActive: boolean;\r\n  lastName: string;\r\n  last_name?:string;\r\n  phoneNo: string;\r\n  roles: Array<string>;\r\n  serviceProviderId: string;\r\n}\r\n\r\nexport interface NewPatient {\r\n  patient_id_mrn: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  country_code:string;\r\n  mobile: string;\r\n  dob: string;\r\n  age: number;\r\n  sex: string;\r\n  weight: number;\r\n  height: number;\r\n  country:string;\r\n  zip_code:number;\r\n  street_address_1:string;\r\n  street_address_2:string;\r\n  city: string;\r\n  state:string;\r\n  em_contact_name:string;\r\n  em_contact_country_code:string;\r\n  em_contact_number:string;\r\n  fk_prescriber:string;\r\n  fk_technician:string;\r\n  fk_r_doctor:string;\r\n  pri_approver_id:string;\r\n  final_approver_id:string;\r\n  primary_indication:string;\r\n  monitoring_duration:string;\r\n  order_id:string;\r\n  pacemaker:boolean;\r\n  icd:boolean\r\n  additional_info:string;\r\n  prescription_id:string;\r\n  billing_indication:string;\r\n  billing_method:string;\r\n  location:string;\r\n  biosensor:Array<Biosensor>;\r\n  status:string;\r\n  facility_id:string;\r\n  created_by:string;\r\n\r\n  admissionId: string;\r\n  primaryContact:string;\r\n  weightUnit: string;\r\n  heightUnit: string;\r\n  doctorId: string;\r\n  cGroup: string;\r\n  pGroup: string;\r\n  patchIds: Array<PatchId>;\r\n  deviceIds: Array<ThirdPartyIds>;\r\n  createdDateTime: Date;\r\n  startedOn: number;\r\n  procedureDuration: number;\r\n  estimatedDischarge: number;\r\n  prescribingPhysician:string;\r\n  technicianName:string;\r\n  referalPhysician:string;\r\n  interpPhysician:string,\r\n  prelimInterpPhysician:string;\r\n  locationGroup:string;\r\n}\r\n\r\nexport interface eNewPatient {\r\n  patientId: string;\r\n  admissionId: string;\r\n  dob: string;\r\n  age: number;\r\n  phoneNo: string;\r\n  primaryContact:string;\r\n  email: string;\r\n  gender: string;\r\n  weight: number;\r\n  height: number;\r\n  weightUnit: string;\r\n  heightUnit: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  doctorId: string;\r\n  cGroup: string;\r\n  pGroup: string;\r\n  patchIds: Array<PatchId>;\r\n  deviceIds: Array<ThirdPartyIds>;\r\n  createdDateTime: Date;\r\n  startedOn: number;\r\n  procedureDuration: number;\r\n  estimatedDischarge: number;\r\n  country:string;\r\n  zipCode:number;\r\n  street1:string;\r\n  street2:string;\r\n  city: string;\r\n  state:string;\r\n  emergencyContactName:string;\r\n  emergencyContactNumber:string;\r\n  prescribingPhysician:string;\r\n  technicianName:string;\r\n  referalPhysician:string;\r\n  interpPhysician:string,\r\n  prelimInterpPhysician:string;\r\n  locationGroup:string;\r\n  primaryIndication:string;\r\n  monitoringDuration:string;\r\n  orderId:string;\r\n  prescriptionId:string;\r\n  additionalInfo:string;\r\n  billingIndication:string;\r\n  billingMethod:string;\r\n}\r\n\r\nexport interface Biosensor {\r\n  biosensor_id:string;\r\n  monitoring_started_on:string;\r\n  monitoring_duration:number;\r\n}\r\n\r\nexport interface AssignGroup {\r\n  patientId: string;\r\n  cGroup: Group;\r\n  pGroup: Group;\r\n}\r\n\r\nexport interface ThirdPartyIds {\r\n  deviceId: string;\r\n  deviceType: string;\r\n}\r\n\r\nexport interface PatchId {\r\n  startTime?: Boolean;\r\n  deviceId: string;\r\n}\r\n\r\nexport enum ClinicalGroup {\r\n  ONCOLOGY = \"Oncology\",\r\n}\r\n\r\nexport enum PhysicalGroup {\r\n  REMOTE = \"Remote\",\r\n  INPATIENT = \"Inpatient\",\r\n}\r\n\r\nexport enum Gender {\r\n  MALE = \"Male\",\r\n  FEMALE = \"Female\",\r\n  OTHER = \"Other\"\r\n}\r\n\r\nexport enum FilterKeysForActivePatient {\r\n  PATIENTID = \"MRN\",\r\n  PATCHID = \"Biosensor ID\",\r\n  PATIENTFIRSTNAME = \"Patient First Name\"\r\n}\r\n\r\nexport enum FilterKeysForAssignPatient {\r\n  PATCHID = \"Biosensor ID\",\r\n  // PATIENTNAME = \"PATIENTNAME\"\r\n}\r\n\r\nexport enum MonitoringStatus {\r\n  ACTIVE = \"ACTIVE\",\r\n  STOP = \"STOP\",\r\n  INPROGRESS = \"INPROGRESS\",\r\n  STREAMING = \"Streaming\",\r\n  FINALIZE_IN_PROGRESS = \"finalizeInProgress\",\r\n  FINALIZED = \"finalized\"\r\n}\r\n\r\nexport enum ActivePatientsTabs {\r\n  ASSIGN_PATIENT = \"Assign Patient\",\r\n  ACTIVE_PATIENT = \"Active Patient\",\r\n}\r\n\r\nexport interface TabMetaData {\r\n  name: string;\r\n  pageNumber: number;\r\n  url: string;\r\n  searchString: string;\r\n  sortBy: string;\r\n  size: number;\r\n}\r\n\r\nexport enum TabMetaDataItems {\r\n  PAGE_NUMBER = 'PAGENUMBER',\r\n  SIZE = 'SIZE',\r\n  SORTBY = 'SORTBY',\r\n  SEARCH_OBJECT = 'SEARCH_OBJECT'\r\n}\r\n\r\nexport interface AddToDashboard {\r\n  createdBy: string;\r\n  createdById: string;\r\n  createdDateTime: string;\r\n  facilityId: string;\r\n  panelId: string;\r\n  panelType: string;\r\n  patientIds: Array<string>\r\n  patients: Array<{}>\r\n}\r\n\r\nexport interface PatientData {\r\n  activePatient: ActivePatient;\r\n  patchId: UnassignedPatient\r\n}\r\n\r\nexport interface Patch {\r\n  deviceId: string;\r\n  deviceType: string;\r\n  endTime: number;\r\n  startTime: number\r\n}\r\n\r\nexport enum WeightUnits {\r\n  KG = \"KG\",\r\n  POUND = \"POUND\"\r\n}\r\n\r\nexport enum HeightUnits {\r\n  CM = \"CM\",\r\n  INCH = \"INCH\"\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { AuthGuard } from \"../guards/auth.guard\";\r\nimport { UserRoles } from \"../enum/roles.enum\";\r\nimport { RootComponent } from \"../shared/root/root.component\";\r\nimport { PendingInterpretationComponent } from \"./pending-interpretation/pending-interpretation.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    canActivate: [AuthGuard],\r\n    component: RootComponent,\r\n    children: [\r\n      {\r\n        path: \"pending-interpretation\",\r\n        component: PendingInterpretationComponent,\r\n        canActivate: [AuthGuard],\r\n        data: {\r\n          roles: [\r\n            UserRoles.GENERAL_CLINICIAN,\r\n            UserRoles.SUPERVISORY_CLINICIAN,\r\n            UserRoles.PHYSICIAN,\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ActivePatientsRoutingModule {}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { ActivePatientsRoutingModule } from \"./pending-interpretation-routing.module\";\r\nimport { SharedModule } from \"../shared/shared.module\";\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatSortModule } from \"@angular/material/sort\";\r\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatListModule } from \"@angular/material/list\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\r\nimport { ActivePatientsService } from \"./services/pending-interpretation.service\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport * as fromActivePatients from \"./store/pending-interpretation.reducer\";\r\nimport { ActivePatientsEffects } from \"./store/pending-interpretation.effects\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\r\nimport { MatTabsModule } from \"@angular/material/tabs\";\r\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { KeycloakBearerInterceptor } from \"keycloak-angular\";\r\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\r\nimport { MatNativeDateModule } from \"@angular/material/core\";\r\nimport { ManageGroupModule } from \"../manage-group/manage-group.module\";\r\nimport { I18nModule } from \"../i18n/i18n.module\";\r\nimport { LifeSignalsModule } from \"../life-signals/life-signals.module\";\r\nimport { EpochToHumanDatePipe } from \"../pipe/epochToHumanDate/epoch-to-human-date.pipe\";\r\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\r\nimport { MatFormFieldModule, MAT_FORM_FIELD_DEFAULT_OPTIONS } from \"@angular/material/form-field\";\r\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\r\nimport {OwlDateTimeModule} from \"ng-pick-datetime\";\r\nimport { PendingInterpretationComponent } from \"./pending-interpretation/pending-interpretation.component\";\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    // EpochToHumanDatePipe,\r\n    PendingInterpretationComponent,\r\n  ],\r\n    imports: [\r\n        CommonModule,\r\n        SharedModule,\r\n        ActivePatientsRoutingModule,\r\n        I18nModule,\r\n        MatSelectModule,\r\n        MatDatepickerModule,\r\n        MatInputModule,\r\n        MatNativeDateModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        MatButtonModule,\r\n        MatSortModule,\r\n        MatCheckboxModule,\r\n        MatCardModule,\r\n        MatListModule,\r\n        MatDialogModule,\r\n        MatTooltipModule,\r\n        MatTabsModule,\r\n        MatPaginatorModule,\r\n        ManageGroupModule,\r\n        ReactiveFormsModule,\r\n        MatAutocompleteModule,\r\n        StoreModule.forFeature(\r\n            fromActivePatients.patientsFeatureKey,\r\n            fromActivePatients.ActivePatientsReducer\r\n        ),\r\n        EffectsModule.forFeature([ActivePatientsEffects]),\r\n        LifeSignalsModule,\r\n        FormsModule,\r\n        MatFormFieldModule,\r\n        MatProgressBarModule,\r\n        MatProgressSpinnerModule,\r\n        MatTooltipModule,\r\n        OwlDateTimeModule\r\n    ],\r\n  providers: [\r\n    {\r\n      provide: ActivePatientsService,\r\n      useClass: ActivePatientsService,\r\n    },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: KeycloakBearerInterceptor,\r\n      multi: true,\r\n    },\r\n    { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: 'fill', floatLabel: 'never' } },\r\n  ],\r\n})\r\nexport class ActivePatientsModule {}\r\n","<ls-page-header type=\"pending-interp\">\r\n    <ng-container page-actions>\r\n        <div class=\"d-flex justify-content-end me-4\">\r\n            <div class=\"d-lg-flex d-md-none d-sm-none d-none my-2\">\r\n                <button mat-flat-button color=\"blue\" class=\"mx-1\"\r\n                    [disabled]=\"selectedPatients?.selected?.length !== 0\"\r\n                     *ngIf=\"isClinicianCheck()\">\r\n                    {{ \"pending-interp-module.button.assign_prelim_interp\" | translate }}\r\n                </button>\r\n            </div>\r\n            <div class=\"d-lg-flex d-md-none d-sm-none d-none my-2\">\r\n                <button mat-flat-button color=\"blue\" class=\"mx-1\"\r\n                    [disabled]=\"selectedPatients?.selected?.length !== 0\"\r\n                     *ngIf=\"isClinicianCheck()\">\r\n                    {{ \"pending-interp-module.button.assign_interp\" | translate }}\r\n                </button>\r\n            </div>\r\n            <div class=\"d-block d-lg-none my-2 \">\r\n                <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"border\">\r\n                    <mat-icon class=\"justify-content-enter\">more_vert</mat-icon>\r\n                </button>\r\n                <mat-menu #menu=\"matMenu\" class=\"mobile-menu overflow-hidden d-block d-lg-none\">\r\n                    <button mat-menu-item \r\n                        [disabled]=\"selectedPatients?.selected?.length !== 0\" *ngIf=\"isGcorScCheck()\">\r\n                        {{ \"active-patients-module.button.admit_patient\" | translate }}\r\n                    </button>\r\n                </mat-menu>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</ls-page-header>\r\n<div class=\"px-3\">\r\n    <div class=\"table-scroll without-tab-table comman-table-users head-border\">\r\n        <ls-table (sortChange)=\"onSortChange($event)\" [config]=\"config\" [selection]=\"selectedPatients\"\r\n            [data]=\"activePatients\" [columns]=\"activePatient_Columns\" (page)=\"onPageChange($event)\" [error]=\"error\"\r\n            [isSelected]=\"isSelected\" [Id]=\"'patientId'\" (selected)=\"onPatientsSelected($event)\"\r\n            [selectOnlyActive]=\"true\">\r\n            <!--            <ng-container table-header>-->\r\n            <!--                <div class=\"my-3 row\">-->\r\n            <!--                    <div class=\"col-6 col-sm-16 col-md-16 col-lg-6 col-xl-5 col-xxl-4\">-->\r\n            <!--                        <mat-form-field class=\"selectfilter no-label me-4\" appearance=\"fill\">-->\r\n            <!--                            <mat-label>{{ \"active-patients-module.select_filter\" | translate }}-->\r\n            <!--                            </mat-label>-->\r\n            <!--                            <mat-select [(ngModel)]=\"searchObject.keyword\" class=\"search-filter-select\" (selectionChange)=\"resetAndSearch()\">-->\r\n            <!--                                <mat-option [value]=\"null\">{{\"active-patients-module.select_filter\"|translate}}</mat-option>-->\r\n            <!--                                <mat-option [value]=\"filter?.value\" *ngFor=\"let filter of filterStrings\">{{ filter?.text }}-->\r\n            <!--                                </mat-option>-->\r\n            <!--                            </mat-select>-->\r\n            <!--                        </mat-form-field>-->\r\n            <!--                    </div>-->\r\n\r\n            <!--                    <div class=\"col-6 col-sm-16 col-md-16 col-lg-6 col-xl-5 col-xxl-4\">-->\r\n            <!--                        <mat-form-field class=\"search-form-field\" appearance=\"fill\">-->\r\n            <!--                            <mat-label>{{ \"active-patients-module.search\" | translate }}-->\r\n            <!--                            </mat-label>-->\r\n            <!--                            <input [class.disabled]=\"!searchObject.keyword\" [disabled]=\"!searchObject.keyword\" autocomplete=\"off\" [(ngModel)]=\"searchObject.string\" matInput type=\"text\" (ngModelChange)=\"search()\" id=\"searchString\" (keypress)=\"checkCharacters($event)\" />-->\r\n            <!--                            <mat-icon class=\"clear-icon\" *ngIf=\"searchObject.string\" (click)=\"clear()\">close-->\r\n            <!--                            </mat-icon>-->\r\n            <!--                            <mat-icon matSuffix class=\"default-cursor\">search</mat-icon>-->\r\n            <!--                        </mat-form-field>-->\r\n            <!--                    </div>-->\r\n            <!--                </div>-->\r\n            <!--            </ng-container>-->\r\n            <ng-container table-header>\r\n                <div class=\"my-3 row align-items-end position-relative ps-0 ps-lg-5\">\r\n                    <label class=\"mat-label filter-label d-lg-flex d-none  align-items-center\">{{\r\n                        \"pending-interp-module.filter\" | translate }}</label>\r\n                    <div class=\"col-sm-12 col-md-12 col-lg-9 col-xl-10 col-xxl-10 select-col discharge-select-dropdown\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.pGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.location' | translate\"\r\n                                    (selected)=\"searchByGroup('LOCATION', $event)\" [options]=\"locationGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <!-- <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.cGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.prescriber' | translate\"\r\n                                    (selected)=\"searchByGroup('CLINICAL', $event)\" [options]=\"clinicalGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown> -->\r\n                                <mat-label class=\"toplabel d-block pb-0 pb-md-1 ps-0 ps-lg-2 pt-2 pt-sm-0\">{{'active-patients-module.prescriber' | translate}}</mat-label>\r\n                                    <select class=\"w100 nested-select d-flex flex-row align-items-center justify-content-between\" (change)=\"searchByGroup('DOCTOR',$event)\">\r\n                                        <option value=\"\" class=\"select-value\">All</option>\r\n                                        <option *ngFor=\"let doc of doctorsList\" [value]=\"doc['id']\" class=\"select-value\" >{{doc['displayName']}}</option>\r\n                                    </select>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.cGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.approver' | translate\"\r\n                                    (selected)=\"searchByGroup('CLINICAL', $event)\" [options]=\"clinicalGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.cGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.prelim_interp' | translate\"\r\n                                    (selected)=\"searchByGroup('CLINICAL', $event)\" [options]=\"clinicalGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.cGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.report_gen_date' | translate\"\r\n                                    (selected)=\"searchByGroup('CLINICAL', $event)\" [options]=\"clinicalGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-0 mt-md-2 mt-lg-0\">\r\n                                <app-nested-dropdown class=\"nested-selectfilter bg-selectfilter\"\r\n                                    [selectedValue]=\"filterObject.cGroupId\" key=\"groupId\" displayKey=\"name\"\r\n                                    [label]=\"'pending-interp-module.status' | translate\"\r\n                                    (selected)=\"searchByGroup('CLINICAL', $event)\" [options]=\"clinicalGroups$ | async\"\r\n                                    [showSelect]=\"true\">\r\n                                </app-nested-dropdown>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"col-sm-12 col-md-12 col-lg-12 col-xl-2 col-xxl-2 mt-2 mt-lg-0\">\r\n                        <mat-form-field class=\"search-form-field\" appearance=\"fill\" floatLabel=\"never\">\r\n                            <mat-label>{{ \"pending-interp-module.search\" | translate }}\r\n                            </mat-label>\r\n                            <input [(ngModel)]=\"searchObject.string\" matInput type=\"search\" (keyup)=\"search()\"\r\n                                id=\"searchString\" autocomplete=\"off\" />\r\n                            <mat-icon class=\"clear-icon\" *ngIf=\"searchObject.string\" (click)=\"clear()\">close\r\n                            </mat-icon>\r\n                            <mat-icon matSuffix class=\"default-cursor\">search</mat-icon>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n\r\n            <ng-template lsWidgetName=\"patient_id\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div class=\"me-2\">{{row?.patient_id_mrn}}</div>                    \r\n                </div>\r\n                <div class=\"d-flex justify-content-start align-items-center bold-text\">\r\n                  <strong>  <div class=\"me-2\">{{ row?.name }}</div>   </strong>                 \r\n                </div>\r\n            </ng-template>  \r\n\r\n            <ng-template lsWidgetName=\"prescribing_physician\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div *ngFor=\"let doc of doctorsList\" class=\"me-2\">\r\n                        <div *ngIf=\"doc['_id']===row?.fk_prescriber\">\r\n                            {{ doc['displayName'] }}\r\n                        </div>\r\n                    </div>                 \r\n                </div>\r\n            </ng-template> \r\n\r\n            <ng-template lsWidgetName=\"location\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div class=\"me-2\">{{ row?.location }}</div>                   \r\n                </div>\r\n            </ng-template> \r\n\r\n            <ng-template lsWidgetName=\"report_time\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div class=\"me-2\">{{row?.report_time}}</div>                    \r\n                </div>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div class=\"me-2\">time</div>                    \r\n                </div>\r\n            </ng-template> \r\n\r\n            <ng-template lsWidgetName=\"interpreter\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div  class=\"me-2\">{{ row?.final_approver_id }}</div>                    \r\n                </div>\r\n          </ng-template> \r\n\r\n          <ng-template lsWidgetName=\"prelim_interpreter\" let-row>\r\n            <a type=\"button\">\r\n                <img src=\"assets/icons/plus.png\">\r\n            </a>\r\n        </ng-template>\r\n\r\n            <ng-template lsWidgetName=\"report_type\" let-row>\r\n                <div class=\"d-flex justify-content-start align-items-center\">\r\n                    <div class=\"me-2\">{{ row?.name }}</div>                    \r\n                </div>\r\n            </ng-template>  \r\n\r\n            <ng-template lsWidgetName=\"view\" let-row>\r\n                <a type=\"button\">\r\n                    <img src=\"assets/icons/pdf.png\">\r\n                </a>\r\n            </ng-template>\r\n\r\n            <ng-template lsWidgetName=\"actions\" let-row>\r\n                <!-- Pause Notification -->\r\n                <!-- <button mat-mini-fab color=\"primary\" class=\"btn-boxed boxed-height btn-no-shadow  me-2\">  <img alt=\"Push Notification\" src=\"assets/icons/pause-notification.svg\"  /></button> -->\r\n                <!-- <button mat-mini-fab color=\"primary\" class=\"btn-boxed boxed-height btn-no-shadow  me-2\">  <img alt=\"Push Notification\" src=\"assets/icons/pause-notification-disable.svg\"  /></button> -->                          \r\n                <div>\r\n                    <a>\r\n                        {{ \"pending-interp-module.alerts.p\" | translate }}\r\n                    </a>\r\n                    <a class=\"move\"> \r\n                        <img src=\"assets/icons/review.png\">\r\n                    </a>\r\n                \r\n                    <button mat-flat-button color=\"primary\" class=\"btn-no-shadow mx-auto me-2\" *ngIf=\"isClinicianCheck() || isPhy\"   (click)=\"addNewEvent(row)\">\r\n                        {{ \"pending-interp-module.button.interpret\" | translate }}\r\n                    </button>\r\n                </div>\r\n                <button mat-icon-button [matMenuTriggerFor]=\"patientMenu\" class=\"shadow-none\">\r\n                    <mat-icon class=\"justify-content-center\">more_vert</mat-icon>\r\n                </button>\r\n                <mat-menu #patientMenu=\"matMenu\" class=\"setting-card-menu profile-card-menu\" xPosition=\"before\">\r\n                    <button mat-menu-item *ngIf=\"isClinicianCheck()\" >{{ \"active-patients-module.button.redo_prelim\" | translate}}</button>\r\n                    <button mat-menu-item *ngIf=\"isScOrGc()\" >{{ \"active-patients-module.button.redo_report\" | translate}}</button>\r\n                </mat-menu>\r\n            </ng-template>\r\n\r\n        </ls-table>\r\n    </div>\r\n</div>","import {\r\n  Component, OnDestroy,\r\n  OnInit,\r\n} from \"@angular/core\";\r\nimport {\r\n  ActivePatient,\r\n  FilterKeysForActivePatient,\r\n  MonitoringStatus,\r\n} from \"../models/pending-interpretation.model\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { ActivePatientManagerService } from \"../manager/pending-interpretation-manager.service\";\r\nimport {\r\n  LSColumn,\r\n  LSTableConfig,\r\n  TableState,\r\n} from \"src/app/life-signals/_models/ls-column.model\";\r\nimport { SelectionModel } from \"@angular/cdk/collections\";\r\nimport { ActivePatientsService } from \"../services/pending-interpretation.service\";\r\nimport { Subject, Subscription } from \"rxjs\";\r\nimport { debounceTime, distinctUntilChanged, map, switchMap } from \"rxjs/operators\";\r\nimport { PageEvent } from \"@angular/material/paginator\";\r\nimport { ActivePatientsStoreState } from \"../store\";\r\nimport { Sort } from \"@angular/material/sort\";\r\nimport { AuthenticationService } from \"@services/authentication.service\";\r\nimport { SnackbarService } from \"@services/snackbar.service\";\r\nimport { ActivatedRoute, ParamMap } from \"@angular/router\";\r\nimport {Group} from \"../../manage-group/models/manage-groups.model\";\r\nimport {ManageGroupsService} from \"../../manage-group/services/manage-groups.service\";\r\nimport {BehaviorSubject} from \"rxjs/internal/BehaviorSubject\";\r\nimport {Observable} from \"rxjs/internal/Observable\";\r\nimport { NotificationsComponent } from \"src/app/dialogs/notifications-component/notifications/notifications.component\";\r\nimport { AddEventComponent } from \"src/app/dialogs/notifications-component/add-event/add-event.component\";\r\n\r\n@Component({\r\n  selector: \"app-pending-interpretation\",\r\n  templateUrl: \"./pending-interpretation.component.html\",\r\n  styleUrls: [\"./pending-interpretation.component.scss\"],\r\n})\r\nexport class PendingInterpretationComponent implements OnInit, OnDestroy {\r\n  activePatients: ActivePatient[] = new Array();\r\n  error: any;\r\n  reloadInterval: NodeJS.Timeout;\r\n\r\n  // Selection Variables\r\n  selectedPatients: SelectionModel<ActivePatient> = new SelectionModel<ActivePatient>(true);\r\n  selectedIds: Set<string> = new Set();\r\n  isPhy = false;\r\n\r\n  activePatient_Columns: LSColumn[] = [\r\n    \r\n    {\r\n      id: \"patient_id\",\r\n      label: \"PATIENT DETAILS\",\r\n      headerClass: [\"text-start\"],\r\n      sortable: true,\r\n      labelClass: \"fw-bold\",\r\n      cellClass: [],\r\n    },\r\n    {\r\n      id: \"prescribing_physician\",\r\n      label: \"prescribing physician\",\r\n      sortable: true,\r\n      headerClass: [\"text-start\"],\r\n      cellClass: [\"d-flex\", \"justify-content-start\", \"align-items-center\"],\r\n    },\r\n    {\r\n      id: \"location\",\r\n      label: \"Location\",\r\n      headerClass: [\"text-start\"],\r\n      sortable: true,\r\n      cellClass: [],\r\n    },\r\n    {\r\n      id: \"report_time\",\r\n      label: \"report time\",\r\n      sortable: true,\r\n      headerClass: [\"text-start\"],\r\n      cellClass: [\"d-flex\", \"justify-content-start\"],\r\n    },\r\n    {\r\n      id: \"interpreter\",\r\n      label: \"interpreter\",\r\n      sortable: true,\r\n      headerClass: [\"text-start\"],\r\n      cellClass: [\"d-flex\", \"justify-content-start\"],\r\n    },\r\n    {\r\n      id: \"prelim_interpreter\",\r\n      label: \"preliminary interpreter\",\r\n      sortable: true,\r\n      cellClass: [\"d-flex\", \"justify-content-start\"],\r\n      headerClass: [\"text-start\"],\r\n    },\r\n    {\r\n      id: \"report_type\",\r\n      label: \"report type\",\r\n      sortable: true,\r\n      cellClass: [\"d-flex\", \"justify-content-start\"],\r\n      headerClass: [\"text-start\"],\r\n    },\r\n    {\r\n      id: \"view\",\r\n      label: \"view\",\r\n      sortable: true,\r\n      cellClass: [\"d-flex\", \"justify-content-start\"],\r\n      headerClass: [\"text-start\"],\r\n    },\r\n    \r\n  ];\r\n\r\n  config: LSTableConfig = {\r\n    id: \"active-patients-table\",\r\n    rowSelectEnabled: true,\r\n    actions: {\r\n      show: true,\r\n      headerLabel: \"\",\r\n      class: [\"d-flex\", \"align-items-center\", \"justify-content-end\"],\r\n      header: {\r\n        style: \"max-width: 180px; width: 180px;\",\r\n      },\r\n    },\r\n    page: {\r\n      pageSize: 20,\r\n      pageIndex: 0,\r\n      length: null\r\n    },\r\n    paginator: {\r\n      offline: false,\r\n      hide: false\r\n    },\r\n    sort: {\r\n      active: \"first_name\",\r\n      direction: \"asc\"\r\n    },\r\n    tableState: TableState.DEFAULT\r\n  };\r\n  searchObject: { keyword: string; string: string } = {\r\n    keyword: \"\",\r\n    string: \"\",\r\n  };\r\n  filterObject: { cGroupId: string; pGroupId: string } = {\r\n    cGroupId: null,\r\n    pGroupId: null,\r\n  };\r\n  filterStrings: Array<any> = new Array();\r\n  monitoringStatus = MonitoringStatus;\r\n  private groupsData$: BehaviorSubject<Group[]> = new BehaviorSubject<any[]>([]);\r\n  public groups$: Observable<Group[]>;\r\n  public locationGroups$: Observable<Group[]>;\r\n  public clinicalGroups$: Observable<Group[]>;\r\n \r\n  constructor(\r\n    private manager: ActivePatientManagerService,\r\n    private dialog: MatDialog,\r\n    private service: ActivePatientsService,\r\n    private authService: AuthenticationService,\r\n    private snackbar: SnackbarService,\r\n    private route: ActivatedRoute,\r\n    private manageGroupService: ManageGroupsService\r\n  ) {\r\n    this.groups$ = this.groupsData$.asObservable();\r\n    this.locationGroups$ = this.groups$.pipe(map((groups: Group[]) => {\r\n      return groups.filter(g => g.type === \"physical\")\r\n    }));\r\n    this.clinicalGroups$ = this.groups$.pipe(map((groups: Group[]) => {\r\n      return groups.filter(g => g.type === \"CLINICAL\")\r\n    }));\r\n  }\r\n\r\n  modelChanged: Subject<string> = new Subject<string>();\r\n  activePatientsSub: Subscription;\r\n\r\n  ngOnInit() {\r\n     this.getDoctors();\r\n    let roles = this.authService.getRoles() || [];;\r\n    if(roles?.indexOf(\"PHY\") > -1) this.isPhy =true;\r\n    this.getGroupDetails();\r\n    this.modelChanged.pipe(\r\n      debounceTime(500),\r\n      distinctUntilChanged(),\r\n      switchMap(() =>\r\n        this.serviceToCallWith()))\r\n      .subscribe();\r\n    this.initVariables();\r\n    this.fetchTableData();\r\n    const panelId = sessionStorage.getItem(\"panelId\");\r\n    if (panelId?.length) {\r\n      this.service.getPanelDetails(panelId)\r\n        .then((patients) => {\r\n          for (const patient of patients) {\r\n            if (patient.patchId) {\r\n              this.selectedIds.add(patient.patientId);\r\n            }\r\n          }\r\n          if (this.activePatients.length && this.selectedIds.size) {\r\n            this.selectedPatients.select(...this.activePatients.filter(pat => {\r\n              return this.selectedIds.has(pat.patientId);\r\n            }));\r\n          }\r\n        });\r\n    }\r\n\r\n    this.reloadInterval = setInterval(() => {\r\n      this.fetchTableData();\r\n    }, 30000);\r\n\r\n    this.activePatientsSub = this.manager.selectActivePatient()\r\n      .pipe(map((response: ActivePatientsStoreState.State) => {\r\n        if(response?.tableState) {\r\n          this.config = {\r\n            ...this.config,\r\n            tableState: <TableState>response?.tableState,\r\n            rowSelectEnabled: true,\r\n            page: {\r\n              ...this.config.page,\r\n              length: response?.total\r\n            }\r\n          };\r\n        }\r\n        this.error = response?.error;\r\n        if (response?.ACTIVE_PATIENTS_DATA) {\r\n          this.activePatients = response?.ACTIVE_PATIENTS_DATA.map((x) => {\r\n            const patient: ActivePatient = {\r\n              ...x,\r\n              name: `${x.first_name} ${x.last_name}`,\r\n            };\r\n            return patient;\r\n          });\r\n          if (this.activePatients.length && this.selectedIds.size) {\r\n            this.selectedPatients.select(...this.activePatients.filter(pat => {\r\n              return this.selectedIds.has(pat.patientId);\r\n            }));\r\n          }\r\n        }\r\n      }))\r\n      .subscribe();\r\n  }\r\n\r\n  doctorsList = [];\r\n  doctorsListSub: Subscription;\r\n\r\n  getDoctors() {\r\n    this.doctorsListSub = this.manager.getDoctorsList().subscribe((list) => {\r\n      let persons = (list as any).items; \r\n      this.doctorsList = persons?.map(doctor => {\r\n        return {\r\n          ...doctor,\r\n          displayName: `${doctor?.first_name} ${doctor?.last_name}`\r\n        }\r\n      });\r\n    });\r\n    }\r\n\r\n  serviceToCallWith() {\r\n    let ref;\r\n    this.manager.getActivePatient(this.service.actvePatientsUrl(this.config, this.searchObject, this.filterObject));\r\n    ref = this.manager.selectActivePatient();\r\n    return ref;\r\n  }\r\n  resetAndSearch() {\r\n    this.searchObject.string = '';\r\n    this.search();\r\n  }\r\n\r\n  search() {\r\n    this.searchObject.keyword = 'searchText';\r\n    if (this.searchObject?.string) {\r\n      this.config.page.pageIndex = 0;\r\n    }\r\n    //this.selectedPatients.clear();\r\n    this.modelChanged.next(JSON.stringify(this.searchObject));\r\n  }\r\n  searchByGroup(key, groupId) {\r\n    if(key === 'CLINICAL') {\r\n      this.filterObject.cGroupId = groupId;\r\n    } else if(key === 'physical'){\r\n      this.filterObject.pGroupId = groupId\r\n    }\r\n      this.config.page.pageIndex = 0;\r\n      this.activePatients = undefined;\r\n      this.modelChanged.next(JSON.stringify(this.filterObject));\r\n  }\r\n\r\n  clear() {\r\n    this.searchObject.string = '';\r\n    this.search();\r\n  }\r\n\r\n  checkCharacters(event : KeyboardEvent){\r\n    if(this.searchObject.keyword === \"PATCHID\" || this.searchObject.keyword === \"PATIENTID\"){\r\n      let pattern = /^[a-zA-z0-9]$/;\r\n      let key = event.key;\r\n      if (pattern.test(key)) {\r\n        return true;\r\n      } else {\r\n        event.preventDefault();\r\n        return false;\r\n      }\r\n    }else{\r\n      return true;\r\n    }\r\n  }\r\n\r\n  initVariables() {\r\n    for (let i in FilterKeysForActivePatient) {\r\n      this.filterStrings.push({ text: FilterKeysForActivePatient[i], value: i });\r\n    }\r\n  }\r\n\r\n  fetchTableData() {\r\n    this.getActivePatientData();\r\n  }\r\n  isSelected(row: ActivePatient, selection: SelectionModel<any>) {\r\n    return selection.selected.map(s => s.patientId).includes(row.patientId);\r\n  }\r\n\r\n  isClinicianCheck() {\r\n    let role = this.authService.getRoles();\r\n    return role.indexOf(\"GC\") > -1;\r\n  }\r\n\r\n  isGcorScCheck () {\r\n    let role = this.authService.getRoles();\r\n    return role.indexOf(\"GC\") > -1 || role.indexOf(\"SC\") > -1;\r\n  }\r\n\r\n  getActivePatientData() {\r\n    if (!this.config.sort.active || !this.config.sort.direction) {\r\n      this.config.sort.active = \"patientid\";\r\n      this.config.sort.direction = \"desc\";\r\n    }\r\n    this.manager.getActivePatient(this.service.actvePatientsUrl(this.config, this.searchObject, this.filterObject));\r\n  }\r\n\r\n  onPageChange(event: PageEvent) {\r\n    this.config = {\r\n      ...this.config,\r\n      page: {\r\n        ...this.config.page,\r\n        pageIndex: event.pageIndex,\r\n        pageSize: event.pageSize\r\n      }\r\n    }\r\n    this.fetchTableData();\r\n  }\r\n\r\n  onPatientsSelected(e: SelectionModel<ActivePatient>) {\r\n    this.selectedPatients = e;\r\n    const selected = new Set(e.selected.map((pat) => pat.patientId));\r\n    for (const { patientId } of this.activePatients) {\r\n      if (selected.has(patientId)) {\r\n        this.selectedIds.add(patientId);\r\n      } else if (this.selectedIds.has(patientId)) {\r\n        this.selectedIds.delete(patientId);\r\n      }\r\n    }\r\n  }\r\n\r\n  onSortChange(event: Sort) {\r\n    let activeKey = (event.active === 'patient_id') ? 'first_name' :\r\n                    (event.active === 'prescribing_physician') ? 'prescriber_user_name' : \r\n                    (event.active === 'location') ? 'location':\r\n                    (event.active === 'report_time') ? 'report_time':\r\n                    (event.active === 'interpreter') ? 'final_approver_id':\r\n                    (event.active === 'prelim_interpreter') ? 'pri_approver_id': \r\n                    (event.active === 'report_type') ? 'report_type': \"\";\r\n    this.config = {\r\n      ...this.config,\r\n      sort: {\r\n        active: activeKey,\r\n        direction: event.direction\r\n      }\r\n    }\r\n    this.selectedPatients.clear();\r\n    this.fetchTableData();\r\n  }\r\n\r\n  //This function is used to open add event dialog \r\n  addNewEvent(patient:any) {\r\n    console.log(patient?.patientId)\r\n    console.log(patient?.patchIds[0]?.startTime)\r\n    const addEvent = this.dialog.open(AddEventComponent, {\r\n      width: \"600px\",\r\n      maxWidth: \"96vw\",\r\n      height: \"100%\",\r\n      maxHeight:\"100vh\",\r\n      panelClass: \"add-event-container\",\r\n      //maxHeight: \"95vh\",\r\n      //height: \"530px\",\r\n       data: {patientId: patient?.patientId, patchStarted:patient?.patchIds[0]?.startTime },\r\n      disableClose: true,\r\n    });\r\n  }\r\n\r\n  alertSettings(selectedPatient:ActivePatient) {\r\n    const dailogRef = this.dialog.open(NotificationsComponent, {\r\n      //adding same width as history popup\r\n      width: \"1300px\",\r\n      maxWidth: \"98%\",\r\n      height: \"100%\",\r\n      maxHeight:\"100vh\",\r\n      panelClass:[\"alertcontainer-modal\", \"alertcontainer\" ],\r\n      //height: \"530px\",\r\n      //panelClass: \"alertcontainer\",\r\n      data: { patientData: { ...selectedPatient, addEvent: false }, selectedTab: 'parameterAlerts' },\r\n      disableClose: true,\r\n    });\r\n  }\r\n\r\n  //  /**This function is used to open Discharge Patient dialog */\r\n\r\n  getThirdPartyDevices(list) {\r\n    if (list?.length > 0) {\r\n      let deviceIds = \"\";\r\n      list.forEach((element) => {\r\n        if (element?.deviceId) {\r\n          deviceIds = deviceIds\r\n            ? deviceIds + \", \" + element.deviceId\r\n            : element.deviceId;\r\n        }\r\n      });\r\n      if (deviceIds !== \"\") {\r\n        return deviceIds;\r\n      } else {\r\n        return \"-\";\r\n      }\r\n    } else {\r\n      return \"-\";\r\n    }\r\n  }\r\n\r\n  // /**This function is used to open dialog */\r\n\r\n  getGroupDetails() {\r\n    this.manageGroupService.fetch().subscribe(groups => {\r\n      if (groups['data'].length > 0) {\r\n        this.groupsData$.next(groups['data']);\r\n\r\n      }\r\n    })\r\n  }\r\n  isScOrGc() {\r\n    let role = this.authService.getRoles();\r\n    return (role.indexOf(\"GC\") > -1 || role.indexOf(\"SC\") > -1)\r\n  }\r\n  ngOnDestroy() {\r\n    clearInterval(this.reloadInterval);\r\n    this.activePatientsSub?.unsubscribe();\r\n  }\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, of, throwError } from \"rxjs\";\r\nimport { catchError, map } from \"rxjs/operators\";\r\nimport { LSTableConfig } from \"src/app/life-signals/_models/ls-column.model\";\r\nimport { Group } from \"src/app/manage-group/models/manage-groups.model\";\r\nimport { ManageGroupsService } from \"src/app/manage-group/services/manage-groups.service\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport {\r\n  ActivePatient,\r\n  DOCTORS,\r\n  NewPatient,\r\n  UnassignedPatient,\r\n} from \"../models/pending-interpretation.model\";\r\nimport { BackendApiService } from \"@services/backendapi.service\";\r\nimport { Patient } from \"src/app/shared/shared.interface\";\r\nimport { env } from \"process\";\r\n\r\n@Injectable()\r\nexport class ActivePatientsService {\r\n  BASE_URL: string = environment.dataApiUrl;\r\n  URL:string=environment.dataApiUrl2;\r\n  http: HttpClient\r\n  constructor(\r\n    private manageGroupService: ManageGroupsService,\r\n    private backendApiService: BackendApiService) {\r\n    this.http = backendApiService.httpClient;\r\n  }\r\n  getAll(url) {\r\n    if (url) {\r\n      let base_url = (environment.integ) ? environment.dataApiUrl2 : environment.dataApiUrl;\r\n      //let iurl = (environment.integ) ? 'current_patient' : url; \r\n      let iurl = url;\r\n      let apiURL = `${base_url}${iurl}`;\r\n      return this.http\r\n        .get<ActivePatient[]>(apiURL)\r\n        .pipe(catchError(this.handleError));\r\n    } else {\r\n      return of(null);\r\n    }\r\n  }\r\n\r\n  savePatient(data) {\r\n    // let url = this.BASE_URL + \"patients/\";\r\n    let url = this.BASE_URL + \"patient_register/\";\r\n    return this.http\r\n      .post<NewPatient>(url, data.payload)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  updatePatient(obj) {\r\n    let url = this.BASE_URL + \"patients/\";\r\n    return this.http\r\n      .put<{ data: NewPatient }>(url, obj.payload)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n  getAutogeneratedPatientId() {\r\n    let url = this.BASE_URL + 'patients/generate-id';\r\n    return this.http.post(url, '').pipe(catchError(this.handleError));\r\n  }\r\n\r\n  stopProcedure(patientId) {\r\n    let url = this.BASE_URL + `patients/${patientId}/stop-procedure`;\r\n    return this.http\r\n      .post<NewPatient>(url, \"\")\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  dischargePatient(patientId) {\r\n    patientId = encodeURIComponent(patientId);\r\n    let url = this.BASE_URL + `patients/${patientId}/discharge`;\r\n    return this.http\r\n      .post<NewPatient>(url, \"\")\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getDoctorsList() {\r\n    // let url = this.BASE_URL + \"clinical-facilities/physicians?size=2000\";\r\n    let url = this.URL+`drop_down_user/CFPI8P?role=prescriber`;\r\n    return this.http.get<DOCTORS[]>(url).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getDoctorBy(id) {\r\n    let url = this.BASE_URL + \"clinical-facilities/physicians?Id=\" + id;\r\n    return this.http.get<any>(url).pipe(catchError(this.handleError));\r\n  }\r\n\r\n  handleError(error: any) {\r\n    if (error.errorMessage) {\r\n      return throwError(error.errorMessage);\r\n    } else {\r\n      return throwError(`Error: ${error}`);\r\n    }\r\n  }\r\n\r\n  setSelectedPatientIds(ids: string[]) {\r\n    return of(ids);\r\n  }\r\n\r\n  setSelectedTab(tab: string) {\r\n    return of(tab);\r\n  }\r\n\r\n  getUnassignedPatients(url) {\r\n    if (url) {\r\n      let apiURL = `${this.BASE_URL}${url}`;\r\n      return this.http\r\n        .get<UnassignedPatient[]>(apiURL)\r\n        .pipe(catchError(this.handleError));\r\n    } else {\r\n      return of(undefined);\r\n    }\r\n  }\r\n\r\n  getPatientBy(id) {\r\n    id = encodeURIComponent(id);\r\n    let apiURL = `${this.BASE_URL}patients/${id}`;\r\n    return this.http\r\n      .get<{ data: ActivePatient }>(apiURL)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  private cGroup$: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\r\n  groups$: Observable<any[]> = this.cGroup$.asObservable();\r\n\r\n  getCGroups(): Observable<Group[]> {\r\n    if (this.cGroup$.getValue()) {\r\n      return this.cGroup$.asObservable();\r\n    } else {\r\n      return this.manageGroupService.fetch()\r\n        .pipe(map(groups => {\r\n          if (groups['data']?.length > 0) {\r\n            this.cGroup$.next(groups['data']);\r\n          }\r\n          return groups['data'] || [];\r\n        }));\r\n    }\r\n  }\r\n\r\n  unassignedPatientsUrl(config: LSTableConfig, searchObject) {\r\n    return `patches/unassigned?&page=${config.page.pageIndex + 1}&size=${config.page.pageSize}&${searchObject?.keyword?.toLowerCase()}=${searchObject?.string}`;\r\n  }\r\n\r\n  actvePatientsUrl(config: LSTableConfig, searchObject, filterObject) {\r\n    let searchString = encodeURIComponent(searchObject.string)\r\n    // let url = `patients/?sortBy=${config.sort.active}:${config.sort.direction}&isDischarged=false&page=${config.page.pageIndex + 1}&size=${config.page.pageSize}`;\r\n    // let url = `current_patient/?offset=${config.page.pageIndex+1}&limit=${config.page.pageSize}`;\r\n    // let url = `pending_interpretation?page=1&order=asc&limit=10`;\r\n    let url = `pending_interpretation/?page=${config.page.pageIndex + 1}&limit=${config.page.pageSize}&sort=${config.sort.active}&order=${config.sort.direction}`;\r\n    // let url = \"patient_details\"\r\n    if (searchObject?.keyword && searchString) {\r\n      url = url + `&${searchObject?.keyword?.toLowerCase()}=${searchString}`;\r\n    }\r\n    if (filterObject?.cGroupId) {\r\n      url = url + `&cGroupId=${filterObject?.cGroupId}`;\r\n    }\r\n    if (filterObject?.pGroupId) {\r\n      url = url + `&pGroupId=${filterObject?.pGroupId}`;\r\n    }\r\n    if(filterObject?.doctor)\r\n    {\r\n      url = url + `&fk_prescriber=647889e02bec4eb7b2120a2b`;\r\n    }\r\n    return url;\r\n  }\r\n \r\n  getClinicalGroups(location: string) {\r\n    return this.groups$.pipe(map((groups: any[]) => {\r\n      return groups.filter(g => g.type === location);\r\n    }));\r\n  }\r\n\r\n  assignGroup(ob) {\r\n    let url = this.BASE_URL + \"patients/assign-group\";\r\n    return this.http.post<Group>(url, ob.payload).pipe(catchError(this.handleError));\r\n  }\r\n  getPanelDetails(panelId: string): Promise<Array<Patient>> {\r\n    return new Promise((resolve, reject) => {\r\n      const apiUrl = this.BASE_URL + 'dashboard/panels/';\r\n      this.backendApiService.getMapping(apiUrl + panelId)\r\n        .then(response => {\r\n          const data = response?.data?.patients;\r\n          if (data) {\r\n            const patientsArr = data.map((patient) => ({\r\n              patchId: patient?.patchId,\r\n              patientId: patient?.patientId,\r\n              doctorId: patient?.doctorId,\r\n              firstName: patient?.firstName,\r\n              lastName: patient?.lastName,\r\n              age: patient?.age,\r\n              cGroup: patient?.cGroup,\r\n              pGroup: patient?.pGroup,\r\n              sex: patient?.gender,\r\n              created: new Date(patient?.stTime * 1000)\r\n            }));\r\n            resolve(patientsArr);\r\n          }\r\n        }).catch(reject);\r\n    });\r\n  }\r\n  generateAdmissionId() {\r\n    let url = this.BASE_URL + \"patients/admissions/generate-id\";\r\n    return this.http.post(url, \"\").pipe(catchError(this.handleError));\r\n  }\r\n  searchPatient(id) {\r\n    id = encodeURIComponent(id);\r\n    let apiURL = this.BASE_URL + `patients/details/search?page=1&size=5&sortBy=PatientID:desc&PatientID=${id}`;\r\n    return this.http\r\n      .get(apiURL)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n  stopMonitoringUnassigned(patchIds) {\r\n    let url = this.BASE_URL + `patches/stop-procedure/bulk`;\r\n    let body = {\r\n      \"patchIdList\": patchIds\r\n    }\r\n    return this.http\r\n      .post<NewPatient>(url, body)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n  deletePatch(patchId) {\r\n    let url = this.BASE_URL + `patches/unassigned/${patchId}`;\r\n    return this.http.delete<any>(url).pipe(catchError(this.handleError));\r\n  }\r\n  transferRelay(patchId) {\r\n    let url = this.BASE_URL + `patients/relay-transfer/${patchId}`;\r\n    return this.http\r\n      .post<NewPatient>(url, {})\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n}\r\n\r\n\r\n","import { Action } from \"@ngrx/store\";\r\nimport {\r\n  ActivePatient,\r\n  AssignGroup,\r\n  DOCTORS,\r\n  NewPatient,\r\n  UnassignedPatient,\r\n} from \"../models/pending-interpretation.model\";\r\n\r\nexport enum ActionTypes {\r\n  LOAD_ACTIVE_PATIENTS_REQUEST = \"[ACTIVEPATIENTS] Load active patients request\",\r\n  LOAD_ACTIVE_PATIENTS_FAILURE = \"[ACTIVEPATIENTS] Load active patients Failure\",\r\n  LOAD_ACTIVE_PATIENTS_SUCCESS = \"[ACTIVEPATIENTS] Load active patients Success\",\r\n\r\n  LOAD_UNASSIGNED_PATIENTS_REQUEST = \"[UNASSIGNEDPATIENTS] Load unassigned patients request\",\r\n  LOAD_UNASSIGNED_PATIENTS_FAILURE = \"[UNASSIGNEDPATIENTS] Load unassigned patients Failure\",\r\n  LOAD_UNASSIGNED_PATIENTS_SUCCESS = \"[UNASSIGNEDPATIENTS] Load unassigned patients Success\",\r\n\r\n  LOAD_DOCTORS_LIST_REQUEST = \"[DOCTORS] Load doctors list request\",\r\n  LOAD_DOCTORS_LIST_FAILURE = \"[DOCTORS] Load doctors list Failure\",\r\n  LOAD_DOCTORS_LIST_SUCCESS = \"[DOCTORS] Load doctors list Success\",\r\n\r\n  CREATE_NEW_PATIENT_REQUEST = \"[ACTIVEPATIENTS] Create new patient request\",\r\n  CREATE_NEW_PATIENT_FAILURE = \"[ACTIVEPATIENTS] Create new patient Failure\",\r\n  CREATE_NEW_PATIENT_SUCCESS = \"[ACTIVEPATIENTS] Create new patient Success\",\r\n\r\n  UPDATE_PATIENT_REQUEST = \"[ACTIVEPATIENTS] Update patient request\",\r\n  UPDATE_PATIENT_FAILURE = \"[ACTIVEPATIENTS] Update patient Failure\",\r\n  UPDATE_PATIENT_SUCCESS = \"[ACTIVEPATIENTS] Update patient Success\",\r\n\r\n  ASSIGN_GROUP_REQUEST = \"[ASSIGNGROUP] assign group request\",\r\n  ASSIGN_GROUP_FAILURE = \"[ASSIGNGROUP] assign group Failure\",\r\n  ASSIGN_GROUP_SUCCESS = \"[ASSIGNGROUP] assign group Success\",\r\n\r\n  DISCHARGE_PATIENT_REQUEST = \"[ACTIVEPATIENTS] DISCHARGE patient request\",\r\n  DISCHARGE_PATIENT_FAILURE = \"[ACTIVEPATIENTS] DISCHARGE patient Failure\",\r\n  DISCHARGE_PATIENT_SUCCESS = \"[ACTIVEPATIENTS] DISCHARGE patient Success\",\r\n\r\n  STOP_MONITORING_REQUEST = \"[ACTIVEPATIENTS] Stop Monitoring patient request\",\r\n  STOP_MONITORING_FAILURE = \"[ACTIVEPATIENTS] Stop Monitoring patient Failure\",\r\n  STOP_MONITORING_SUCCESS = \"[ACTIVEPATIENTS] Stop Monitoring patient Success\",\r\n\r\n  SET_SELECTED_PATIENTS_IDs_REQUEST = \"[ACTIVEPATIENTS] Set selected patient ids request\",\r\n  SET_SELECTED_PATIENTS_IDs_FAILURE = \"[ACTIVEPATIENTS] Set selected patient ids Failure\",\r\n  SET_SELECTED_PATIENTS_IDs_SUCCESS = \"[ACTIVEPATIENTS] Set selected patient ids Success\",\r\n\r\n  SET_SELECTED_TAB_REQUEST = \"[TableTab] Set selected patient ids request\",\r\n  SET_SELECTED_TAB_FAILURE = \"[TableTab] Set selected patient ids Failure\",\r\n  SET_SELECTED_TAB_SUCCESS = \"[TableTab] Set selected patient ids Success\",\r\n}\r\n\r\nexport class LoadActivePatientsRequestAction implements Action {\r\n  readonly type = ActionTypes.LOAD_ACTIVE_PATIENTS_REQUEST;\r\n  constructor(public payload: { url: string }) {}\r\n}\r\n\r\nexport class LoadActivePatientsFailureAction implements Action {\r\n  readonly type = ActionTypes.LOAD_ACTIVE_PATIENTS_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class LoadActivePatientsSuccessAction implements Action {\r\n  readonly type = ActionTypes.LOAD_ACTIVE_PATIENTS_SUCCESS;\r\n  constructor(\r\n    public payload: { data: { patients: ActivePatient[]; total: number } }\r\n  ) {}\r\n}\r\n\r\nexport class LoadUnassignedPatientsRequestAction implements Action {\r\n  readonly type = ActionTypes.LOAD_UNASSIGNED_PATIENTS_REQUEST;\r\n  constructor(public payload: { url: string }) {}\r\n}\r\n\r\nexport class LoadUnassignedPatientsFailureAction implements Action {\r\n  readonly type = ActionTypes.LOAD_UNASSIGNED_PATIENTS_FAILURE;\r\n  constructor(public payload: { error: any }) {}\r\n}\r\n\r\nexport class LoadUnassignedPatientsSuccessAction implements Action {\r\n  readonly type = ActionTypes.LOAD_UNASSIGNED_PATIENTS_SUCCESS;\r\n  constructor(\r\n    public payload: { data:{ items : UnassignedPatient[]; total: number } }\r\n  ) {}\r\n}\r\n\r\nexport class LoadDoctorsListRequestAction implements Action {\r\n  readonly type = ActionTypes.LOAD_DOCTORS_LIST_REQUEST;\r\n}\r\n\r\nexport class LoadDoctorsListFailureAction implements Action {\r\n  readonly type = ActionTypes.LOAD_DOCTORS_LIST_FAILURE;\r\n  constructor(public payload: { error: any }) {}\r\n}\r\n\r\nexport class LoadDoctorsListSuccessAction implements Action {\r\n  readonly type = ActionTypes.LOAD_DOCTORS_LIST_SUCCESS;\r\n  constructor(public payload: { doctors: DOCTORS[] }) {}\r\n}\r\n\r\nexport class CreateNewPatientRequestAction implements Action {\r\n  readonly type = ActionTypes.CREATE_NEW_PATIENT_REQUEST;\r\n  constructor(public payload: NewPatient) {}\r\n}\r\n\r\nexport class CreateNewPatientFailureAction implements Action {\r\n  readonly type = ActionTypes.CREATE_NEW_PATIENT_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class CreateNewPatientSuccessAction implements Action {\r\n  readonly type = ActionTypes.CREATE_NEW_PATIENT_SUCCESS;\r\n  constructor(public payload: { newPatient: NewPatient }) {}\r\n}\r\n\r\nexport class UpdatePatientRequestAction implements Action {\r\n  readonly type = ActionTypes.UPDATE_PATIENT_REQUEST;\r\n  constructor(public payload: NewPatient) {}\r\n}\r\n\r\nexport class UpdatePatientFailureAction implements Action {\r\n  readonly type = ActionTypes.UPDATE_PATIENT_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class UpdatePatientSuccessAction implements Action {\r\n  readonly type = ActionTypes.UPDATE_PATIENT_SUCCESS;\r\n  constructor(public payload: { updatedData: NewPatient }) {}\r\n}\r\n\r\nexport class AssignGroupRequestAction implements Action {\r\n  readonly type = ActionTypes.ASSIGN_GROUP_REQUEST;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AssignGroupFailureAction implements Action {\r\n  readonly type = ActionTypes.ASSIGN_GROUP_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class AssignGroupSuccessAction implements Action {\r\n  readonly type = ActionTypes.ASSIGN_GROUP_SUCCESS;\r\n  constructor(public payload: { updatedData: any }) {}\r\n}\r\n\r\nexport class DischargePatientRequestAction implements Action {\r\n  readonly type = ActionTypes.DISCHARGE_PATIENT_REQUEST;\r\n  constructor(public payload: NewPatient) {}\r\n}\r\n\r\nexport class DischargePatientFailureAction implements Action {\r\n  readonly type = ActionTypes.DISCHARGE_PATIENT_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class DischargePatientSuccessAction implements Action {\r\n  readonly type = ActionTypes.DISCHARGE_PATIENT_SUCCESS;\r\n  constructor(public payload: { dischargedPatient: NewPatient }) {}\r\n}\r\n\r\nexport class StopMonitoringRequestAction implements Action {\r\n  readonly type = ActionTypes.STOP_MONITORING_REQUEST;\r\n  constructor(public payload: NewPatient) {}\r\n}\r\n\r\nexport class StopMonitoringFailureAction implements Action {\r\n  readonly type = ActionTypes.STOP_MONITORING_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class StopMonitoringSuccessAction implements Action {\r\n  readonly type = ActionTypes.STOP_MONITORING_SUCCESS;\r\n  constructor(public payload: { patient: NewPatient }) {}\r\n}\r\n\r\nexport class SetSelectedPatientIdsRequestAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_PATIENTS_IDs_REQUEST;\r\n  constructor(public payload: string[]) {}\r\n}\r\n\r\nexport class SetSelectedPatientIdsFailureAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_PATIENTS_IDs_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class SetSelectedPatientIdsSuccessAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_PATIENTS_IDs_SUCCESS;\r\n  constructor(public payload: { patientIds: string[] }) {}\r\n}\r\n\r\nexport class SetSelectedTabRequestAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_TAB_REQUEST;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class SetSelectedTabFailureAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_TAB_FAILURE;\r\n  constructor(public payload: { error: string }) {}\r\n}\r\n\r\nexport class SetSelectedTabSuccessAction implements Action {\r\n  readonly type = ActionTypes.SET_SELECTED_TAB_SUCCESS;\r\n  constructor(public payload: { selectedTab: string }) {}\r\n}\r\n\r\nexport type ActivePatientsActions =\r\n  | LoadActivePatientsFailureAction\r\n  | LoadActivePatientsRequestAction\r\n  | LoadActivePatientsSuccessAction\r\n  | LoadDoctorsListFailureAction\r\n  | LoadDoctorsListRequestAction\r\n  | LoadDoctorsListSuccessAction\r\n  | CreateNewPatientFailureAction\r\n  | CreateNewPatientRequestAction\r\n  | CreateNewPatientSuccessAction\r\n  | UpdatePatientRequestAction\r\n  | UpdatePatientFailureAction\r\n  | UpdatePatientSuccessAction\r\n  | DischargePatientRequestAction\r\n  | DischargePatientFailureAction\r\n  | DischargePatientSuccessAction\r\n  | StopMonitoringFailureAction\r\n  | StopMonitoringRequestAction\r\n  | StopMonitoringSuccessAction\r\n  | SetSelectedPatientIdsFailureAction\r\n  | SetSelectedPatientIdsRequestAction\r\n  | SetSelectedPatientIdsSuccessAction\r\n  | LoadUnassignedPatientsRequestAction\r\n  | LoadUnassignedPatientsFailureAction\r\n  | LoadUnassignedPatientsSuccessAction\r\n  | SetSelectedTabRequestAction\r\n  | SetSelectedTabFailureAction\r\n  | SetSelectedTabSuccessAction\r\n  | AssignGroupFailureAction\r\n  | AssignGroupRequestAction\r\n  | AssignGroupSuccessAction;\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Observable, of as observableOf, of } from \"rxjs\";\r\nimport { catchError, map, startWith, mergeMap, switchMap } from \"rxjs/operators\";\r\nimport { ActivePatientsService } from \"../services/pending-interpretation.service\";\r\nimport * as featureActions from \"./pending-interpretation.actions\";\r\n\r\n@Injectable()\r\nexport class ActivePatientsEffects {\r\n  constructor(\r\n    private activePatientsService: ActivePatientsService,\r\n    private actions$: Actions\r\n  ) { }\r\n\r\n  loadActivePatientsRequestEffect$: Observable<Action> = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.LoadActivePatientsRequestAction>(\r\n        featureActions.ActionTypes.LOAD_ACTIVE_PATIENTS_REQUEST\r\n      ),\r\n      mergeMap((action) =>\r\n        this.activePatientsService.getAll(action.payload.url).pipe(\r\n          map(\r\n            (response: any) =>\r\n              new featureActions.LoadActivePatientsSuccessAction({\r\n                data: {\r\n                  patients: response?.data?.items,\r\n                  total: response?.data?.total,\r\n                },\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.LoadActivePatientsFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadUnAssignedPatientsRequestEffect$: Observable<Action> = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.LoadUnassignedPatientsRequestAction>(\r\n        featureActions.ActionTypes.LOAD_UNASSIGNED_PATIENTS_REQUEST\r\n      ),\r\n      mergeMap((action) =>\r\n        this.activePatientsService.getUnassignedPatients(action.payload.url).pipe(\r\n          map(\r\n            (response: any) => new featureActions.LoadUnassignedPatientsSuccessAction({\r\n              data: {\r\n                items: response?.data?.items,\r\n                total: response?.data?.total,\r\n              },\r\n            })),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.LoadUnassignedPatientsFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadDoctorsRequestEffect$: Observable<Action> = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.LoadDoctorsListRequestAction>(\r\n        featureActions.ActionTypes.LOAD_DOCTORS_LIST_REQUEST\r\n      ),\r\n      startWith(new featureActions.LoadDoctorsListRequestAction()),\r\n      mergeMap((action) =>\r\n        this.activePatientsService.getDoctorsList().pipe(\r\n          map(\r\n            (doctors) =>\r\n              new featureActions.LoadDoctorsListSuccessAction({ doctors })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.LoadDoctorsListFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  createNewPatientEffects$: Observable<Action> = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.CreateNewPatientRequestAction>(\r\n        featureActions.ActionTypes.CREATE_NEW_PATIENT_REQUEST\r\n      ),\r\n      // startWith(new featureActions.createNewPatientRequestAction()),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.savePatient(data)\r\n          .pipe(\r\n            map(\r\n              (newPatient) =>\r\n                new featureActions.CreateNewPatientSuccessAction({ newPatient })\r\n            ),\r\n            catchError((error) =>\r\n              observableOf(\r\n                new featureActions.CreateNewPatientFailureAction({ error })\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  updatePatientEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.UpdatePatientRequestAction>(\r\n        featureActions.ActionTypes.UPDATE_PATIENT_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.updatePatient(data).pipe(\r\n          map(\r\n            (response) =>\r\n              new featureActions.UpdatePatientSuccessAction({ updatedData: response.data })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.UpdatePatientFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  updatePatientGroupEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.AssignGroupRequestAction>(\r\n        featureActions.ActionTypes.ASSIGN_GROUP_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.assignGroup(data).pipe(\r\n          map(\r\n            (response) =>\r\n              new featureActions.AssignGroupSuccessAction({ updatedData: response })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.AssignGroupFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  stopMonitoringEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.StopMonitoringRequestAction>(\r\n        featureActions.ActionTypes.STOP_MONITORING_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.stopProcedure(data.payload).pipe(\r\n          map(\r\n            (patient) =>\r\n              new featureActions.StopMonitoringSuccessAction({ patient })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.StopMonitoringFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  dischargePatientEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.DischargePatientRequestAction>(\r\n        featureActions.ActionTypes.DISCHARGE_PATIENT_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.dischargePatient(data.payload).pipe(\r\n          map(\r\n            (dischargedPatient) =>\r\n              new featureActions.DischargePatientSuccessAction({\r\n                dischargedPatient,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.DischargePatientFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  setSelectedPatientIdsEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.SetSelectedPatientIdsRequestAction>(\r\n        featureActions.ActionTypes.SET_SELECTED_PATIENTS_IDs_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.setSelectedPatientIds(data.payload).pipe(\r\n          map(\r\n            (patientIds) =>\r\n              new featureActions.SetSelectedPatientIdsSuccessAction({\r\n                patientIds,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.SetSelectedPatientIdsFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  setSelectedtabEffects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<featureActions.SetSelectedTabRequestAction>(\r\n        featureActions.ActionTypes.SET_SELECTED_TAB_REQUEST\r\n      ),\r\n      mergeMap((data) =>\r\n        this.activePatientsService.setSelectedTab(data.payload).pipe(\r\n          map(\r\n            (selectedTab) =>\r\n              new featureActions.SetSelectedTabSuccessAction({\r\n                selectedTab,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            observableOf(\r\n              new featureActions.SetSelectedTabFailureAction({ error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n","import { TableState } from \"src/app/life-signals/_models/ls-column.model\";\r\nimport {\r\n  ActivePatient,\r\n  NewPatient,\r\n  DOCTORS,\r\n  UnassignedPatient,\r\n  ActivePatientsTabs,\r\n} from \"../models/pending-interpretation.model\";\r\nimport { ActivePatientsActions, ActionTypes } from \"./pending-interpretation.actions\";\r\n\r\nexport interface State {\r\n  ACTIVE_PATIENTS_DATA?: ActivePatient[];\r\n  UNASSIGNED_PATIENTS_DATA?: UnassignedPatient[];\r\n  PATIENT?: NewPatient;\r\n  DOCTORS?: DOCTORS[];\r\n  error?: any;\r\n  PATIENT_IDS?: string[];\r\n  SELECTED_TAB?: string;\r\n  tableState?: string;\r\n  addEditState?: string;\r\n  total?: number;\r\n  unassignedPatients_total ?: number;\r\n}\r\n\r\nconst initialActivePatientState: State = {\r\n  ACTIVE_PATIENTS_DATA: [],\r\n  UNASSIGNED_PATIENTS_DATA: [],\r\n  PATIENT: null,\r\n  DOCTORS: [],\r\n  error: \"\",\r\n  PATIENT_IDS: null,\r\n  SELECTED_TAB: ActivePatientsTabs.ACTIVE_PATIENT,\r\n  tableState: TableState.DEFAULT,\r\n  addEditState: TableState.DEFAULT,\r\n  total: 0,\r\n  unassignedPatients_total:0\r\n};\r\n\r\nexport const patientsFeatureKey = \"patient\";\r\n\r\nexport function ActivePatientsReducer(\r\n  state: State = initialActivePatientState,\r\n  action: ActivePatientsActions\r\n) {\r\n  switch (action.type) {\r\n    case ActionTypes.LOAD_ACTIVE_PATIENTS_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_ACTIVE_PATIENTS_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        //ACTIVE_PATIENTS_DATA: [],\r\n        tableState: TableState.FAILURE,\r\n        total: 0\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_ACTIVE_PATIENTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        ACTIVE_PATIENTS_DATA: action.payload[\"data\"].patients,\r\n        tableState: TableState.SUCCESS,\r\n        total: action.payload[\"data\"].total\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_UNASSIGNED_PATIENTS_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_UNASSIGNED_PATIENTS_FAILURE: {\r\n      return {\r\n        ...state,\r\n        tableState: TableState.FAILURE,\r\n        UNASSIGNED_PATIENTS_DATA: [],\r\n        error: action.payload.error,\r\n        unassignedPatients_total: 0\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_UNASSIGNED_PATIENTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        UNASSIGNED_PATIENTS_DATA: action.payload[\"data\"].items,\r\n        tableState: TableState.SUCCESS,\r\n        unassignedPatients_total: action.payload[\"data\"].total,\r\n        error: null\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_DOCTORS_LIST_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        //tableState: TableState.LOADING,\r\n        DOCTORS: []\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_DOCTORS_LIST_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.LOAD_DOCTORS_LIST_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        DOCTORS: action.payload[\"doctors\"][\"data\"],\r\n      };\r\n    }\r\n\r\n    case ActionTypes.CREATE_NEW_PATIENT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        PATIENT : null,\r\n        error: null,\r\n        addEditState: TableState.DEFAULT,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.CREATE_NEW_PATIENT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        addEditState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.CREATE_NEW_PATIENT_SUCCESS: {\r\n      return {\r\n      ...state,\r\n      PATIENT: action.payload[\"newPatient\"][\"data\"],\r\n      ACTIVE_PATIENTS_DATA: [\r\n          ...state.ACTIVE_PATIENTS_DATA,\r\n          action.payload[\"newPatient\"][\"data\"]\r\n        ],\r\n        total: state?.total + 1,\r\n        addEditState: TableState.SUCCESS,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.UPDATE_PATIENT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        addEditState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.UPDATE_PATIENT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        addEditState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.UPDATE_PATIENT_SUCCESS: {\r\n      let resp: ActivePatient[] = [];\r\n      if (state.SELECTED_TAB === ActivePatientsTabs.ASSIGN_PATIENT && action.payload[\"updatedData\"][\"data\"]) {\r\n        resp = state.ACTIVE_PATIENTS_DATA;\r\n      } else if (state.SELECTED_TAB === ActivePatientsTabs.ACTIVE_PATIENT) {\r\n        resp = state.ACTIVE_PATIENTS_DATA?.map((x) => {\r\n          if (x?.patientId === ((action.payload[\"updatedData\"][\"data\"] !== undefined) ? action.payload[\"updatedData\"][\"data\"][\"patientId\"] : action.payload[\"updatedData\"][\"patientId\"])) {\r\n            x = (action.payload[\"updatedData\"][\"data\"] !== undefined) ? action.payload[\"updatedData\"][\"data\"] : action.payload[\"updatedData\"];\r\n            return x;\r\n          } else {\r\n            return x;\r\n          }\r\n        })\r\n      }\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        addEditState: TableState.SUCCESS,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.STOP_MONITORING_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.STOP_MONITORING_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.STOP_MONITORING_SUCCESS: {\r\n\r\n      return {\r\n        ...state,\r\n        ACTIVE_PATIENTS_DATA: state.ACTIVE_PATIENTS_DATA?.map((x) => {\r\n          if (x && x[\"patientId\"] === action.payload[\"patient\"][\"data\"]) {\r\n            x.biosensorStatus = \"STOPPED\";\r\n            return x;\r\n          } else {\r\n            return x;\r\n          }\r\n        }),\r\n        tableState: TableState.SUCCESS,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_PATIENTS_IDs_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_PATIENTS_IDs_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_PATIENTS_IDs_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        PATIENT_IDS: action.payload[\"patientIds\"],\r\n        tableState: TableState.SUCCESS,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_TAB_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_TAB_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.SET_SELECTED_TAB_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        SELECTED_TAB: action.payload[\"selectedTab\"],\r\n        tableState: TableState.SUCCESS,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.ASSIGN_GROUP_REQUEST: {\r\n      console.log(state);\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.ASSIGN_GROUP_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.ASSIGN_GROUP_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.DISCHARGE_PATIENT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        tableState: TableState.LOADING,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.DISCHARGE_PATIENT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        tableState: TableState.FAILURE,\r\n      };\r\n    }\r\n\r\n    case ActionTypes.DISCHARGE_PATIENT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        ACTIVE_PATIENTS_DATA: state?.ACTIVE_PATIENTS_DATA?.filter(\r\n        (x) => {\r\n        if (x.patientId !== action.payload[\"dischargedPatient\"][\"data\"]) {\r\n        return x;\r\n        }\r\n        }\r\n        ),\r\n        total: state?.total - 1,\r\n        tableState: TableState.SUCCESS,\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\r\nimport { State, patientsFeatureKey } from \"./pending-interpretation.reducer\";\r\n\r\nconst getPatientState = createFeatureSelector<State>(patientsFeatureKey);\r\n\r\nexport const selectActivePatientsList = createSelector(\r\n  getPatientState,\r\n  (state) => {\r\n    return {\r\n      ...state,\r\n      error: state?.error,\r\n      tableState: state?.tableState\r\n    }\r\n  }\r\n);\r\n\r\nexport const selectUnassignedPatientsList = createSelector(\r\n  getPatientState,\r\n  (state) => {\r\n    return {\r\n      ...state,\r\n      error: state?.error,\r\n      tableState: state?.tableState\r\n    }\r\n  }\r\n);\r\n\r\nexport const selectActivePatientsError = createSelector(\r\n  getPatientState,\r\n  (state) => state?.error\r\n);\r\n\r\nexport const createNewPatient = createSelector(\r\n  getPatientState,\r\n  (state) => {\r\n    return{\r\n      PATIENT : state?.PATIENT,\r\n      error : state?.error,\r\n      addEditState: state?.addEditState\r\n    }\r\n  }\r\n);\r\n\r\nexport const updatePatient = createSelector(\r\n  getPatientState,\r\n  (state) => state.PATIENT\r\n);\r\n\r\nexport const assignGroupPatient = createSelector(\r\n  getPatientState,\r\n  (state) => state.PATIENT\r\n);\r\n\r\nexport const dischargePatient = createSelector(\r\n  getPatientState,\r\n  (state) => state.PATIENT\r\n);\r\n\r\nexport const stopMonitoring = createSelector(\r\n  getPatientState,\r\n  (state) => state.PATIENT\r\n);\r\n\r\nexport const doctorsList = createSelector(\r\n  getPatientState,\r\n  (state) => state?.DOCTORS\r\n);\r\n\r\nexport const getPatientIds = createSelector(\r\n  getPatientState,\r\n  (state) => state.PATIENT_IDS\r\n);\r\n\r\nexport const selectedTab = createSelector(\r\n  getPatientState,\r\n  (state) => state.SELECTED_TAB\r\n)\r\n"]}