{"version":3,"mappings":"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","names":["_angular_core__WEBPACK_IMPORTED_MODULE_7__","AddEditServiceProviderComponent","dialogRef","formBuilder","data","store$","authService","snackbar","dialog","ngx_intl_tel_input__WEBPACK_IMPORTED_MODULE_8__","controlName","errorName","addServiceProviderForm","controls","hasError","serviceProviderData","spData","createAddServiceProviderForm","countryCode","country_state_city__WEBPACK_IMPORTED_MODULE_1___default","doSubscriptionAddEditSP","undefined","addSpSuccessSubs","select","_store_manage_service_provider__WEBPACK_IMPORTED_MODULE_0__","subscribe","close","addSpFailureSubs","openSnackBar","errorMessage","updateSpSuccessSubs","updateSpFailureSubs","group","user_id","id","companyName","_angular_forms__WEBPACK_IMPORTED_MODULE_9__","addressLine1","addressLine2","firstName","lastName","phoneNo","_validators_phone_no_validator__WEBPACK_IMPORTED_MODULE_2__","email","patchValue","number","submitted","invalid","markAllAsTouched","serviceProvider","value","get","parsedValue","toString","isActive","createdBy","getLoggedUser","createdById","uId","cDialog","open","_shared_confirm_dialog_confirm_dialog_component__WEBPACK_IMPORTED_MODULE_3__","maxWidth","width","backdropClass","disableClose","body","title","text","message","afterClosed","confirm","dispatch","modifiedBy","modifiedById","doUnsubscribeAddEditSP","unsubscribe","control","event","charsOnlyPattern","key","test","preventDefault","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__","selectors","decls","vars","consts","template","ctx","$event","_r1","_angular_core__WEBPACK_IMPORTED_MODULE_10__","AddEditSpAdminComponent","spinnerService","ngx_intl_tel_input__WEBPACK_IMPORTED_MODULE_11__","addEditForm","spAdminData","spAdmin","console","log","spId","createAddEditForm","doSubscriptionAddEditSPA","addManageAdminSuccessSubs","_shared_store_manage_admin__WEBPACK_IMPORTED_MODULE_2__","addManageAdminFailureSubs","_interfaces_user_interface__WEBPACK_IMPORTED_MODULE_0__","updateManageAdminSuccessSubs","updateManageAdminFailureSubs","_angular_forms__WEBPACK_IMPORTED_MODULE_12__","_validators_phone_no_validator__WEBPACK_IMPORTED_MODULE_3__","validator","show","serviceProviderId","roles","_shared_confirm_dialog_confirm_dialog_component__WEBPACK_IMPORTED_MODULE_4__","boolean","confirmValue","src_environments_environment__WEBPACK_IMPORTED_MODULE_5__","doUnsubscribeAddEditSPA","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_14__","ManageAdminComponent","service","serviceProviderName","_a","endUrl","src_environments_environment__WEBPACK_IMPORTED_MODULE_3__","_b","getSPACUsers","activeUser","pipe","_add_edit_sp_admin_add_edit_sp_admin_component__WEBPACK_IMPORTED_MODULE_1__","doSubscriptionFormSelector","url","getSPACloneUsers","res","status","adminClone","map","user","adminName","adminCloneCopy","sortObject","sort","JSON","parse","direction","a","b","active","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_9__","viewQuery","_shared_data_table_manage_admin_data_table_manage_admin_component__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","row_r6","row_r7","ManageServiceProviderComponent","label","headerClass","sortable","type","_life_signals_models_ls_column_model__WEBPACK_IMPORTED_MODULE_3__","cellClass","style","labelClass","rowSelectEnabled","actions","header","headerLabel","page","pageSize","pageIndex","paginator","hide","offline","translateKey","translate","tableState","getServiceProviders","listServiceProviders","_store_manage_service_provider__WEBPACK_IMPORTED_MODULE_2__","serviceProvider$","serviceProviderSub","response","config","length","SERVICE_PROVIDER_DATA","x","contactPerson","_","src_app_super_admin_dialog_add_edit_service_provider_add_edit_service_provider_component__WEBPACK_IMPORTED_MODULE_0__","setTimeout","src_app_super_admin_dialog_manage_admin_manage_admin_component__WEBPACK_IMPORTED_MODULE_1__","SuperAdminService","httpClient","authHeaders","_angular_common_http__WEBPACK_IMPORTED_MODULE_1__","src_environments_environment__WEBPACK_IMPORTED_MODULE_0__","headers","requestBody","post","put","handleError","error","ErrorEvent","_angular_core__WEBPACK_IMPORTED_MODULE_4__","factory","ManageSpActionTypes","LoadServiceProviderRequestAction","LOAD_SERVICE_PROVIDER_ACTION","LoadServiceProviderSuccessAction","payload","LOAD_SERVICE_PROVIDER_SUCCESS","LoadServiceProviderFailureAction","LOAD_SERVICE_PROVIDER_FAILURE","SaveServiceProviderAction","SAVE_SERVICE_PROVIDER_ACTION","SaveServiceProviderSuccessAction","SAVE_SERVICE_PROVIDER_SUCCESS","SaveServiceProviderFailureAction","SAVE_SERVICE_PROVIDER_FAILURE","UpdateServiceProviderAction","UPDATE_SERVICE_PROVIDER_ACTION","UpdateServiceProviderSuccessAction","UPDATE_SERVICE_PROVIDER_SUCCESS","UpdateServiceProviderFailureAction","UPDATE_SERVICE_PROVIDER_FAILURE","AfterSaveServiceProviderSuccess","AFTER_SAVE_SERVICE_PROVIDER_SUCCESS","AfterSaveServiceProviderFailure","AFTER_SAVE_SERVICE_PROVIDER_FAILURE","AfterUpdateServiceProviderSuccess","AFTER_UPDATE_SERVICE_PROVIDER_SUCCESS","AfterUpdateServiceProviderFailure","AFTER_UPDATE_SERVICE_PROVIDER_FAILURE","ManageServiceProviderEffects","actions$","http","superAdminService","_manage_service_provider_actions__WEBPACK_IMPORTED_MODULE_0__","action","getAllServiceProvider","serviceProviderRes","addServiceProvider","addServiceProviderRes","updateServiceProvider","updateServiceProviderRes","_angular_core__WEBPACK_IMPORTED_MODULE_9__","initialState","save_service_provider_success","save_service_provider_error","_life_signals_models_ls_column_model__WEBPACK_IMPORTED_MODULE_1__","serviceProviderFeatureKey","serviceProviderReducer","state","updatedSpData","getManageServiceProviderState","_manage_service_provider_reducer__WEBPACK_IMPORTED_MODULE_0__","selectManageServiceProviderList","selectManageServiceProviderError","addServiceProviderSuccess","addServiceProviderFailure","updateServiceProviderSuccess","updateServiceProviderFailure","routes","path","canActivate","_guards_auth_guard__WEBPACK_IMPORTED_MODULE_0__","component","_shared_root_root_component__WEBPACK_IMPORTED_MODULE_1__","children","_manage_service_provider_manage_service_provider_component__WEBPACK_IMPORTED_MODULE_2__","SuperAdminRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_4__","imports","exports","SuperAdminModule","provide","_angular_common_http__WEBPACK_IMPORTED_MODULE_15__","useClass","keycloak_angular__WEBPACK_IMPORTED_MODULE_16__","multi","_service_super_admin_service__WEBPACK_IMPORTED_MODULE_10__","_interceptors_error_interceptor__WEBPACK_IMPORTED_MODULE_13__","_angular_common__WEBPACK_IMPORTED_MODULE_17__","_super_admin_routing_module__WEBPACK_IMPORTED_MODULE_0__","_core_directives_sort_module__WEBPACK_IMPORTED_MODULE_2__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_18__","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_19__","_shared_shared_module__WEBPACK_IMPORTED_MODULE_4__","_angular_forms__WEBPACK_IMPORTED_MODULE_20__","_angular_material_datepicker__WEBPACK_IMPORTED_MODULE_21__","_angular_material_form_field__WEBPACK_IMPORTED_MODULE_22__","_angular_material_core__WEBPACK_IMPORTED_MODULE_23__","_angular_material_tooltip__WEBPACK_IMPORTED_MODULE_24__","_angular_material_input__WEBPACK_IMPORTED_MODULE_25__","_angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_26__","ngx_intl_tel_input__WEBPACK_IMPORTED_MODULE_27__","_angular_material_checkbox__WEBPACK_IMPORTED_MODULE_28__","_dialogs_dialogs_module__WEBPACK_IMPORTED_MODULE_5__","_i18n_i18n_module__WEBPACK_IMPORTED_MODULE_7__","_angular_material_table__WEBPACK_IMPORTED_MODULE_29__","_angular_material_sort__WEBPACK_IMPORTED_MODULE_30__","_ngrx_store__WEBPACK_IMPORTED_MODULE_31__","_store_manage_service_provider_manage_service_provider_reducer__WEBPACK_IMPORTED_MODULE_8__","_ngrx_effects__WEBPACK_IMPORTED_MODULE_32__","_store_manage_service_provider_manage_service_provider_effects__WEBPACK_IMPORTED_MODULE_9__","_angular_material_paginator__WEBPACK_IMPORTED_MODULE_33__","_life_signals_life_signals_module__WEBPACK_IMPORTED_MODULE_12__","_angular_material_button__WEBPACK_IMPORTED_MODULE_34__","_angular_material_card__WEBPACK_IMPORTED_MODULE_35__","declarations","_manage_service_provider_manage_service_provider_component__WEBPACK_IMPORTED_MODULE_1__","_dialog_add_edit_service_provider_add_edit_service_provider_component__WEBPACK_IMPORTED_MODULE_3__","_dialog_add_edit_sp_admin_add_edit_sp_admin_component__WEBPACK_IMPORTED_MODULE_6__","_dialog_manage_admin_manage_admin_component__WEBPACK_IMPORTED_MODULE_11__"],"sources":["webpack:///src/app/super-admin/dialog/add-edit-service-provider/add-edit-service-provider.component.html","webpack:///src/app/super-admin/dialog/add-edit-service-provider/add-edit-service-provider.component.ts","webpack:///src/app/super-admin/dialog/add-edit-sp-admin/add-edit-sp-admin.component.html","webpack:///src/app/super-admin/dialog/add-edit-sp-admin/add-edit-sp-admin.component.ts","webpack:///src/app/super-admin/dialog/manage-admin/manage-admin.component.html","webpack:///src/app/super-admin/dialog/manage-admin/manage-admin.component.ts","webpack:///src/app/super-admin/manage-service-provider/manage-service-provider.component.html","webpack:///src/app/super-admin/manage-service-provider/manage-service-provider.component.ts","webpack:///src/app/super-admin/service/super-admin.service.ts","webpack:///src/app/super-admin/store/manage-service-provider/manage-service-provider.actions.ts","webpack:///src/app/super-admin/store/manage-service-provider/manage-service-provider.effects.ts","webpack:///src/app/super-admin/store/manage-service-provider/manage-service-provider.reducer.ts","webpack:///src/app/super-admin/store/manage-service-provider/manage-service-provider.selector.ts","webpack:///src/app/super-admin/super-admin-routing.module.ts","webpack:///src/app/super-admin/super-admin.module.ts"],"sourcesContent":["<mat-card class=\"dialog-header\">\n    <h1 mat-dialog-title *ngIf=\"serviceProviderData === undefined; else edit\">\n        {{ 'super_admin.add_service_provider.label_add_sp' | translate }}\n    </h1>\n    <ng-template #edit>\n        <h1 mat-dialog-title>\n            {{ 'super_admin.add_service_provider.label_edit_sp' | translate }}\n        </h1>\n    </ng-template>\n</mat-card>\n\n<mat-dialog-content class=\"mat-dialog-popup\">\n    <form [formGroup]=\"addServiceProviderForm\" class=\"dialog-form\" autocomplete=\"off\" id=\"addServiceProviderForm\">\n        <div *ngIf=\"serviceProviderData !== undefined\">\n            <mat-label for=\"sp-company-name\" class=\"matlabel\" [class.disabled]=\"serviceProviderData\">{{\n                'shared_label.label_id' | translate }}\n            </mat-label>\n            <mat-form-field appearance=\"fill\" class=\"formfield-control\" [class.disabled]=\"serviceProviderData\">\n                <input matInput formControlName=\"user_id\" [readonly]=\"serviceProviderData\" />\n            </mat-form-field>\n        </div>\n        <div>\n            <mat-label for=\"sp-company-name\" class=\"matlabel\" [class.disabled]=\"serviceProviderData\">{{\n                'shared_label.label_company_name' | translate }}\n                <span class=\"required-star\" *ngIf=\"serviceProviderData === undefined\">* </span>\n                <!--<span class=\"required-star cannotEdit\" *ngIf=\"serviceProviderData === undefined\">{{ 'shared_label.label_company_name_change' | translate }}</span>\n                <span class=\"required-star cannotEdit\" *ngIf=\"serviceProviderData\">{{ 'shared_label.label_cannot_edit' | translate }}</span>-->\n            </mat-label>\n            <mat-form-field appearance=\"fill\" class=\"formfield-control\" [class.disabled]=\"serviceProviderData\"\n                [ngClass]=\"addServiceProviderForm.get('companyName').hasError('pattern') && addServiceProviderForm.get('companyName').touched ? 'error-msg': ''\">\n                <input matInput autocomplete=\"off\" formControlName=\"companyName\" [readonly]=\"serviceProviderData\"\n                    maxlength=\"128\" />\n                <mat-error *ngIf=\"hasError('companyName', 'required') && submitted\">{{\n                    'error_message.err_company_name_required' | translate }}\n                </mat-error>\n                <mat-error *ngIf=\"hasError('companyName','pattern')\">{{ 'error_message.err_company_name_pattern' |\n                    translate }}\n                </mat-error>\n                <mat-error\n                    *ngIf=\"(hasError('companyName','minlength') || hasError('companyName','maxlength')) && !hasError('companyName','pattern')\">\n                    {{ 'error_message.err_company_name_range' | translate }}\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"mb-1\">\n            <mat-label for=\"sp-address-line-1\" class=\"matlabel\">{{ 'shared_label.label_address' | translate }}\n            </mat-label>\n            <mat-form-field appearance=\"fill\" class=\"formfield-control\"\n                [ngClass]=\"addServiceProviderForm.get('addressLine1').hasError('pattern') && addServiceProviderForm.get('addressLine1').touched ? 'error-msg': ''\">\n                <input matInput autocomplete=\"off\" placeholder=\"{{ 'shared_label.label_line_1' | translate }}\"\n                    formControlName=\"addressLine1\" maxlength=\"128\" />\n                <mat-error *ngIf=\"hasError('addressLine1','pattern')\">\n                    {{'error_message.err_valid_address'|translate}}\n                </mat-error>\n                <mat-error\n                *ngIf=\"(hasError('addressLine1','minlength') || hasError('addressLine1','maxlength')) && !hasError('addressLine1','pattern')\">\n                    {{'error_message.err_address_range' | translate}}\n                </mat-error>\n            </mat-form-field>\n            <mat-form-field appearance=\"fill\" class=\"formfield-control\"\n                [ngClass]=\"addServiceProviderForm.get('addressLine2').hasError('pattern') && addServiceProviderForm.get('addressLine2').touched ? 'error-msg': ''\">\n                <input matInput autocomplete=\"off\" placeholder=\"{{ 'shared_label.label_line_2' | translate }}\"\n                    formControlName=\"addressLine2\" maxlength=\"128\" />\n                <mat-error *ngIf=\"hasError('addressLine2','pattern')\">\n                    {{'error_message.err_valid_address'|translate}}\n                </mat-error>\n                <mat-error\n                    *ngIf=\"(hasError('addressLine2','minlength') || hasError('addressLine2','maxlength')) && !hasError('addressLine2','pattern')\">\n                    {{'error_message.err_address_range' | translate}}\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <fieldset class=\"scheduler-border\">\n            <legend class=\"scheduler-border\">\n                <div>\n                    <mat-icon class=\"me-2 material-icons-outlined\">account_circle</mat-icon>\n                    <label class=\"facility-details-label\">{{\n                        'shared_label.label_contact_details' | translate\n                        }}</label>\n                </div>\n            </legend>\n            <div>\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <mat-label for=\"sp-contact-person-fname\" class=\"matlabel\">{{ 'shared_label.label_first_name' |\n                            translate }}\n                            <span class=\"required-star\">*</span>\n                        </mat-label>\n                        <mat-form-field appearance=\"fill\" class=\"formfield-control\"\n                            [ngClass]=\"addServiceProviderForm.get('firstName').hasError('pattern') && addServiceProviderForm.get('firstName').touched ? 'error-msg': ''\">\n                            <input matInput autocomplete=\"off\" formControlName=\"firstName\"\n                                (keypress)=\"charsOnly('firstName', $event)\" />\n                            <mat-error *ngIf=\"hasError('firstName', 'required') && submitted\">{{\n                                'error_message.err_first_name_required' | translate }}\n                            </mat-error>\n                            <mat-error *ngIf=\"hasError('firstName','pattern')\">\n                                {{'error_message.err_first_name_char_only' | translate}}</mat-error>\n                            <mat-error *ngIf=\"hasError('firstName','maxlength') && !hasError('firstName','pattern')\">\n                                {{'error_message.err_first_name_range' | translate}}</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"col-md-6\">\n                        <mat-label for=\"sp-contact-person-lname\" class=\"matlabel\">{{ 'shared_label.label_last_name' |\n                            translate }}\n                            <span class=\"required-star\">*</span>\n                        </mat-label>\n                        <mat-form-field appearance=\"fill\" class=\"formfield-control\"\n                            [ngClass]=\"addServiceProviderForm.get('firstName').hasError('pattern') && addServiceProviderForm.get('firstName').touched ? 'error-msg': ''\">\n                            <input matInput autocomplete=\"off\" formControlName=\"lastName\"\n                                (keypress)=\"charsOnly('lastName', $event)\" />\n                            <mat-error *ngIf=\"hasError('lastName', 'required') && submitted\">{{\n                                'error_message.err_last_name_required' | translate }}\n                            </mat-error>\n                            <mat-error *ngIf=\"hasError('lastName','pattern')\">{{'error_message.err_last_name_char_only'\n                                | translate}}</mat-error>\n                            <mat-error *ngIf=\"hasError('lastName','maxlength') && !hasError('lastName','pattern')\">\n                                {{'error_message.err_last_name_range' | translate}}</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <mat-label for=\"sp-contact-email\" class=\"matlabel\">{{ 'shared_label.label_email' |\n                            translate }}\n                            <!--<<span class=\"required-star\">**</span>-->\n                        </mat-label>\n                        <mat-form-field appearance=\"fill\" class=\"formfield-control\">\n                            <input matInput autocomplete=\"off\" formControlName=\"email\" [maxLength]=\"320\" />\n                            <mat-error *ngIf=\"hasError('email','email')\" >{{'error_message.err_invalid_email'|translate}}</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"col-md-6\">\n                        <mat-label for=\"sp-contact-person-phone\" class=\"matlabel\">{{ 'shared_label.label_phone_no' |\n                            translate }}\n                            <!--<span class=\"required-star\">**</span>-->\n                        </mat-label>\n                        <app-tel-input formControlName=\"phoneNo\"></app-tel-input>\n                        <mat-error class=\"mt-2\" *ngIf=\"hasError('phoneNo', 'phoneNumberInvalid')\">\n                            {{\"errors.err_invalid_phone_no\" | translate}}\n                        </mat-error>\n                    </div>\n\n                </div>\n                <!--                <mat-error *ngIf=\"submitted && !addServiceProviderForm.getRawValue()?.email && !addServiceProviderForm.getRawValue()?.phoneNo\">-->\n                <!--                    {{ \"manage_users_module.edituser.message1\" | translate }}-->\n                <!--                </mat-error>-->\n            </div>\n\n            <!--<div class=\"email-phone-info-text\">\n                **{{ 'error_message.err_email_phone_mandatory' | translate }}\n            </div>-->\n        </fieldset>\n        <div class=\"required-text\">\n            <span>* {{ 'error_message.err_mandatory' | translate }}</span>\n        </div>\n    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n    <button color=\"warn\" mat-flat-button type=\"button\" class=\"fill-btn\" (click)=\"onClose()\">\n        {{ 'buttons.btn_cancel' | translate }}\n    </button>\n    <button type=\"button\" mat-flat-button color=\"primary\" class=\"fill-btn\" (click)=\"saveServiceProvider()\"\n        *ngIf=\"serviceProviderData\">\n        {{ 'buttons.btn_save' | translate }}\n    </button>\n    <button type=\"button\" color=\"primary\" mat-flat-button class=\"fill-btn\" (click)=\"saveServiceProvider()\"\n        *ngIf=\"serviceProviderData === undefined\">\n        {{ 'buttons.btn_add' | translate }}\n    </button>\n</mat-dialog-actions>\n","import { Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { ServiceProvider } from \"../../manage-service-provider/service-provider.interface\";\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from \"@angular/material/dialog\";\nimport { SearchCountryField, CountryISO } from \"ngx-intl-tel-input\";\nimport {\n  ManageServiceProvideStoreActions,\n  ManageServiceProvideStoreSelectors,\n  ManageServiceProvideStoreState,\n} from \"../../store/manage-service-provider\";\nimport { Store } from \"@ngrx/store\";\nimport { AuthenticationService } from \"@services/authentication.service\";\nimport csc from \"country-state-city\";\nimport { Subscription } from \"rxjs\";\nimport { SnackbarService } from \"@services/snackbar.service\";\nimport {_validatePhoneNumberInput} from \"../../../validators/phone-no.validator\";\nimport parsePhoneNumberFromString from \"libphonenumber-js\";\nimport { ConfirmDialogComponent } from \"../../../shared/confirm-dialog/confirm-dialog.component\";\n\n@Component({\n  selector: \"app-add-edit-service-provider\",\n  templateUrl: \"./add-edit-service-provider.component.html\",\n  styleUrls: [\"./add-edit-service-provider.component.scss\"],\n})\nexport class AddEditServiceProviderComponent implements OnInit, OnDestroy {\n  addServiceProviderForm: FormGroup;\n  submitted: boolean;\n  // for country code\n  separateDialCode = false;\n  SearchCountryField = SearchCountryField;\n  TooltipLabel;\n  CountryISO = CountryISO;\n  preferredCountries = [\"in\", \"us\", \"za\"];\n  validCountry = true;\n  selectedCountry: string;\n  serviceProvider: ServiceProvider;\n  serviceProviderData: ServiceProvider;\n  countryCode = [];\n  addSpSuccessSubs: Subscription;\n  addSpFailureSubs: Subscription;\n  updateSpSuccessSubs: Subscription;\n  updateSpFailureSubs: Subscription;\n\n  constructor(\n      private dialogRef: MatDialogRef<AddEditServiceProviderComponent>,\n      private formBuilder: FormBuilder,\n      @Inject(MAT_DIALOG_DATA) public data: any,\n      private store$: Store<ManageServiceProvideStoreState.ServiceProviderState>,\n      private authService: AuthenticationService,\n      private snackbar: SnackbarService,\n      private dialog : MatDialog\n  ) {}\n\n  ngOnInit() {\n    this.serviceProviderData = this.data.spData;\n    this.createAddServiceProviderForm();\n    this.countryCode = csc.getAllCountries() || [];\n    this.doSubscriptionAddEditSP();\n  }\n\n  doSubscriptionAddEditSP() {\n    if (this.serviceProviderData === undefined) {\n      this.addSpSuccessSubs = this.store$\n          .select(ManageServiceProvideStoreSelectors.addServiceProviderSuccess)\n          .subscribe((data) => {\n            if (data) {\n              this.dialogRef.close();\n            }\n          });\n      this.addSpFailureSubs = this.store$\n          .select(ManageServiceProvideStoreSelectors.addServiceProviderFailure)\n          .subscribe((data) => {\n            if (data) {\n              this.snackbar.openSnackBar(data.errorMessage, \"top\", \"center\");\n            }\n          });\n    } else {\n      this.updateSpSuccessSubs = this.store$\n          .select(ManageServiceProvideStoreSelectors.updateServiceProviderSuccess)\n          .subscribe((data) => {\n            if (data) {\n              this.dialogRef.close();\n            }\n          });\n\n      this.updateSpFailureSubs = this.store$\n          .select(ManageServiceProvideStoreSelectors.updateServiceProviderFailure)\n          .subscribe((data) => {\n            if (data) {\n              this.snackbar.openSnackBar(data.errorMessage, \"top\", \"center\");\n            }\n          });\n    }\n  }\n\n  createAddServiceProviderForm() {\n    this.addServiceProviderForm = this.formBuilder.group(\n        {\n          user_id:[\n            this.serviceProviderData !== undefined ? this.serviceProviderData.id : \"\",\n          ],\n          companyName: [\n            this.serviceProviderData !== undefined\n                ? this.serviceProviderData.companyName\n                : \"\",\n            [\n              Validators.required,\n              Validators.pattern(\"^[a-zA-Z0-9]{1}[a-zA-Z0-9-_ ]*$\"),\n              Validators.maxLength(128),\n              Validators.minLength(2)\n            ],\n          ],\n          addressLine1: [\n            this.serviceProviderData !== undefined\n                ? this.serviceProviderData.addressLine1\n                : \"\",\n            [Validators.pattern(\"^(?!\\\\s+$)[#&()./0-9a-zA-Z\\s ,-]+$\"),Validators.maxLength(128),Validators.minLength(2)],\n          ],\n          addressLine2: [\n            this.serviceProviderData !== undefined\n                ? this.serviceProviderData.addressLine2\n                : \"\",\n            [Validators.pattern(\"^(?!\\\\s+$)[#&()./0-9a-zA-Z\\s ,-]+$\"),Validators.maxLength(128),Validators.minLength(2)],\n          ],\n          firstName: [\n            this.serviceProviderData !== undefined\n                ? this.serviceProviderData.firstName\n                : \"\",\n            [\n              Validators.required,\n              Validators.pattern(\"^[a-zA-Z]{1}[a-zA-Z ]*$\"),\n              Validators.maxLength(25)\n            ],\n          ],\n          lastName: [\n            this.serviceProviderData !== undefined\n                ? this.serviceProviderData.lastName\n                : \"\",\n            [\n              Validators.required,\n              Validators.pattern(\"^[a-zA-Z]{1}[a-zA-Z ]*$\"),\n              Validators.maxLength(25)\n            ],\n          ],\n          phoneNo: [\n            this.serviceProviderData !== undefined\n                ? this.serviceProviderData.phoneNo\n                : \"\",\n            [_validatePhoneNumberInput.bind(this)]\n          ],\n          email: [\n            this.serviceProviderData !== undefined\n                ? this.serviceProviderData.email\n                : \"\",\n            [ Validators.email],\n          ],\n        },\n          /*{ validator: atLeastOne(Validators.required, [\"email\", \"phoneNo\"]) }*/\n    );\n  \n  }\n\n  get f() {\n    return this.addServiceProviderForm.controls;\n  }\n\n  onClose() {\n    this.dialogRef.close();\n  }\n\n  resetNumber() {\n    this.addServiceProviderForm.patchValue({\n      phoneNo: {\n        number: undefined,\n        countryCode: CountryISO.India,\n      },\n    });\n  }\n\n  saveServiceProvider() {\n    this.submitted = true;\n    if (this.addServiceProviderForm.invalid) {\n      this.addServiceProviderForm.markAllAsTouched();\n      return;\n    }\n    this.serviceProvider = this.addServiceProviderForm.value;\n    if (\n        this.addServiceProviderForm.get(\"phoneNo\").value !== null &&\n        this.addServiceProviderForm.get(\"phoneNo\").value !== \"\"\n    ) {\n      const parsedValue = parsePhoneNumberFromString(this.addServiceProviderForm\n          .get(\"phoneNo\")\n          .value);\n      this.serviceProvider.phoneNo = parsedValue.number.toString();\n    }\n\n    if (this.serviceProviderData === undefined) {\n      this.serviceProvider.isActive = true;\n      this.serviceProvider.createdBy = this.authService.getLoggedUser().email;\n      this.serviceProvider.createdById = this.authService.getLoggedUser().uId;\n      const cDialog = this.dialog.open(ConfirmDialogComponent,{\n        maxWidth: \"90vw\",\n        width: \"500px\",\n        backdropClass: \"backdropBackground\",\n        disableClose: true,\n        data: {\n          body:{\n            title: \"super_admin.add_service_provider.label_caution\",\n            text :\"super_admin.add_service_provider.label_confirm_spa_1\",\n            message : \"super_admin.add_service_provider.label_confirm_spa_2\"\n          }\n        }\n      });\n      cDialog.afterClosed().subscribe((confirm)=>{\n        if(confirm){\n          this.store$.dispatch(\n              new ManageServiceProvideStoreActions.SaveServiceProviderAction(\n                  this.serviceProvider\n              )\n          );\n        }\n      })\n\n    } else {\n      this.serviceProvider.modifiedBy = this.authService.getLoggedUser().email;\n      this.serviceProvider.modifiedById = this.authService.getLoggedUser().uId;\n      this.serviceProvider.id = this.serviceProviderData.id;\n      this.store$.dispatch(\n          new ManageServiceProvideStoreActions.UpdateServiceProviderAction(\n              this.serviceProvider\n          )\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.doUnsubscribeAddEditSP();\n  }\n\n  doUnsubscribeAddEditSP() {\n    if (this.serviceProviderData === undefined) {\n      if (this.addSpSuccessSubs) this.addSpSuccessSubs.unsubscribe();\n      if (this.addSpFailureSubs) this.addSpFailureSubs.unsubscribe();\n      this.store$.dispatch(\n          new ManageServiceProvideStoreActions.AfterSaveServiceProviderSuccess()\n      );\n      this.store$.dispatch(\n          new ManageServiceProvideStoreActions.AfterSaveServiceProviderFailure()\n      );\n    } else {\n      if (this.updateSpSuccessSubs) this.updateSpSuccessSubs.unsubscribe();\n      if (this.updateSpFailureSubs) this.updateSpFailureSubs.unsubscribe();\n      this.store$.dispatch(\n          new ManageServiceProvideStoreActions.AfterUpdateServiceProviderSuccess()\n      );\n      this.store$.dispatch(\n          new ManageServiceProvideStoreActions.AfterUpdateServiceProviderFailure()\n      );\n    }\n  }\n\n  public hasError = (controlName: string, errorName: string) =>{\n    return this.addServiceProviderForm.controls[controlName].hasError(errorName);\n  }\n  charsOnly(control: string, event: KeyboardEvent) {\n    let charsOnlyPattern = /^[a-zA-Z ]$/;\n    let key = event.key;\n    if (charsOnlyPattern.test(key)) {\n      return true;\n    } else {\n      event.preventDefault();\n      return false;\n    }\n  }\n}\n","<mat-card class=\"dialog-header\">\n    <h1 mat-dialog-title *ngIf=\"spAdminData === undefined; else edit\">\n        {{ 'super_admin.add_service_provider_admin.label_add_spa' | translate }}\n    </h1>\n    <ng-template #edit>\n        <h1 mat-dialog-title>\n            {{ 'super_admin.add_service_provider_admin.label_edit_spa' | translate }}\n        </h1>\n    </ng-template>\n    <!--<button mat-button mat-dialog-close>\n\t\t<mat-icon>close</mat-icon>\n\t</button>-->\n</mat-card>\n\n<mat-dialog-content class=\"mat-dialog-popup\">\n    <form [formGroup]=\"addEditForm\" class=\"dialog-form\" autocomplete=\"off\">\n        <div>\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <mat-label for=\"first-name\" class=\"matlabel\" [class.disabled]=\"spAdminData\">\n                        {{ 'shared_label.label_first_name' | translate }}\n                        <span class=\"required-star\" *ngIf=\"spAdminData === undefined\">* </span>\n                        <span class=\"required-star cannotEdit\" *ngIf=\"spAdminData\">{{\"shared_label.label_cannot_edit\"|translate}}</span>\n                    </mat-label>\n                    <mat-form-field appearance=\"fill\" class=\"formfield-control\" [class.disabled]=\"spAdminData\" [ngClass]=\"addEditForm.get('firstName').hasError('pattern') && addEditForm.get('firstName').touched ? 'error-msg': ''\" >\n                        <input matInput autocomplete=\"off\" formControlName=\"firstName\" [readonly]=\"spAdminData\" (keypress)=\"charsOnly('firstName', $event)\" />\n                        <mat-error *ngIf=\"hasError('firstName', 'required') && submitted\" >{{ 'error_message.err_first_name_required' | translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"hasError('firstName', 'pattern')\">{{ 'error_message.err_first_name_char_only' | translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"hasError('firstName', 'maxlength') && !hasError('firstName', 'pattern')\">{{ 'error_message.err_first_name_range' | translate }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-md-6\">\n                    <mat-label for=\"last-name\" class=\"matlabel\" [class.disabled]=\"spAdminData\">\n                        {{ 'shared_label.label_last_name' | translate }}\n                        <span class=\"required-star\" *ngIf=\"spAdminData === undefined\">* </span>\n                        <span class=\"required-star cannotEdit\" *ngIf=\"spAdminData\">{{\"shared_label.label_cannot_edit\"|translate}}</span>\n                    </mat-label>\n                    <mat-form-field appearance=\"fill\" class=\"formfield-control\" [class.disabled]=\"spAdminData\" [ngClass]=\"addEditForm.get('lastName').hasError('pattern') && addEditForm.get('lastName').touched ? 'error-msg': ''\" >\n                        <input matInput autocomplete=\"off\" formControlName=\"lastName\" [readonly]=\"spAdminData\" (keypress)=\"charsOnly('lastName', $event)\" />\n                        <mat-error *ngIf=\"hasError('lastName', 'required') && submitted\">{{ 'error_message.err_last_name_required' | translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"hasError('lastName', 'pattern')\" >{{ 'error_message.err_last_name_char_only' | translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"hasError('lastName', 'maxlength') && !hasError('lastName', 'pattern')\" >{{ 'error_message.err_last_name_range' | translate }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n        </div>\n\n        <div>\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <mat-label for=\"spa-email\" class=\"matlabel\">\n                        {{ 'shared_label.label_email_id' | translate }}\n                        <span class=\"required-star\">**</span>\n                    </mat-label>\n                    <mat-form-field appearance=\"fill\" class=\"formfield-control\">\n                        <input matInput autocomplete=\"off\" formControlName=\"email\" [maxLength]=\"320\" />\n                        <mat-error *ngIf=\"hasError('email','email')\">\n                            {{'error_message.err_invalid_email'|translate}}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-md-6\">\n                    <mat-label for=\"sp-contact-person-phone\" class=\"matlabel\">\n                        {{ 'shared_label.label_phone_no' | translate }}\n                        <span class=\"required-star\">**</span>\n                    </mat-label>\n                    <app-tel-input formControlName=\"phoneNo\"></app-tel-input>\n                    <mat-error class=\"mt-2\" *ngIf=\"hasError('phoneNo', 'phoneNumberInvalid')\">\n                        {{\"errors.err_invalid_phone_no\" | translate}}\n                    </mat-error>\n                </div>\n            </div>\n            <mat-error class=\"email-error\" *ngIf=\"submitted && !addEditForm.getRawValue()?.email && !addEditForm.getRawValue()?.phoneNo\">\n                {{ \"manage_users_module.edituser.message1\" | translate }}\n            </mat-error>\n        </div>\n        <div class=\"\">\n            <div class=\"required-text\" style=\"margin-top: 0px !important; margin-left: 0px !important\">\n                <span>* {{ 'error_message.err_required' | translate }}</span>\n            </div>\n            <div style=\"margin-top: 10px !important\" class=\"email-phone-info-text\">\n                **{{ 'error_message.err_email_phone_mandatory' | translate }}\n            </div>\n        </div>\n    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n    <button type=\"button\" color=\"warn\" mat-flat-button class=\"fill-btn\" (click)=\"onClose()\">\n\t\t{{ 'buttons.btn_cancel' | translate }}\n\t</button>\n    <button type=\"button\" color=\"primary\" mat-flat-button class=\"fill-btn\" (click)=\"saveServiceProviderAdmin()\">\n\t\t{{ 'buttons.btn_save' | translate }}\n\t</button>\n</mat-dialog-actions>\n","import { Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { User, UserErrors } from \"../../../interfaces/user.interface\";\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from \"@angular/material/dialog\";\nimport { SpinnerService } from \"src/app/shared/_services/spinner.service\";\nimport { atLeastOne } from \"../../../validators/custom-validator-at-least-once.validator\";\nimport { SearchCountryField, CountryISO } from \"ngx-intl-tel-input\";\nimport {\n  ManageAdminStoreActions,\n  ManageAdminStoreSelectors,\n  ManageAdminStoreState,\n} from \"../../../shared/store/manage-admin\";\nimport { Store } from \"@ngrx/store\";\nimport { AuthenticationService } from \"@services/authentication.service\";\nimport { Subscription } from \"rxjs\";\nimport { SnackbarService } from \"@services/snackbar.service\";\nimport {_validatePhoneNumberInput} from \"../../../validators/phone-no.validator\";\nimport parsePhoneNumberFromString from \"libphonenumber-js\";\nimport { ConfirmDialogComponent } from \"../../../shared/confirm-dialog/confirm-dialog.component\";\nimport { environment } from \"src/environments/environment\";\n\n@Component({\n  selector: \"app-add-edit-sp-admin\",\n  templateUrl: \"./add-edit-sp-admin.component.html\",\n  styleUrls: [\"./add-edit-sp-admin.component.scss\"],\n})\nexport class AddEditSpAdminComponent implements OnInit, OnDestroy {\n  addEditForm: FormGroup;\n  submitted: boolean;\n  spAdminData: User;\n  separateDialCode = false;\n  SearchCountryField = SearchCountryField;\n  TooltipLabel;\n  CountryISO = CountryISO;\n  preferredCountries: CountryISO[] = [\n    CountryISO.India,\n    CountryISO.UnitedStates,\n    CountryISO.SouthAfrica,\n  ];\n  validCountry = true;\n  spAdmin: User;\n  spId: string;\n  addManageAdminSuccessSubs: Subscription;\n  addManageAdminFailureSubs: Subscription;\n  updateManageAdminSuccessSubs: Subscription;\n  updateManageAdminFailureSubs: Subscription;\n\n  constructor(\n    private dialogRef: MatDialogRef<AddEditSpAdminComponent>,\n    private formBuilder: FormBuilder,\n    private spinnerService: SpinnerService,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private store$: Store<ManageAdminStoreState.ManageAdminState>,\n    private authService: AuthenticationService,\n    private snackbar: SnackbarService,\n    private dialog : MatDialog\n  ) {}\n\n  ngOnInit() {\n    this.spAdminData = this.data.spAdmin;\n    console.log(this.spAdminData);\n    this.spId = this.data.spId;\n    this.createAddEditForm();\n    this.doSubscriptionAddEditSPA();\n  }\n\n  doSubscriptionAddEditSPA() {\n    if (this.spAdminData === undefined) {\n      this.addManageAdminSuccessSubs = this.store$\n        .select(ManageAdminStoreSelectors.addManageAdminSuccess)\n        .subscribe((data) => {\n          if (data) {\n            this.dialogRef.close();\n          }\n        });\n\n      this.addManageAdminFailureSubs = this.store$\n        .select(ManageAdminStoreSelectors.addManageAdminFailure)\n        .subscribe((data) => {\n          if (data) {\n            if (data.errorMessage === UserErrors.EMAIL_OR_PHONE_ALREADY_EXIST) {\n              this.snackbar.openSnackBar(\"error_message.err_email_phone_exist\", \"top\", \"center\", true);\n            } else if (data.errorMessage === 'SPA_ALREADY_EXIST') {\n              this.snackbar.openSnackBar(\"error_message.spa_already_exist\", \"top\", \"center\", true);\n            }else {\n              this.snackbar.openSnackBar(\"errors.err_generic_message\", \"top\", \"center\", true);\n            }\n          }\n        });\n    } else {\n      this.updateManageAdminSuccessSubs = this.store$\n        .select(ManageAdminStoreSelectors.updateManageAdminSuccess)\n        .subscribe((data) => {\n          if (data) {\n            this.dialogRef.close();\n          }\n        });\n\n      this.updateManageAdminFailureSubs = this.store$\n        .select(ManageAdminStoreSelectors.updateManageAdminFailure)\n        .subscribe((data) => {\n          if (data) {\n            if (data.errorMessage === UserErrors.EMAIL_OR_PHONE_ALREADY_EXIST) {\n              this.snackbar.openSnackBar(\"error_message.err_email_phone_exist\", \"top\", \"center\", true);\n            } else {\n              this.snackbar.openSnackBar(\"errors.err_generic_message\", \"top\", \"center\", true);\n            }\n          }\n        });\n    }\n  }\n\n  onClose() {\n    this.dialogRef.close();\n  }\n\n  resetNumber() {\n    this.addEditForm.patchValue({\n      phoneNo: {\n        number: undefined,\n        countryCode: CountryISO.India,\n      },\n    });\n  }\n\n  createAddEditForm() {\n    this.addEditForm = this.formBuilder.group(\n      {\n        firstName: [\n          this.spAdminData !== undefined ? this.spAdminData.firstName : \"\",\n          [\n            Validators.required,\n            Validators.pattern(\"^[a-zA-Z]{1}[a-zA-Z ]*$\"),\n            Validators.maxLength(25)\n          ],\n        ],\n        lastName: [\n          this.spAdminData !== undefined ? this.spAdminData.lastName : \"\",\n          [\n            Validators.required,\n            Validators.pattern(\"^[a-zA-Z]{1}[a-zA-Z ]*$\"),\n            Validators.maxLength(25)\n          ],\n        ],\n        phoneNo: [\n          this.spAdminData !== undefined ? this.spAdminData.phoneNo : \"\",\n          [_validatePhoneNumberInput.bind(this)]\n        ],\n        email: [\n          this.spAdminData !== undefined ? this.spAdminData.email : \"\",\n          [Validators.email]\n        ],\n      },\n      { validator: atLeastOne(Validators.required, [\"email\", \"phoneNo\"]) }\n    );\n  }\n\n  get f() {\n    return this.addEditForm.controls;\n  }\n\n  saveServiceProviderAdmin() {\n    this.submitted = true;\n    if (this.addEditForm.invalid) {\n      this.addEditForm.markAllAsTouched();\n      return;\n    }\n\n    this.spinnerService.show();\n    this.spAdmin = this.addEditForm.value;\n    this.spAdmin.serviceProviderId = this.spId;\n\n    if (\n      this.addEditForm.get(\"phoneNo\").value !== null &&\n      this.addEditForm.get(\"phoneNo\").value !== \"\"\n    ) {\n      const parsedValue = parsePhoneNumberFromString(this.addEditForm\n          .get(\"phoneNo\")\n          .value);\n      this.spAdmin.phoneNo = parsedValue.number.toString();\n    }\n\n    if (this.spAdminData === undefined) {\n      this.spAdmin.isActive = true;\n      this.spAdmin.roles = ['SPA'];\n      this.spAdmin.createdBy = this.authService.getLoggedUser().email;\n      this.spAdmin.createdById = this.authService.getLoggedUser().uId;\n      const cDialog = this.dialog.open(ConfirmDialogComponent,{\n        maxWidth: \"90vw\",\n        width: \"500px\",\n        backdropClass: \"backdropBackground\",\n        disableClose: true,\n        data: {\n          body:{\n            title: \"super_admin.add_service_provider_admin.label_add_administrator\",\n            text :\"super_admin.add_service_provider_admin.label_name_cannot_edited\",\n            message :\"super_admin.add_service_provider_admin.label_confirm_adding\",\n          }\n        }\n      });\n      cDialog.afterClosed().subscribe((boolean)=>{\n        let confirmValue =  boolean;\n        if(confirmValue){\n          this.store$.dispatch(\n            new ManageAdminStoreActions.SaveManageAdminAction(\n              this.spAdmin,\n              environment.dataApiUrl + 'service-providers/users/spa'\n            )\n          );\n        }\n      });\n      \n    } else {\n      this.spAdmin.modifiedBy = this.authService.getLoggedUser().email;\n      this.spAdmin.modifiedById = this.authService.getLoggedUser().uId;\n      this.spAdmin.id = this.spAdminData.id;\n      this.spAdmin.isActive = this.spAdminData.isActive;\n      this.store$.dispatch(\n        new ManageAdminStoreActions.UpdateManageAdminAction(\n          this.spAdmin,\n          environment.dataApiUrl + 'service-providers/users/spa'\n        )\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.doUnsubscribeAddEditSPA();\n  }\n\n  doUnsubscribeAddEditSPA() {\n    if (this.spAdminData === undefined) {\n      if (this.addManageAdminSuccessSubs)\n        this.addManageAdminSuccessSubs.unsubscribe();\n      if (this.addManageAdminFailureSubs)\n        this.addManageAdminFailureSubs.unsubscribe();\n      this.store$.dispatch(\n        new ManageAdminStoreActions.AfterSaveManageAdminSuccessAction()\n      );\n      this.store$.dispatch(\n        new ManageAdminStoreActions.AfterSaveManageAdminFailureAction()\n      );\n    } else {\n      if (this.updateManageAdminSuccessSubs)\n        this.updateManageAdminSuccessSubs.unsubscribe();\n      if (this.updateManageAdminFailureSubs)\n        this.updateManageAdminFailureSubs.unsubscribe();\n      this.store$.dispatch(\n        new ManageAdminStoreActions.AfterUpdateManageAdminSuccessAction()\n      );\n      this.store$.dispatch(\n        new ManageAdminStoreActions.AfterUpdateManageAdminFailureAction()\n      );\n    }\n  }\n\n  public hasError = (controlName: string, errorName: string) =>{\n    return this.addEditForm.controls[controlName].hasError(errorName);\n  }\n  charsOnly(control: string, event: KeyboardEvent) {\n    let charsOnlyPattern = /^[a-zA-Z ]$/;\n    let key = event.key;\n    if (charsOnlyPattern.test(key)) {\n      return true;\n    } else {\n      event.preventDefault();\n      return false;\n    }\n  }\n}\n","<mat-card class=\"dialog-header\">\n  <h1 mat-dialog-title>\n    {{ serviceProviderData[\"id\"] }} &nbsp;|&nbsp;\n    {{ \"super_admin.manage_admin.label_spa\" | translate }}\n    &nbsp;{{ \"super_admin.manage_admin.label_for_spa\" | translate }}\n    {{serviceProviderName}}\n  </h1>\n  <button mat-button mat-dialog-close class=\"me-3\">\n    <mat-icon>close</mat-icon>\n  </button>\n</mat-card>\n\n<mat-dialog-content class=\"px-0\">\n  <div class=\"container-fluid\">\n    <app-data-table-manage-admin class=\"manage-admin-table custom-table\" [endUrl]=\"endUrl\"\n      (addAdminCallBack)=\"openAddAdminDialog()\" (editCallBack)=\"openEditAdminDialog($event)\"\n      source=\"SPA\"  (sortChange)=\"onSortChange($event)\"></app-data-table-manage-admin>\n    <app-data-table-cloned-view *ngIf=\"adminClone?.length\" class=\"manage-admin-table manage-cloneview-table custom-table\"\n                                [adminUsers]=\"adminClone\"></app-data-table-cloned-view>\n  </div>\n</mat-dialog-content>\n","import { Component, Inject, OnDestroy, OnInit, ViewChild } from \"@angular/core\";\nimport { ServiceProvider } from \"../../manage-service-provider/service-provider.interface\";\nimport { DataTableManageAdminComponent } from \"../../../shared/data-table-manage-admin/data-table-manage-admin.component\";\nimport {\n  MAT_DIALOG_DATA,\n  MatDialog,\n  MatDialogRef,\n} from \"@angular/material/dialog\";\nimport { AddEditSpAdminComponent } from \"../add-edit-sp-admin/add-edit-sp-admin.component\";\nimport {\n  ManageAdminStoreSelectors,\n  ManageAdminStoreState,\n} from \"../../../shared/store/manage-admin\";\nimport { select, Store } from \"@ngrx/store\";\nimport { Subscription } from \"rxjs\";\nimport { SnackbarService } from \"@services/snackbar.service\";\nimport { environment } from \"src/environments/environment\";\nimport {SuperAdminService} from \"../../service/super-admin.service\";\n\n@Component({\n  selector: \"app-manage-admin\",\n  templateUrl: \"./manage-admin.component.html\",\n  styleUrls: [\"./manage-admin.component.scss\"],\n})\nexport class ManageAdminComponent implements OnInit, OnDestroy {\n  loadPage: boolean;\n  serviceProviderData: ServiceProvider;\n  endUrl: string;\n  idToShow: string;\n\n  @ViewChild(DataTableManageAdminComponent)\n  dataTableManageAdminComponent: DataTableManageAdminComponent;\n  activeUser: Subscription;\n  serviceProviderName;\n  adminClone = [];\n  adminCloneCopy = [];\n\n  constructor(\n    private dialogRef: MatDialogRef<ManageAdminComponent>,\n    private dialog: MatDialog,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private store$: Store<ManageAdminStoreState.ManageAdminState>,\n    private snackbar: SnackbarService,\n    private service: SuperAdminService\n  ) {}\n\n  ngOnInit() {\n    this.serviceProviderData = this.data.spData || {};\n    this.serviceProviderName = this.serviceProviderData?.companyName;\n    \n    this.endUrl = environment.dataApiUrl + 'service-providers/' +\n      this.serviceProviderData?.id + '/users/spa';\n    this.getSPACUsers();\n  }\n\n  doSubscriptionFormSelector() {\n    this.activeUser = this.store$\n      .pipe(select(ManageAdminStoreSelectors.selectActiveAdmins))\n      .subscribe((data) => {\n        if (data === 1) {\n          this.snackbar.openSnackBar(\"error_message.err_already_enabled_spa\", \"top\", \"center\", true);\n        } else {\n          this.dialog.open(AddEditSpAdminComponent, {\n            width: \"802px\",\n            maxWidth: \"95vw\",\n            data: { spAdmin: undefined, spId: this.serviceProviderData?.id },\n            backdropClass: \"backdropBackground\",\n            disableClose: true\n          });\n        }\n      });\n    this.activeUser.unsubscribe();\n  }\n\n  openAddAdminDialog() {\n    this.doSubscriptionFormSelector();\n  }\n  openEditAdminDialog(data) {\n    this.dialog.open(AddEditSpAdminComponent, {\n      width: \"802px\",\n      maxWidth: \"95vw\",\n      data: { spAdmin: data, spId: this.serviceProviderData?.id },\n      backdropClass: \"backdropBackground\",\n      disableClose: true,\n    });\n  }\n\n  onClose() {\n    this.dialogRef.close();\n  }\n  getSPACUsers() {\n    let url = environment.dataApiUrl + 'service-providers/' +\n    this.serviceProviderData?.id + '/users/spac';\n    this.service.getSPACloneUsers(url)\n        .subscribe((res:any) => {\n          if(res.status === 'OK') {\n            this.adminClone = res.data;\n            this.adminClone = this.adminClone.map(user => {\n              return {\n                ...user,\n                adminName: `${user.firstName} ${user.lastName}`,\n                email: user.email || \"\",\n                phoneNo: user.phoneNo || \"\"\n              };\n            });\n            this.adminCloneCopy = [...this.adminClone];\n          }\n    });\n\n  }\n  onSortChange(sortObject) {\n    let sort = JSON.parse(sortObject);\n    if (sort.direction === 'desc') {\n      this.adminClone = this.adminClone.sort((a, b) => {\n        if (a[sort.active] > b[sort.active]) return -1;\n        else if (a[sort.active] < b[sort.active]) return 1;\n        else return 0;\n      });\n    } else if (sort.direction === 'asc') {\n      this.adminClone = this.adminClone.sort((a, b) => {\n        if (a[sort.active] > b[sort.active]) return 1;\n        else if (a[sort.active] < b[sort.active]) return -1;\n        else return 0;\n      });\n    } else {\n      this.adminClone = [...this.adminCloneCopy];\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.activeUser) this.activeUser.unsubscribe();\n  }\n}\n","<div class=\"mt-3 mx-2 service-table admin-table-layout-pagination custom-table head-border\">\n    <ls-table [config]=\"config\" [data]=\"serviceProviderData\" [columns]=\"columns\" [tableSort]=\"true\">\n        <ng-template lsWidgetName=\"companyName\" let-row>\n            <span [matTooltip]=\"row.companyName\" matTooltipPosition=\"below\" class=\"text-truncate d-block\" [matTooltipDisabled]=\"row.companyName.length < 40\">\n           {{row.companyName}}\n      </span>\n        </ng-template>\n        <ng-template lsWidgetName=\"contactPerson\" let-row>\n            <span [matTooltip]=\"row.contactPerson\" matTooltipPosition=\"below\" class=\"text-truncate d-block\" [matTooltipDisabled]=\"row.contactPerson.length < 40\">\n          {{row.contactPerson}}\n      </span>\n        </ng-template>\n        <ng-template lsWidgetName=\"email\" let-row>\n            {{row?.email || \"-\"}}\n        </ng-template>\n        <ng-template lsWidgetName=\"phoneNo\" let-row>\n            {{row?.phoneNo || \"-\"}}\n        </ng-template>\n        <ng-template lsWidgetName=\"actionsHeading\" let-row>\n            <button mat-flat-button color=\"accent\" type=\"button\" (click)=\"openAddServiceProviderDialog()\">\n        <mat-icon class=\"justify-content-center\">add</mat-icon>\n        {{ \"buttons.btn_add_sp\" | translate }}\n      </button>\n        </ng-template>\n        <ng-template lsWidgetName=\"actions\" let-row>\n            <button mat-mini-fab color=\"primary\" (click)=\"openEditServiceProvider(row)\" class=\"d-flex justify-content-center align-items-center btn-boxed btn-no-shadow me-4\">\n        <mat-icon class=\"justify-content-center\"> edit</mat-icon>\n      </button>\n            <button type=\"button\" mat-flat-button color=\"primary\" class=\"cursor-pointer me-3\" (click)=\"openManageAdmin(row)\">\n        {{ \"buttons.btn_manage_admin\" | translate }}\n      </button>\n        </ng-template>\n    </ls-table>\n</div>\n","import {Component, OnDestroy, OnInit} from \"@angular/core\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {AddEditServiceProviderComponent} from \"src/app/super-admin/dialog/add-edit-service-provider/add-edit-service-provider.component\";\nimport {ManageAdminComponent} from \"src/app/super-admin/dialog/manage-admin/manage-admin.component\";\nimport {Store} from \"@ngrx/store\";\nimport {\n  ManageServiceProvideStoreActions,\n  ManageServiceProvideStoreSelectors,\n  ManageServiceProvideStoreState,\n} from \"../store/manage-service-provider\";\nimport {ServiceProvider} from \"./service-provider.interface\";\nimport {Observable, Subscription} from \"rxjs\";\nimport {LSColumn, LSColumnType, LSTableConfig, TableState,} from \"../../life-signals/_models/ls-column.model\";\nimport {ServiceProviderState} from \"../store/manage-service-provider/manage-service-provider.reducer\";\n\n@Component({\n  selector: \"app-manage-service-provider\",\n  templateUrl: \"./manage-service-provider.component.html\",\n  styleUrls: [\"./manage-service-provider.component.scss\"],\n})\nexport class ManageServiceProviderComponent implements OnInit, OnDestroy {\n  companySortEnabled = true;\n  contactPersonSortEnabled = false;\n  dataLength;\n  serviceProvider$: Observable<ServiceProviderState>;\n  serviceProviderData: ServiceProvider[];\n\n  columns: LSColumn[] = [\n    {\n      id: \"id\",\n      label: \"id\",\n      headerClass: [\"text-start\"],\n      sortable: true,\n      type: LSColumnType.TEXT,\n      //labelClass: \"fw-bold\",\n      cellClass: [],\n    },\n    {\n      id: \"companyName\",\n      label: \"companyName\",\n      headerClass: [\"text-start\"],\n      sortable: true,\n      type: LSColumnType.TEXT,\n      cellClass: [\"fw-bold\" ,\"font-size-16\"],\n      style: \"max-width: 450px; width: 450px;\",\n     \n    },\n    {\n      id: \"contactPerson\",\n      label: \"contactPerson\",\n      headerClass: [\"text-start\"],\n      sortable: true,\n      type: LSColumnType.TEXT,\n      labelClass: \"fw-bold\",\n      cellClass: [\"bold-name\"],\n      style: \"max-width: 300px; width: 300px;\",\n    },\n    {\n      id: \"email\",\n      label: \"email\",\n      headerClass: [\"text-start\"],\n      sortable: true,\n      type: LSColumnType.TEXT,\n      labelClass: \"fw-bold\",\n      cellClass: [],\n    },\n    {\n      id: \"phoneNo\",\n      label: \"phoneNo\",\n      headerClass: [\"text-start\"],\n      sortable: true,\n      type: LSColumnType.TEXT,\n      labelClass: \"fw-bold\",\n      cellClass: [],\n    },\n  ];\n  config: LSTableConfig = {\n    id: \"manage-service-provider-table\",\n    rowSelectEnabled: false,\n    actions: {\n      header: {\n        class: [\"d-flex\", \"align-items-center\", \"justify-content-end\"],\n      },\n      show: true,\n      headerLabel: \"\",\n      class: [\"d-flex\", \"align-items-center\", \"justify-content-end\"],\n    },\n    page: {\n      pageSize: 10,\n      pageIndex: 0,\n    },\n    paginator: {\n      hide: false,\n      offline: true,\n    },\n    translateKey: \"manage-service-provider-table\",\n    translate: true,\n    tableState: TableState.DEFAULT\n  };\n  serviceProviderSub: Subscription;\n\n  constructor(\n    private dialog: MatDialog,\n    private store$: Store<ManageServiceProvideStoreState.ServiceProviderState>\n  ) {}\n\n  ngOnInit() {\n    this.getServiceProviders();\n    this.listServiceProviders();\n  }\n\n  getServiceProviders() {\n    this.store$.dispatch(\n        new ManageServiceProvideStoreActions.LoadServiceProviderRequestAction()\n    );\n  }\n\n  listServiceProviders() {\n    this.serviceProvider$ = this.store$.select(\n      ManageServiceProvideStoreSelectors.selectManageServiceProviderList\n    );\n    this.serviceProviderSub = this.serviceProvider$.subscribe((response) => {\n      this.config.tableState = <TableState>response?.tableState;\n        this.config.page.length = response?.SERVICE_PROVIDER_DATA?.length;\n        this.serviceProviderData = response?.SERVICE_PROVIDER_DATA?.map((x) => {\n          return {\n            ...x,\n            contactPerson: `${x.firstName} ${x.lastName}`,\n          };\n        });\n    });\n  }\n\n  trackBy(_: number, serviceProvider: ServiceProvider) {\n    return serviceProvider.companyName;\n  }\n\n  openAddServiceProviderDialog() {\n    this.dialog.open(AddEditServiceProviderComponent, {\n      width: \"800px\",\n      maxWidth: \"95vw\",\n      //  height: '650px',\n      data: { spData: undefined },\n      \n      backdropClass: \"backdropBackground\",\n      disableClose: true,\n    });\n  }\n  openEditServiceProvider(data) {\n    this.dialog.open(AddEditServiceProviderComponent, {\n      width: \"800px\",\n      maxWidth: \"95vw\",\n      // height: '550px',\n      data: { spData: data },\n      \n      backdropClass: \"backdropBackground\",\n      disableClose: true,\n    }).afterClosed().subscribe((data) => {\n      setTimeout(() => this.getServiceProviders(), 2000);\n    })\n  }\n  openManageAdmin(data) {\n    this.dialog.open(ManageAdminComponent, {\n      maxWidth: \"100vw\",\n      //  maxHeight: '100vh',\n      // height: '100%',\n      width: \"95vw\",\n      //  height: '50vw',\n      data: { spData: data },\n      \n      backdropClass: \"backdropBackground\",\n      disableClose: true,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.serviceProviderSub) this.serviceProviderSub.unsubscribe();\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport {\n  AddEditServiceProviderResponse,\n  ServiceProviderResponse,\n} from \"../manage-service-provider/service-provider.interface\";\nimport { environment } from \"src/environments/environment\";\nimport {UserResponse} from \"../../interfaces/user.interface\";\nimport {catchError} from \"rxjs/operators\";\nimport {throwError} from \"rxjs\";\n\n@Injectable()\nexport class SuperAdminService {\n  constructor(\n    private httpClient: HttpClient,\n  ) {}\n\n  getAllServiceProvider() {\n    const authHeaders = new HttpHeaders({\n      \"X-Skip-Interceptor\": \"\",\n      \"Access-Control-Allow-Origin\": \"*\",\n    });\n    return this.httpClient\n      .get<ServiceProviderResponse>(\n        environment.dataApiUrl + 'service-providers/',\n        { headers: authHeaders }\n      );\n  }\n\n  addServiceProvider(requestBody) {\n    return this.httpClient\n      .post<AddEditServiceProviderResponse>(\n        environment.dataApiUrl + 'service-providers/',\n        requestBody\n      );\n  }\n\n  updateServiceProvider(requestBody) {\n    return this.httpClient\n      .put<AddEditServiceProviderResponse>(\n        environment.dataApiUrl + 'service-providers/',\n        requestBody\n      );\n  }\n  getSPACloneUsers(url) {\n    return this.httpClient.get(url).pipe(catchError(this.handleError));\n  }\n  handleError(error: any) {\n    let errorMessage = \"\";\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\n","import { Action } from \"@ngrx/store\";\nimport { ServiceProvider } from \"../../manage-service-provider/service-provider.interface\";\n\nexport enum ManageSpActionTypes {\n  LOAD_SERVICE_PROVIDER_ACTION = \"[SERVICEPROVIDER] Load Service Provider Request\",\n  LOAD_SERVICE_PROVIDER_SUCCESS = \"[SERVICEPROVIDER] Load Service Provider Success\",\n  LOAD_SERVICE_PROVIDER_FAILURE = \"[SERVICEPROVIDER] Load Service Provider Failure\",\n  SAVE_SERVICE_PROVIDER_ACTION = \"[SERVICEPROVIDER] Save Service Provider\",\n  SAVE_SERVICE_PROVIDER_SUCCESS = \"[SERVICEPROVIDER] Save Service Provider Success\",\n  AFTER_SAVE_SERVICE_PROVIDER_SUCCESS = \"[SERVICEPROVIDER] After Save Service Provider Success\",\n  SAVE_SERVICE_PROVIDER_FAILURE = \"[SERVICEPROVIDER] Save Service Provider Failure\",\n  AFTER_SAVE_SERVICE_PROVIDER_FAILURE = \"[SERVICEPROVIDER] After Save Service Provider Failure\",\n  UPDATE_SERVICE_PROVIDER_ACTION = \"[SERVICEPROVIDER] Update Service Provider\",\n  UPDATE_SERVICE_PROVIDER_SUCCESS = \"[SERVICEPROVIDER] Update Service Provider Success\",\n  AFTER_UPDATE_SERVICE_PROVIDER_SUCCESS = \"[SERVICEPROVIDER] After Update Service Provider Success\",\n  UPDATE_SERVICE_PROVIDER_FAILURE = \"[SERVICEPROVIDER] Update Service Provider Failure\",\n  AFTER_UPDATE_SERVICE_PROVIDER_FAILURE = \"[SERVICEPROVIDER] After Update Service Provider Failure\",\n}\n\nexport class LoadServiceProviderRequestAction implements Action {\n  readonly type = ManageSpActionTypes.LOAD_SERVICE_PROVIDER_ACTION;\n}\n\nexport class LoadServiceProviderSuccessAction implements Action {\n  readonly type = ManageSpActionTypes.LOAD_SERVICE_PROVIDER_SUCCESS;\n  constructor(public payload: ServiceProvider[]) {}\n}\n\nexport class LoadServiceProviderFailureAction implements Action {\n  readonly type = ManageSpActionTypes.LOAD_SERVICE_PROVIDER_FAILURE;\n  constructor(public payload: string) {}\n}\n\nexport class SaveServiceProviderAction implements Action {\n  readonly type = ManageSpActionTypes.SAVE_SERVICE_PROVIDER_ACTION;\n  constructor(public payload: ServiceProvider) {}\n}\n\nexport class SaveServiceProviderSuccessAction implements Action {\n  readonly type = ManageSpActionTypes.SAVE_SERVICE_PROVIDER_SUCCESS;\n  constructor(public payload: ServiceProvider) {}\n}\n\nexport class SaveServiceProviderFailureAction implements Action {\n  readonly type = ManageSpActionTypes.SAVE_SERVICE_PROVIDER_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateServiceProviderAction implements Action {\n  readonly type = ManageSpActionTypes.UPDATE_SERVICE_PROVIDER_ACTION;\n  constructor(public payload: ServiceProvider) {}\n}\n\nexport class UpdateServiceProviderSuccessAction implements Action {\n  readonly type = ManageSpActionTypes.UPDATE_SERVICE_PROVIDER_SUCCESS;\n  constructor(public payload: ServiceProvider) {}\n}\n\nexport class UpdateServiceProviderFailureAction implements Action {\n  readonly type = ManageSpActionTypes.UPDATE_SERVICE_PROVIDER_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class AfterSaveServiceProviderSuccess implements Action {\n  readonly type = ManageSpActionTypes.AFTER_SAVE_SERVICE_PROVIDER_SUCCESS;\n  constructor() {}\n}\n\nexport class AfterSaveServiceProviderFailure implements Action {\n  readonly type = ManageSpActionTypes.AFTER_SAVE_SERVICE_PROVIDER_FAILURE;\n  constructor() {}\n}\n\nexport class AfterUpdateServiceProviderSuccess implements Action {\n  readonly type = ManageSpActionTypes.AFTER_UPDATE_SERVICE_PROVIDER_SUCCESS;\n  constructor() {}\n}\n\nexport class AfterUpdateServiceProviderFailure implements Action {\n  readonly type = ManageSpActionTypes.AFTER_UPDATE_SERVICE_PROVIDER_FAILURE;\n  constructor() {}\n}\n\nexport type ServiceProviderActions =\n  | LoadServiceProviderRequestAction\n  | LoadServiceProviderSuccessAction\n  | LoadServiceProviderFailureAction\n  | SaveServiceProviderAction\n  | SaveServiceProviderSuccessAction\n  | SaveServiceProviderFailureAction\n  | UpdateServiceProviderAction\n  | UpdateServiceProviderSuccessAction\n  | UpdateServiceProviderFailureAction\n  | AfterSaveServiceProviderSuccess\n  | AfterSaveServiceProviderFailure\n  | AfterUpdateServiceProviderSuccess\n  | AfterUpdateServiceProviderFailure;\n","import { Injectable } from \"@angular/core\";\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { HttpClient } from \"@angular/common/http\";\nimport {\n  catchError,\n  map,\n  mergeMap,\n  startWith,\n  switchMap,\n} from \"rxjs/operators\";\nimport { SuperAdminService } from \"../../service/super-admin.service\";\nimport * as ManageServiceProviderActions from \"./manage-service-provider.actions\";\nimport { of as observableOf } from \"rxjs\";\nimport {\n  SaveServiceProviderFailureAction,\n  SaveServiceProviderSuccessAction,\n  LoadServiceProviderFailureAction,\n  LoadServiceProviderSuccessAction,\n  UpdateServiceProviderFailureAction,\n  UpdateServiceProviderSuccessAction,\n} from \"./manage-service-provider.actions\";\n\n@Injectable()\nexport class ManageServiceProviderEffects {\n  constructor(\n    private actions$: Actions,\n    private http: HttpClient,\n    private superAdminService: SuperAdminService\n  ) {}\n\n  loadServiceProvider = createEffect(() => {\n    return this.actions$.pipe(\n      ofType<ManageServiceProviderActions.LoadServiceProviderRequestAction>(\n        ManageServiceProviderActions.ManageSpActionTypes\n          .LOAD_SERVICE_PROVIDER_ACTION\n      ),\n      startWith(\n        new ManageServiceProviderActions.LoadServiceProviderRequestAction()\n      ),\n      mergeMap((action) =>\n        this.superAdminService.getAllServiceProvider().pipe(\n          map(\n            (serviceProviderRes) =>\n              new LoadServiceProviderSuccessAction(serviceProviderRes.data)\n          ),\n          catchError((error) =>\n            observableOf(new LoadServiceProviderFailureAction(error))\n          )\n        )\n      )\n    );\n  });\n\n  saveServiceProvider = createEffect(() => {\n    return this.actions$.pipe(\n      ofType<ManageServiceProviderActions.SaveServiceProviderAction>(\n        ManageServiceProviderActions.ManageSpActionTypes\n          .SAVE_SERVICE_PROVIDER_ACTION\n      ),\n      switchMap(\n        (\n          addServiceProvider: ManageServiceProviderActions.SaveServiceProviderAction\n        ) => {\n          return this.superAdminService\n            .addServiceProvider(addServiceProvider.payload)\n            .pipe(\n              map(\n                (addServiceProviderRes) =>\n                  new SaveServiceProviderSuccessAction(\n                    addServiceProviderRes.data\n                  )\n              ),\n              catchError((error) =>\n                observableOf(new SaveServiceProviderFailureAction(error))\n              )\n            );\n        }\n      )\n    );\n  });\n\n  updateServiceProvider = createEffect(() => {\n    return this.actions$.pipe(\n      ofType<ManageServiceProviderActions.UpdateServiceProviderAction>(\n        ManageServiceProviderActions.ManageSpActionTypes\n          .UPDATE_SERVICE_PROVIDER_ACTION\n      ),\n      switchMap(\n        (\n          updateServiceProvider: ManageServiceProviderActions.UpdateServiceProviderAction\n        ) => {\n          return this.superAdminService\n            .updateServiceProvider(updateServiceProvider.payload)\n            .pipe(\n              map(\n                (updateServiceProviderRes) =>\n                  new UpdateServiceProviderSuccessAction(\n                    updateServiceProviderRes.data\n                  )\n              ),\n              catchError((error) =>\n                observableOf(new UpdateServiceProviderFailureAction(error))\n              )\n            );\n        }\n      )\n    );\n  });\n}\n","import { ServiceProvider } from \"../../manage-service-provider/service-provider.interface\";\nimport {\n  ManageSpActionTypes,\n  ServiceProviderActions,\n} from \"./manage-service-provider.actions\";\nimport {TableState} from \"../../../life-signals/_models/ls-column.model\";\nimport {ActionTypes} from \"../../../active-patients/store/active-patients.actions\";\n\nexport interface ServiceProviderState {\n  SERVICE_PROVIDER_DATA: ServiceProvider[];\n  error: string;\n  save_service_provider_success: ServiceProvider;\n  save_service_provider_error: any;\n  tableState?: string;\n}\n\nconst initialState: ServiceProviderState = {\n  SERVICE_PROVIDER_DATA: [],\n  error: \"\",\n  save_service_provider_success: null,\n  save_service_provider_error: \"\",\n  tableState: TableState.DEFAULT\n};\n\nexport const serviceProviderFeatureKey = \"serviceprovider\";\n\nexport function serviceProviderReducer(\n  state: ServiceProviderState = initialState,\n  action: ServiceProviderActions\n) {\n  switch (action.type) {\n    case ManageSpActionTypes.LOAD_SERVICE_PROVIDER_ACTION: {\n      return {\n        ...state,\n        error: null,\n        tableState: TableState.LOADING,\n      };\n    }\n    case ManageSpActionTypes.LOAD_SERVICE_PROVIDER_SUCCESS:\n      return {\n        ...state,\n        tableState: TableState.SUCCESS,\n        SERVICE_PROVIDER_DATA: action.payload,\n      };\n\n    case ManageSpActionTypes.LOAD_SERVICE_PROVIDER_FAILURE:\n      return {\n        ...state,\n        tableState: TableState.FAILURE,\n        error: action.payload,\n      };\n    case ManageSpActionTypes.SAVE_SERVICE_PROVIDER_ACTION:\n      return {\n        ...state,\n        save_service_provider_success: null,\n      };\n    case ManageSpActionTypes.SAVE_SERVICE_PROVIDER_SUCCESS:\n      return {\n        ...state,\n        save_service_provider_success: action.payload,\n        save_service_provider_error: \"\",\n        SERVICE_PROVIDER_DATA: [\n          ...state?.SERVICE_PROVIDER_DATA,\n          action.payload,\n        ],\n      };\n\n    case ManageSpActionTypes.AFTER_SAVE_SERVICE_PROVIDER_SUCCESS: {\n      return {\n        ...state,\n        save_service_provider_success: null,\n        save_service_provider_error: \"\",\n      };\n    }\n\n    case ManageSpActionTypes.SAVE_SERVICE_PROVIDER_FAILURE:\n      return {\n        ...state,\n        save_service_provider_error: action.payload,\n      };\n\n    case ManageSpActionTypes.AFTER_SAVE_SERVICE_PROVIDER_FAILURE:\n      return {\n        ...state,\n        save_service_provider_error: \"\",\n        save_service_provider_success: null,\n      };\n\n    case ManageSpActionTypes.UPDATE_SERVICE_PROVIDER_SUCCESS:\n      const updatedSpData = state?.SERVICE_PROVIDER_DATA.map((spData) => {\n        return spData.id === action.payload.id ? action.payload : spData;\n      });\n\n      return {\n        ...state,\n        save_service_provider_error: \"\",\n        error: \"\",\n        save_service_provider_success: action.payload,\n        SERVICE_PROVIDER_DATA: updatedSpData,\n      };\n\n    case ManageSpActionTypes.AFTER_UPDATE_SERVICE_PROVIDER_SUCCESS:\n      return {\n        ...state,\n        save_service_provider_success: null,\n        save_service_provider_error: \"\",\n      };\n\n    case ManageSpActionTypes.UPDATE_SERVICE_PROVIDER_FAILURE:\n      return {\n        ...state,\n        save_service_provider_error: action.payload,\n      };\n\n    case ManageSpActionTypes.AFTER_UPDATE_SERVICE_PROVIDER_FAILURE:\n      return {\n        ...state,\n        save_service_provider_error: \"\",\n        save_service_provider_success: null,\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n}\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport {\n  serviceProviderFeatureKey,\n  ServiceProviderState,\n} from \"./manage-service-provider.reducer\";\n\nconst getManageServiceProviderState =\n  createFeatureSelector<ServiceProviderState>(serviceProviderFeatureKey);\n\nexport const selectManageServiceProviderList = createSelector(\n  getManageServiceProviderState,\n  (state: ServiceProviderState) => state\n);\n\nexport const selectManageServiceProviderError = createSelector(\n  getManageServiceProviderState,\n  (state: ServiceProviderState) => state?.error\n);\n\nexport const addServiceProviderSuccess = createSelector(\n  getManageServiceProviderState,\n  (state: ServiceProviderState) => state?.save_service_provider_success\n);\n\nexport const addServiceProviderFailure = createSelector(\n  getManageServiceProviderState,\n  (state: ServiceProviderState) => state?.save_service_provider_error\n);\n\nexport const updateServiceProviderSuccess = createSelector(\n  getManageServiceProviderState,\n  (state: ServiceProviderState) => state?.save_service_provider_success\n);\n\nexport const updateServiceProviderFailure = createSelector(\n  getManageServiceProviderState,\n  (state: ServiceProviderState) => state?.save_service_provider_error\n);\n","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { AuthGuard } from \"../guards/auth.guard\";\nimport { RootComponent } from \"../shared/root/root.component\";\nimport { ManageServiceProviderComponent } from \"./manage-service-provider/manage-service-provider.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    canActivate: [AuthGuard],\n    component: RootComponent,\n    children: [\n      {\n        path: \"\",\n        component: ManageServiceProviderComponent,\n        canActivate: [AuthGuard],\n        data: { roles: [\"SA\"] },\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SuperAdminRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { SuperAdminRoutingModule } from \"./super-admin-routing.module\";\nimport { ManageServiceProviderComponent } from \"./manage-service-provider/manage-service-provider.component\";\nimport { SortModule } from \"../core/directives/sort.module\";\nimport { AddEditServiceProviderComponent } from \"./dialog/add-edit-service-provider/add-edit-service-provider.component\";\n\nimport { SharedModule } from \"../shared/shared.module\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { NgxIntlTelInputModule } from \"ngx-intl-tel-input\";\nimport { DialogsModule } from \"../dialogs/dialogs.module\";\nimport { AddEditSpAdminComponent } from \"./dialog/add-edit-sp-admin/add-edit-sp-admin.component\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatNativeDateModule } from \"@angular/material/core\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { I18nModule } from \"../i18n/i18n.module\";\nimport { MatTableModule } from \"@angular/material/table\";\nimport { MatSortModule } from \"@angular/material/sort\";\nimport { StoreModule } from \"@ngrx/store\";\nimport * as fromManageServiceProvideReducer from \"./store/manage-service-provider/manage-service-provider.reducer\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { ManageServiceProviderEffects } from \"./store/manage-service-provider/manage-service-provider.effects\";\nimport { SuperAdminService } from \"./service/super-admin.service\";\nimport { ManageAdminComponent } from \"./dialog/manage-admin/manage-admin.component\";\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { KeycloakBearerInterceptor } from \"keycloak-angular\";\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\nimport { LifeSignalsModule } from \"../life-signals/life-signals.module\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport {ErrorInterceptor} from \"../interceptors/error.interceptor\";\n\n@NgModule({\n  declarations: [\n    ManageServiceProviderComponent,\n    AddEditServiceProviderComponent,\n    AddEditSpAdminComponent,\n    ManageAdminComponent,\n  ],\n  imports: [\n    CommonModule,\n    SuperAdminRoutingModule,\n    SortModule,\n    MatIconModule,\n    MatDialogModule,\n    SharedModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatNativeDateModule,\n    MatTooltipModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    NgxIntlTelInputModule,\n    MatCheckboxModule,\n    DialogsModule,\n    I18nModule,\n    MatTableModule,\n    MatSortModule,\n    StoreModule.forFeature(\n      fromManageServiceProvideReducer.serviceProviderFeatureKey,\n      fromManageServiceProvideReducer.serviceProviderReducer\n    ),\n    EffectsModule.forFeature([ManageServiceProviderEffects]),\n    MatPaginatorModule,\n    LifeSignalsModule,\n    MatButtonModule,\n    MatCardModule,\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: KeycloakBearerInterceptor,\n      multi: true,\n    },\n    SuperAdminService,\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true}\n  ],\n})\nexport class SuperAdminModule {}\n"]}